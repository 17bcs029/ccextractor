!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AC3_ID	myth.c	51;"	d	file:
ACTIVITY_H	activity.h	2;"	d
ARABIC	telxcc.c	/^	ARABIC,$/;"	e	enum:__anon6	file:
ASF_AUDIO_MEDIA	asf_constants.h	21;"	d
ASF_BINARY_MEDIA	asf_constants.h	23;"	d
ASF_COMPATIBILITY2	asf_constants.h	17;"	d
ASF_CONTENT_DESCRIPTION	asf_constants.h	10;"	d
ASF_DATA	asf_constants.h	4;"	d
ASF_EXTENDED_CONTENT_DESCRIPTION	asf_constants.h	11;"	d
ASF_EXTENDED_STREAM_PROPERTIES	asf_constants.h	14;"	d
ASF_FILE_PROPERTIES	asf_constants.h	7;"	d
ASF_HEADER	asf_constants.h	3;"	d
ASF_HEADER_EXTENSION	asf_constants.h	9;"	d
ASF_METADATA	asf_constants.h	15;"	d
ASF_METADATA_LIBRARY	asf_constants.h	16;"	d
ASF_PADDING	asf_constants.h	19;"	d
ASF_STREAM_BITRATE_PROPERTIES	asf_constants.h	12;"	d
ASF_STREAM_PROPERTIES	asf_constants.h	8;"	d
ASF_TypeLength	asf_functions.c	14;"	d	file:
ASF_VIDEO_MEDIA	asf_constants.h	22;"	d
ATSC_source_pg_map	lib_ccx.h	/^	int16_t ATSC_source_pg_map[0xffff];$/;"	m	struct:lib_ccx_ctx
AUDIO_ID	myth.c	49;"	d	file:
AVC_FUNCTION_H	avc_functions.h	2;"	d
AVERROR_IO	myth.c	25;"	d	file:
AVPacket	myth.c	/^typedef struct AVPacket$/;"	s	file:
AVPacket	myth.c	/^} AVPacket;$/;"	t	typeref:struct:AVPacket	file:
AV_NOPTS_VALUE	myth.c	40;"	d	file:
AudioStreamNumber	asf_constants.h	/^	int AudioStreamNumber;$/;"	m	struct:__anon8
BIN_DATA	networking.c	20;"	d	file:
BIN_HEADER	networking.c	19;"	d	file:
BIN_MODE	networking.c	17;"	d	file:
BROADCAST_HEADER	ccx_common_constants.c	/^const unsigned char BROADCAST_HEADER[]={0xff, 0xff, 0xff, 0xff};$/;"	v
BUFFER_SIZE	networking.c	33;"	d	file:
BUFSIZE	ccx_common_constants.h	33;"	d
CCEXTRACTOR_CCX_DTVCC_H	ccx_dtvcc.h	2;"	d
CCH	spupng_encoder.h	14;"	d
CCPL	spupng_encoder.c	11;"	d	file:
CCW	spupng_encoder.h	13;"	d
CCX_CCEXTRACTOR_H	lib_ccx.h	2;"	d
CCX_CODEC_ANY	ccx_common_constants.h	/^	CCX_CODEC_ANY,$/;"	e	enum:ccx_code_type
CCX_CODEC_ATSC_CC	ccx_common_constants.h	/^	CCX_CODEC_ATSC_CC,$/;"	e	enum:ccx_code_type
CCX_CODEC_DVB	ccx_common_constants.h	/^	CCX_CODEC_DVB,$/;"	e	enum:ccx_code_type
CCX_CODEC_ISDB_CC	ccx_common_constants.h	/^	CCX_CODEC_ISDB_CC,$/;"	e	enum:ccx_code_type
CCX_CODEC_NONE	ccx_common_constants.h	/^	CCX_CODEC_NONE,$/;"	e	enum:ccx_code_type
CCX_CODEC_TELETEXT	ccx_common_constants.h	/^	CCX_CODEC_TELETEXT,$/;"	e	enum:ccx_code_type
CCX_COMMON_EXIT_BUG_BUG	ccx_common_common.h	30;"	d
CCX_COMMON_EXIT_FILE_CREATION_FAILED	ccx_common_common.h	27;"	d
CCX_COMMON_EXIT_UNSUPPORTED	ccx_common_common.h	28;"	d
CCX_COMMON_LOGGING_GUI_XDS_CALL_LETTERS	ccx_common_structs.h	/^	CCX_COMMON_LOGGING_GUI_XDS_CALL_LETTERS \/\/ Called with current_xds_call_letters$/;"	e	enum:ccx_common_logging_gui
CCX_COMMON_LOGGING_GUI_XDS_PROGRAM_DESCRIPTION	ccx_common_structs.h	/^	CCX_COMMON_LOGGING_GUI_XDS_PROGRAM_DESCRIPTION, \/\/ Called with line_num, xds_desc$/;"	e	enum:ccx_common_logging_gui
CCX_COMMON_LOGGING_GUI_XDS_PROGRAM_ID_NR	ccx_common_structs.h	/^	CCX_COMMON_LOGGING_GUI_XDS_PROGRAM_ID_NR, \/\/ Called with current_xds_min, current_xds_hour, current_xds_date, current_xds_month$/;"	e	enum:ccx_common_logging_gui
CCX_COMMON_LOGGING_GUI_XDS_PROGRAM_NAME	ccx_common_structs.h	/^	CCX_COMMON_LOGGING_GUI_XDS_PROGRAM_NAME, \/\/ Called with xds_program_name$/;"	e	enum:ccx_common_logging_gui
CCX_COMMON_OPTION_H	ccx_common_option.h	2;"	d
CCX_CONSTANTS_H	ccx_common_constants.h	2;"	d
CCX_DECODERS_STRUCTS_H	ccx_decoders_structs.h	2;"	d
CCX_DECODER_608_H	ccx_decoders_608.h	2;"	d
CCX_DECODER_608_SCREEN_WIDTH	ccx_decoders_structs.h	11;"	d
CCX_DECODER_VBI	ccx_decoders_vbi.h	2;"	d
CCX_DECODER_XDS_H	ccx_decoders_xds.h	2;"	d
CCX_DEMUXER_H	ccx_demuxer.h	2;"	d
CCX_DMT_708	ccx_common_constants.h	/^	CCX_DMT_708=0x20, \/\/ Show CC-708 decoder debug?$/;"	e	enum:ccx_debug_message_types
CCX_DMT_CBRAW	ccx_common_constants.h	/^	CCX_DMT_CBRAW=0x80, \/\/ Caption blocks with FTS timing$/;"	e	enum:ccx_debug_message_types
CCX_DMT_DECODER_608	ccx_common_constants.h	/^	CCX_DMT_DECODER_608=0x10, \/\/ Show CC-608 decoder debug?$/;"	e	enum:ccx_debug_message_types
CCX_DMT_DECODER_XDS	ccx_common_constants.h	/^	CCX_DMT_DECODER_XDS=0x40, \/\/ Show XDS decoder debug?$/;"	e	enum:ccx_debug_message_types
CCX_DMT_DUMPDEF	ccx_common_constants.h	/^	CCX_DMT_DUMPDEF=0x2000 \/\/ Dump defective TS packets$/;"	e	enum:ccx_debug_message_types
CCX_DMT_GENERIC_NOTICES	ccx_common_constants.h	/^	CCX_DMT_GENERIC_NOTICES=0x100, \/\/ Generic, always displayed even if no debug is selected$/;"	e	enum:ccx_debug_message_types
CCX_DMT_LEVENSHTEIN	ccx_common_constants.h	/^	CCX_DMT_LEVENSHTEIN=0x1000, \/\/ Levenshtein distance calculations$/;"	e	enum:ccx_debug_message_types
CCX_DMT_PARSE	ccx_common_constants.h	/^	CCX_DMT_PARSE=1, \/\/ Show information related to parsing the container$/;"	e	enum:ccx_debug_message_types
CCX_DMT_PAT	ccx_common_constants.h	/^	CCX_DMT_PAT=0x400, \/\/ Program Allocation Table dump$/;"	e	enum:ccx_debug_message_types
CCX_DMT_PMT	ccx_common_constants.h	/^	CCX_DMT_PMT=0x800, \/\/ Program Map Table dump$/;"	e	enum:ccx_debug_message_types
CCX_DMT_TELETEXT	ccx_common_constants.h	/^	CCX_DMT_TELETEXT=0x200, \/\/ Show teletext debug?$/;"	e	enum:ccx_debug_message_types
CCX_DMT_TIME	ccx_common_constants.h	/^	CCX_DMT_TIME=4, \/\/ Show GOP and PTS timing information$/;"	e	enum:ccx_debug_message_types
CCX_DMT_VERBOSE	ccx_common_constants.h	/^	CCX_DMT_VERBOSE=8, \/\/ Show lots of debugging output$/;"	e	enum:ccx_debug_message_types
CCX_DMT_VIDES	ccx_common_constants.h	/^	CCX_DMT_VIDES=2,\/\/ Show video stream related information$/;"	e	enum:ccx_debug_message_types
CCX_DS_FILE	ccx_common_constants.h	/^	CCX_DS_FILE=0,$/;"	e	enum:ccx_datasource
CCX_DS_NETWORK	ccx_common_constants.h	/^	CCX_DS_NETWORK=2,$/;"	e	enum:ccx_datasource
CCX_DS_STDIN	ccx_common_constants.h	/^	CCX_DS_STDIN=1,$/;"	e	enum:ccx_datasource
CCX_DS_TCP	ccx_common_constants.h	/^	CCX_DS_TCP=3$/;"	e	enum:ccx_datasource
CCX_DTVCC_ANCHOR_POINT_BOTTOM_CENTER	ccx_decoders_708.h	/^	CCX_DTVCC_ANCHOR_POINT_BOTTOM_CENTER 	= 7,$/;"	e	enum:ccx_dtvcc_pen_anchor_point
CCX_DTVCC_ANCHOR_POINT_BOTTOM_LEFT	ccx_decoders_708.h	/^	CCX_DTVCC_ANCHOR_POINT_BOTTOM_LEFT 		= 6,$/;"	e	enum:ccx_dtvcc_pen_anchor_point
CCX_DTVCC_ANCHOR_POINT_BOTTOM_RIGHT	ccx_decoders_708.h	/^	CCX_DTVCC_ANCHOR_POINT_BOTTOM_RIGHT 	= 8$/;"	e	enum:ccx_dtvcc_pen_anchor_point
CCX_DTVCC_ANCHOR_POINT_MIDDLE_CENTER	ccx_decoders_708.h	/^	CCX_DTVCC_ANCHOR_POINT_MIDDLE_CENTER 	= 4,$/;"	e	enum:ccx_dtvcc_pen_anchor_point
CCX_DTVCC_ANCHOR_POINT_MIDDLE_LEFT	ccx_decoders_708.h	/^	CCX_DTVCC_ANCHOR_POINT_MIDDLE_LEFT 		= 3,$/;"	e	enum:ccx_dtvcc_pen_anchor_point
CCX_DTVCC_ANCHOR_POINT_MIDDLE_RIGHT	ccx_decoders_708.h	/^	CCX_DTVCC_ANCHOR_POINT_MIDDLE_RIGHT 	= 5,$/;"	e	enum:ccx_dtvcc_pen_anchor_point
CCX_DTVCC_ANCHOR_POINT_TOP_CENTER	ccx_decoders_708.h	/^	CCX_DTVCC_ANCHOR_POINT_TOP_CENTER 		= 1,$/;"	e	enum:ccx_dtvcc_pen_anchor_point
CCX_DTVCC_ANCHOR_POINT_TOP_LEFT	ccx_decoders_708.h	/^	CCX_DTVCC_ANCHOR_POINT_TOP_LEFT 		= 0,$/;"	e	enum:ccx_dtvcc_pen_anchor_point
CCX_DTVCC_ANCHOR_POINT_TOP_RIGHT	ccx_decoders_708.h	/^	CCX_DTVCC_ANCHOR_POINT_TOP_RIGHT 		= 2,$/;"	e	enum:ccx_dtvcc_pen_anchor_point
CCX_DTVCC_C0_BS	ccx_decoders_708.h	/^	CCX_DTVCC_C0_BS = 	0x08,$/;"	e	enum:CCX_DTVCC_COMMANDS_C0_CODES
CCX_DTVCC_C0_CR	ccx_decoders_708.h	/^	CCX_DTVCC_C0_CR = 	0x0d,$/;"	e	enum:CCX_DTVCC_COMMANDS_C0_CODES
CCX_DTVCC_C0_ETX	ccx_decoders_708.h	/^	CCX_DTVCC_C0_ETX = 	0x03,$/;"	e	enum:CCX_DTVCC_COMMANDS_C0_CODES
CCX_DTVCC_C0_EXT1	ccx_decoders_708.h	/^	CCX_DTVCC_C0_EXT1 = 0x10,$/;"	e	enum:CCX_DTVCC_COMMANDS_C0_CODES
CCX_DTVCC_C0_FF	ccx_decoders_708.h	/^	CCX_DTVCC_C0_FF = 	0x0c,$/;"	e	enum:CCX_DTVCC_COMMANDS_C0_CODES
CCX_DTVCC_C0_HCR	ccx_decoders_708.h	/^	CCX_DTVCC_C0_HCR = 	0x0e,$/;"	e	enum:CCX_DTVCC_COMMANDS_C0_CODES
CCX_DTVCC_C0_NUL	ccx_decoders_708.h	/^	CCX_DTVCC_C0_NUL = 	0x00,$/;"	e	enum:CCX_DTVCC_COMMANDS_C0_CODES
CCX_DTVCC_C0_P16	ccx_decoders_708.h	/^	CCX_DTVCC_C0_P16 = 	0x18$/;"	e	enum:CCX_DTVCC_COMMANDS_C0_CODES
CCX_DTVCC_C1_CLW	ccx_decoders_708.h	/^	CCX_DTVCC_C1_CLW = 0x88,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_CW0	ccx_decoders_708.h	/^	CCX_DTVCC_C1_CW0 = 0x80,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_CW1	ccx_decoders_708.h	/^	CCX_DTVCC_C1_CW1 = 0x81,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_CW2	ccx_decoders_708.h	/^	CCX_DTVCC_C1_CW2 = 0x82,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_CW3	ccx_decoders_708.h	/^	CCX_DTVCC_C1_CW3 = 0x83,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_CW4	ccx_decoders_708.h	/^	CCX_DTVCC_C1_CW4 = 0x84,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_CW5	ccx_decoders_708.h	/^	CCX_DTVCC_C1_CW5 = 0x85,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_CW6	ccx_decoders_708.h	/^	CCX_DTVCC_C1_CW6 = 0x86,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_CW7	ccx_decoders_708.h	/^	CCX_DTVCC_C1_CW7 = 0x87,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_DF0	ccx_decoders_708.h	/^	CCX_DTVCC_C1_DF0 = 0x98,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_DF1	ccx_decoders_708.h	/^	CCX_DTVCC_C1_DF1 = 0x99,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_DF2	ccx_decoders_708.h	/^	CCX_DTVCC_C1_DF2 = 0x9A,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_DF3	ccx_decoders_708.h	/^	CCX_DTVCC_C1_DF3 = 0x9B,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_DF4	ccx_decoders_708.h	/^	CCX_DTVCC_C1_DF4 = 0x9C,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_DF5	ccx_decoders_708.h	/^	CCX_DTVCC_C1_DF5 = 0x9D,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_DF6	ccx_decoders_708.h	/^	CCX_DTVCC_C1_DF6 = 0x9E,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_DF7	ccx_decoders_708.h	/^	CCX_DTVCC_C1_DF7 = 0x9F$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_DLC	ccx_decoders_708.h	/^	CCX_DTVCC_C1_DLC = 0x8E,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_DLW	ccx_decoders_708.h	/^	CCX_DTVCC_C1_DLW = 0x8C,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_DLY	ccx_decoders_708.h	/^	CCX_DTVCC_C1_DLY = 0x8D,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_DSW	ccx_decoders_708.h	/^	CCX_DTVCC_C1_DSW = 0x89,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_HDW	ccx_decoders_708.h	/^	CCX_DTVCC_C1_HDW = 0x8A,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_RST	ccx_decoders_708.h	/^	CCX_DTVCC_C1_RST = 0x8F,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_RSV93	ccx_decoders_708.h	/^	CCX_DTVCC_C1_RSV93 = 0x93,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_RSV94	ccx_decoders_708.h	/^	CCX_DTVCC_C1_RSV94 = 0x94,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_RSV95	ccx_decoders_708.h	/^	CCX_DTVCC_C1_RSV95 = 0x95,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_RSV96	ccx_decoders_708.h	/^	CCX_DTVCC_C1_RSV96 = 0x96,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_SPA	ccx_decoders_708.h	/^	CCX_DTVCC_C1_SPA = 0x90,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_SPC	ccx_decoders_708.h	/^	CCX_DTVCC_C1_SPC = 0x91,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_SPL	ccx_decoders_708.h	/^	CCX_DTVCC_C1_SPL = 0x92,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_SWA	ccx_decoders_708.h	/^	CCX_DTVCC_C1_SWA = 0x97,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_C1_TGW	ccx_decoders_708.h	/^	CCX_DTVCC_C1_TGW = 0x8B,$/;"	e	enum:CCX_DTVCC_COMMANDS_C1_CODES
CCX_DTVCC_COMMANDS_C0_CODES	ccx_decoders_708.h	/^enum CCX_DTVCC_COMMANDS_C0_CODES$/;"	g
CCX_DTVCC_COMMANDS_C1_CODES	ccx_decoders_708.h	/^enum CCX_DTVCC_COMMANDS_C1_CODES$/;"	g
CCX_DTVCC_FILENAME_TEMPLATE	ccx_decoders_708.h	24;"	d
CCX_DTVCC_MAX_COLUMNS	ccx_decoders_708.h	17;"	d
CCX_DTVCC_MAX_PACKET_LENGTH	ccx_decoders_708.h	9;"	d
CCX_DTVCC_MAX_ROWS	ccx_decoders_708.h	12;"	d
CCX_DTVCC_MAX_SERVICES	ccx_decoders_708.h	10;"	d
CCX_DTVCC_MAX_WINDOWS	ccx_decoders_708.h	22;"	d
CCX_DTVCC_NO_LAST_SEQUENCE	ccx_decoders_708.h	26;"	d
CCX_DTVCC_PEN_EDGE_DEPRESSED	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_EDGE_DEPRESSED			= 2,$/;"	e	enum:ccx_dtvcc_pen_edge
CCX_DTVCC_PEN_EDGE_LEFT_DROP_SHADOW	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_EDGE_LEFT_DROP_SHADOW		= 4,$/;"	e	enum:ccx_dtvcc_pen_edge
CCX_DTVCC_PEN_EDGE_NONE	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_EDGE_NONE					= 0,$/;"	e	enum:ccx_dtvcc_pen_edge
CCX_DTVCC_PEN_EDGE_RAISED	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_EDGE_RAISED				= 1,$/;"	e	enum:ccx_dtvcc_pen_edge
CCX_DTVCC_PEN_EDGE_RIGHT_DROP_SHADOW	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_EDGE_RIGHT_DROP_SHADOW	= 5$/;"	e	enum:ccx_dtvcc_pen_edge
CCX_DTVCC_PEN_EDGE_UNIFORM	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_EDGE_UNIFORM				= 3,$/;"	e	enum:ccx_dtvcc_pen_edge
CCX_DTVCC_PEN_FONT_STYLE_CASUAL_FONT_TYPE	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_FONT_STYLE_CASUAL_FONT_TYPE						= 5,$/;"	e	enum:ccx_dtvcc_pen_font_style
CCX_DTVCC_PEN_FONT_STYLE_CURSIVE_FONT_TYPE	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_FONT_STYLE_CURSIVE_FONT_TYPE						= 6,$/;"	e	enum:ccx_dtvcc_pen_font_style
CCX_DTVCC_PEN_FONT_STYLE_DEFAULT_OR_UNDEFINED	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_FONT_STYLE_DEFAULT_OR_UNDEFINED					= 0,$/;"	e	enum:ccx_dtvcc_pen_font_style
CCX_DTVCC_PEN_FONT_STYLE_MONOSPACED_WITHOUT_SERIFS	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_FONT_STYLE_MONOSPACED_WITHOUT_SERIFS				= 3,$/;"	e	enum:ccx_dtvcc_pen_font_style
CCX_DTVCC_PEN_FONT_STYLE_MONOSPACED_WITH_SERIFS	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_FONT_STYLE_MONOSPACED_WITH_SERIFS					= 1,$/;"	e	enum:ccx_dtvcc_pen_font_style
CCX_DTVCC_PEN_FONT_STYLE_PROPORTIONALLY_SPACED_WITHOUT_SERIFS	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_FONT_STYLE_PROPORTIONALLY_SPACED_WITHOUT_SERIFS	= 4,$/;"	e	enum:ccx_dtvcc_pen_font_style
CCX_DTVCC_PEN_FONT_STYLE_PROPORTIONALLY_SPACED_WITH_SERIFS	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_FONT_STYLE_PROPORTIONALLY_SPACED_WITH_SERIFS		= 2,$/;"	e	enum:ccx_dtvcc_pen_font_style
CCX_DTVCC_PEN_FONT_STYLE_SMALL_CAPITALS	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_FONT_STYLE_SMALL_CAPITALS							= 7$/;"	e	enum:ccx_dtvcc_pen_font_style
CCX_DTVCC_PEN_OFFSET_NORMAL	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_OFFSET_NORMAL			= 1,$/;"	e	enum:ccx_dtvcc_pen_offset
CCX_DTVCC_PEN_OFFSET_SUBSCRIPT	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_OFFSET_SUBSCRIPT		= 0,$/;"	e	enum:ccx_dtvcc_pen_offset
CCX_DTVCC_PEN_OFFSET_SUPERSCRIPT	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_OFFSET_SUPERSCRIPT	= 2$/;"	e	enum:ccx_dtvcc_pen_offset
CCX_DTVCC_PEN_SIZE_LARGE	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_SIZE_LARGE	= 2$/;"	e	enum:ccx_dtvcc_pen_size
CCX_DTVCC_PEN_SIZE_SMALL	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_SIZE_SMALL 	= 0,$/;"	e	enum:ccx_dtvcc_pen_size
CCX_DTVCC_PEN_SIZE_STANDART	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_SIZE_STANDART = 1,$/;"	e	enum:ccx_dtvcc_pen_size
CCX_DTVCC_PEN_TEXT_TAG_AUDIBLE_TRANSLATION	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_AUDIBLE_TRANSLATION			= 5,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_DIALOG	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_DIALOG						= 0,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_ELECTRONIC_VOICE	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_ELECTRONIC_VOICE				= 2,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_EXPLETIVE	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_EXPLETIVE					= 11,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_FOREIGN_LANGUAGE	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_FOREIGN_LANGUAGE				= 3,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_MUSICAL_SCORE_DESCRIPTION	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_MUSICAL_SCORE_DESCRIPTION	= 10,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_NOT_TO_BE_DISPLAYED	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_NOT_TO_BE_DISPLAYED			= 15$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_SONG_LYRICS	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_SONG_LYRICS					= 8,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_SOUND_EFFECT_DESCRIPTION	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_SOUND_EFFECT_DESCRIPTION		= 9,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_SOURCE_OR_SPEAKER_ID	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_SOURCE_OR_SPEAKER_ID			= 1,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_SUBTITLE_TRANSLATION	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_SUBTITLE_TRANSLATION			= 6,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_UNDEFINED_12	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_UNDEFINED_12					= 12,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_UNDEFINED_13	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_UNDEFINED_13					= 13,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_UNDEFINED_14	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_UNDEFINED_14					= 14,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_VOICEOVER	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_VOICEOVER					= 4,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_PEN_TEXT_TAG_VOICE_QUALITY_DESCRIPTION	ccx_decoders_708.h	/^	CCX_DTVCC_PEN_TEXT_TAG_VOICE_QUALITY_DESCRIPTION	= 7,$/;"	e	enum:ccx_dtvcc_pen_text_tag
CCX_DTVCC_SCREENGRID_COLUMNS	ccx_decoders_708.h	20;"	d
CCX_DTVCC_SCREENGRID_ROWS	ccx_decoders_708.h	19;"	d
CCX_DTVCC_SYM	ccx_decoders_708.h	259;"	d
CCX_DTVCC_SYM_16_FIRST	ccx_decoders_708.h	260;"	d
CCX_DTVCC_SYM_16_SECOND	ccx_decoders_708.h	261;"	d
CCX_DTVCC_SYM_IS_16	ccx_decoders_708.h	258;"	d
CCX_DTVCC_SYM_IS_EMPTY	ccx_decoders_708.h	262;"	d
CCX_DTVCC_SYM_IS_SET	ccx_decoders_708.h	263;"	d
CCX_DTVCC_SYM_SET	ccx_decoders_708.h	256;"	d
CCX_DTVCC_SYM_SET_16	ccx_decoders_708.h	257;"	d
CCX_DTVCC_S_COMMANDS_C1	ccx_decoders_708.h	/^struct CCX_DTVCC_S_COMMANDS_C1$/;"	s
CCX_DTVCC_WINDOW_BORDER_DEPRESSED	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_BORDER_DEPRESSED		= 2,$/;"	e	enum:ccx_dtvcc_window_border
CCX_DTVCC_WINDOW_BORDER_NONE	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_BORDER_NONE			= 0,$/;"	e	enum:ccx_dtvcc_window_border
CCX_DTVCC_WINDOW_BORDER_RAISED	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_BORDER_RAISED			= 1,$/;"	e	enum:ccx_dtvcc_window_border
CCX_DTVCC_WINDOW_BORDER_SHADOW_LEFT	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_BORDER_SHADOW_LEFT		= 4,$/;"	e	enum:ccx_dtvcc_window_border
CCX_DTVCC_WINDOW_BORDER_SHADOW_RIGHT	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_BORDER_SHADOW_RIGHT	= 5$/;"	e	enum:ccx_dtvcc_window_border
CCX_DTVCC_WINDOW_BORDER_UNIFORM	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_BORDER_UNIFORM			= 3,$/;"	e	enum:ccx_dtvcc_window_border
CCX_DTVCC_WINDOW_ED_BOTTOM_TOP	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_ED_BOTTOM_TOP = 3$/;"	e	enum:ccx_dtvcc_window_ed
CCX_DTVCC_WINDOW_ED_LEFT_RIGHT	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_ED_LEFT_RIGHT = 0,$/;"	e	enum:ccx_dtvcc_window_ed
CCX_DTVCC_WINDOW_ED_RIGHT_LEFT	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_ED_RIGHT_LEFT = 1,$/;"	e	enum:ccx_dtvcc_window_ed
CCX_DTVCC_WINDOW_ED_TOP_BOTTOM	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_ED_TOP_BOTTOM = 2,$/;"	e	enum:ccx_dtvcc_window_ed
CCX_DTVCC_WINDOW_FO_FLASH	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_FO_FLASH		= 1,$/;"	e	enum:ccx_dtvcc_window_fo
CCX_DTVCC_WINDOW_FO_SOLID	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_FO_SOLID		= 0,$/;"	e	enum:ccx_dtvcc_window_fo
CCX_DTVCC_WINDOW_FO_TRANSLUCENT	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_FO_TRANSLUCENT	= 2,$/;"	e	enum:ccx_dtvcc_window_fo
CCX_DTVCC_WINDOW_FO_TRANSPARENT	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_FO_TRANSPARENT = 3$/;"	e	enum:ccx_dtvcc_window_fo
CCX_DTVCC_WINDOW_JUSTIFY_CENTER	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_JUSTIFY_CENTER	= 2,$/;"	e	enum:ccx_dtvcc_window_justify
CCX_DTVCC_WINDOW_JUSTIFY_FULL	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_JUSTIFY_FULL	= 3$/;"	e	enum:ccx_dtvcc_window_justify
CCX_DTVCC_WINDOW_JUSTIFY_LEFT	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_JUSTIFY_LEFT	= 0,$/;"	e	enum:ccx_dtvcc_window_justify
CCX_DTVCC_WINDOW_JUSTIFY_RIGHT	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_JUSTIFY_RIGHT	= 1,$/;"	e	enum:ccx_dtvcc_window_justify
CCX_DTVCC_WINDOW_PD_BOTTOM_TOP	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_PD_BOTTOM_TOP = 3$/;"	e	enum:ccx_dtvcc_window_pd
CCX_DTVCC_WINDOW_PD_LEFT_RIGHT	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_PD_LEFT_RIGHT = 0, \/\/left -> right$/;"	e	enum:ccx_dtvcc_window_pd
CCX_DTVCC_WINDOW_PD_RIGHT_LEFT	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_PD_RIGHT_LEFT = 1,$/;"	e	enum:ccx_dtvcc_window_pd
CCX_DTVCC_WINDOW_PD_TOP_BOTTOM	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_PD_TOP_BOTTOM = 2,$/;"	e	enum:ccx_dtvcc_window_pd
CCX_DTVCC_WINDOW_SDE_FADE	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_SDE_FADE = 1,$/;"	e	enum:ccx_dtvcc_window_sde
CCX_DTVCC_WINDOW_SDE_SNAP	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_SDE_SNAP = 0,$/;"	e	enum:ccx_dtvcc_window_sde
CCX_DTVCC_WINDOW_SDE_WIPE	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_SDE_WIPE = 2$/;"	e	enum:ccx_dtvcc_window_sde
CCX_DTVCC_WINDOW_SD_BOTTOM_TOP	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_SD_BOTTOM_TOP = 3$/;"	e	enum:ccx_dtvcc_window_sd
CCX_DTVCC_WINDOW_SD_LEFT_RIGHT	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_SD_LEFT_RIGHT = 0,$/;"	e	enum:ccx_dtvcc_window_sd
CCX_DTVCC_WINDOW_SD_RIGHT_LEFT	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_SD_RIGHT_LEFT = 1,$/;"	e	enum:ccx_dtvcc_window_sd
CCX_DTVCC_WINDOW_SD_TOP_BOTTOM	ccx_decoders_708.h	/^	CCX_DTVCC_WINDOW_SD_TOP_BOTTOM = 2,$/;"	e	enum:ccx_dtvcc_window_sd
CCX_DVB_SUBTITLE	ccx_common_constants.h	/^	CCX_DVB_SUBTITLE = 7,$/;"	e	enum:ccx_bufferdata_type
CCX_EAGAIN	ccx_common_common.h	35;"	d
CCX_EINVAL	ccx_common_common.h	37;"	d
CCX_ENCODERS_STRUCTS_H	ccx_encoders_structs.h	2;"	d
CCX_ENC_ASCII	ccx_common_constants.h	/^	CCX_ENC_ASCII = 3$/;"	e	enum:ccx_encoding_type
CCX_ENC_LATIN_1	ccx_common_constants.h	/^	CCX_ENC_LATIN_1 = 1,$/;"	e	enum:ccx_encoding_type
CCX_ENC_UNICODE	ccx_common_constants.h	/^	CCX_ENC_UNICODE = 0,$/;"	e	enum:ccx_encoding_type
CCX_ENC_UTF_8	ccx_common_constants.h	/^	CCX_ENC_UTF_8 = 2,$/;"	e	enum:ccx_encoding_type
CCX_ENOMEM	ccx_common_common.h	39;"	d
CCX_ENOSUPP	ccx_common_common.h	38;"	d
CCX_EOF	ccx_common_common.h	36;"	d
CCX_FALSE	ccx_common_common.h	33;"	d
CCX_FRAME_TYPE_B_FRAME	ccx_common_constants.h	/^	CCX_FRAME_TYPE_B_FRAME = 3,$/;"	e	enum:ccx_frame_type
CCX_FRAME_TYPE_D_FRAME	ccx_common_constants.h	/^	CCX_FRAME_TYPE_D_FRAME = 4$/;"	e	enum:ccx_frame_type
CCX_FRAME_TYPE_I_FRAME	ccx_common_constants.h	/^	CCX_FRAME_TYPE_I_FRAME = 1,$/;"	e	enum:ccx_frame_type
CCX_FRAME_TYPE_P_FRAME	ccx_common_constants.h	/^	CCX_FRAME_TYPE_P_FRAME = 2,$/;"	e	enum:ccx_frame_type
CCX_FRAME_TYPE_RESET_OR_UNKNOWN	ccx_common_constants.h	/^	CCX_FRAME_TYPE_RESET_OR_UNKNOWN = 0,$/;"	e	enum:ccx_frame_type
CCX_GXF	ccx_gxf.h	2;"	d
CCX_GXF_ENABLE_AD_VBI	ccx_gxf.c	32;"	d	file:
CCX_H264	ccx_common_constants.h	/^	CCX_H264 = 3,$/;"	e	enum:ccx_bufferdata_type
CCX_HAUPPAGE	ccx_common_constants.h	/^	CCX_HAUPPAGE = 4,$/;"	e	enum:ccx_bufferdata_type
CCX_ISDB_BLACK	ccx_decoders_isdb.c	/^	CCX_ISDB_BLACK,$/;"	e	enum:color	file:
CCX_ISDB_SUBTITLE	ccx_common_constants.h	/^	CCX_ISDB_SUBTITLE = 8,$/;"	e	enum:ccx_bufferdata_type
CCX_ISDB_TRANSPARENT	ccx_decoders_isdb.c	/^	CCX_ISDB_TRANSPARENT,$/;"	e	enum:color	file:
CCX_MESSAGES_QUIET	ccx_common_constants.h	/^	CCX_MESSAGES_QUIET = 0,$/;"	e	enum:__anon19
CCX_MESSAGES_STDERR	ccx_common_constants.h	/^	CCX_MESSAGES_STDERR =2$/;"	e	enum:__anon19
CCX_MESSAGES_STDOUT	ccx_common_constants.h	/^	CCX_MESSAGES_STDOUT =1,$/;"	e	enum:__anon19
CCX_MPC_B_FRAME	ccx_gxf.c	/^	CCX_MPC_B_FRAME = 3,$/;"	e	enum:mpeg_picture_coding	file:
CCX_MPC_I_FRAME	ccx_gxf.c	/^	CCX_MPC_I_FRAME = 1,$/;"	e	enum:mpeg_picture_coding	file:
CCX_MPC_NONE	ccx_gxf.c	/^	CCX_MPC_NONE    = 0,$/;"	e	enum:mpeg_picture_coding	file:
CCX_MPC_P_FRAME	ccx_gxf.c	/^	CCX_MPC_P_FRAME = 2,$/;"	e	enum:mpeg_picture_coding	file:
CCX_MPEG_DESC_DATA_COMP	ccx_common_constants.h	/^	CCX_MPEG_DESC_DATA_COMP = 0xfd,$/;"	e	enum:ccx_mpeg_descriptor
CCX_MPEG_DSC_CAPTION_SERVICE	ccx_common_constants.h	/^	CCX_MPEG_DSC_CAPTION_SERVICE = 0x86,$/;"	e	enum:ccx_mpeg_descriptor
CCX_MPEG_DSC_DATA_STREAM_ALIGNMENT	ccx_common_constants.h	/^	CCX_MPEG_DSC_DATA_STREAM_ALIGNMENT = 0x06,$/;"	e	enum:ccx_mpeg_descriptor
CCX_MPEG_DSC_DVB_SUBTITLE	ccx_common_constants.h	/^	CCX_MPEG_DSC_DVB_SUBTITLE = 0x59,$/;"	e	enum:ccx_mpeg_descriptor
CCX_MPEG_DSC_ISO639_LANGUAGE	ccx_common_constants.h	/^	CCX_MPEG_DSC_ISO639_LANGUAGE = 0x0A,$/;"	e	enum:ccx_mpeg_descriptor
CCX_MPEG_DSC_REGISTRATION	ccx_common_constants.h	/^	CCX_MPEG_DSC_REGISTRATION = 0x05,$/;"	e	enum:ccx_mpeg_descriptor
CCX_MPEG_DSC_TELETEXT_DESCRIPTOR	ccx_common_constants.h	/^	CCX_MPEG_DSC_TELETEXT_DESCRIPTOR = 0x56,$/;"	e	enum:ccx_mpeg_descriptor
CCX_MPEG_DSC_VBI_DATA_DESCRIPTOR	ccx_common_constants.h	/^	CCX_MPEG_DSC_VBI_DATA_DESCRIPTOR = 0x45,$/;"	e	enum:ccx_mpeg_descriptor
CCX_MPEG_DSC_VBI_TELETEXT_DESCRIPTOR	ccx_common_constants.h	/^	CCX_MPEG_DSC_VBI_TELETEXT_DESCRIPTOR = 0x46,$/;"	e	enum:ccx_mpeg_descriptor
CCX_MPS_BOTTOM_FIELD	ccx_gxf.c	/^	CCX_MPS_BOTTOM_FIELD = 2,$/;"	e	enum:mpeg_picture_struct	file:
CCX_MPS_FRAME	ccx_gxf.c	/^	CCX_MPS_FRAME        = 3,$/;"	e	enum:mpeg_picture_struct	file:
CCX_MPS_NONE	ccx_gxf.c	/^	CCX_MPS_NONE         = 0,$/;"	e	enum:mpeg_picture_struct	file:
CCX_MPS_TOP_FIELD	ccx_gxf.c	/^	CCX_MPS_TOP_FIELD    = 1,$/;"	e	enum:mpeg_picture_struct	file:
CCX_NAL_TYPE_ACCESS_UNIT_DELIMITER_9	ccx_common_constants.h	/^	CCX_NAL_TYPE_ACCESS_UNIT_DELIMITER_9 = 9,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_CODED_SLICE_AUXILIARY_PICTURE	ccx_common_constants.h	/^	CCX_NAL_TYPE_CODED_SLICE_AUXILIARY_PICTURE = 19,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_CODED_SLICE_EXTENSION	ccx_common_constants.h	/^	CCX_NAL_TYPE_CODED_SLICE_EXTENSION = 20,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_CODED_SLICE_IDR_PICTURE	ccx_common_constants.h	/^	CCX_NAL_TYPE_CODED_SLICE_IDR_PICTURE = 5,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_CODED_SLICE_NON_IDR_PICTURE_1	ccx_common_constants.h	/^	CCX_NAL_TYPE_CODED_SLICE_NON_IDR_PICTURE_1 = 1,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_CODED_SLICE_PARTITION_A	ccx_common_constants.h	/^	CCX_NAL_TYPE_CODED_SLICE_PARTITION_A = 2,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_CODED_SLICE_PARTITION_B	ccx_common_constants.h	/^	CCX_NAL_TYPE_CODED_SLICE_PARTITION_B = 3,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_CODED_SLICE_PARTITION_C	ccx_common_constants.h	/^	CCX_NAL_TYPE_CODED_SLICE_PARTITION_C = 4,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_END_OF_SEQUENCE	ccx_common_constants.h	/^	CCX_NAL_TYPE_END_OF_SEQUENCE = 10,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_END_OF_STREAM	ccx_common_constants.h	/^	CCX_NAL_TYPE_END_OF_STREAM = 11,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_FILLER_DATA	ccx_common_constants.h	/^	CCX_NAL_TYPE_FILLER_DATA = 12,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_PICTURE_PARAMETER_SET	ccx_common_constants.h	/^	CCX_NAL_TYPE_PICTURE_PARAMETER_SET = 8,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_PREFIX_NAL_UNIT	ccx_common_constants.h	/^	CCX_NAL_TYPE_PREFIX_NAL_UNIT = 14,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_RESERVED_16	ccx_common_constants.h	/^	CCX_NAL_TYPE_RESERVED_16 = 16,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_RESERVED_17	ccx_common_constants.h	/^	CCX_NAL_TYPE_RESERVED_17 = 18,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_RESERVED_18	ccx_common_constants.h	/^	CCX_NAL_TYPE_RESERVED_18 = 18,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_RESERVED_21	ccx_common_constants.h	/^	CCX_NAL_TYPE_RESERVED_21 = 21,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_RESERVED_22	ccx_common_constants.h	/^	CCX_NAL_TYPE_RESERVED_22 = 22,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_RESERVED_23	ccx_common_constants.h	/^	CCX_NAL_TYPE_RESERVED_23 = 23,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_SEI	ccx_common_constants.h	/^	CCX_NAL_TYPE_SEI = 6,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_SEQUENCE_PARAMETER_SET_7	ccx_common_constants.h	/^	CCX_NAL_TYPE_SEQUENCE_PARAMETER_SET_7 = 7,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_SEQUENCE_PARAMETER_SET_EXTENSION	ccx_common_constants.h	/^	CCX_NAL_TYPE_SEQUENCE_PARAMETER_SET_EXTENSION = 13,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_SUBSET_SEQUENCE_PARAMETER_SET	ccx_common_constants.h	/^	CCX_NAL_TYPE_SUBSET_SEQUENCE_PARAMETER_SET = 15,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_UNSPECIFIED_0	ccx_common_constants.h	/^	CCX_NAL_TYPE_UNSPECIFIED_0 = 0,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_UNSPECIFIED_24	ccx_common_constants.h	/^	CCX_NAL_TYPE_UNSPECIFIED_24 = 24,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_UNSPECIFIED_25	ccx_common_constants.h	/^	CCX_NAL_TYPE_UNSPECIFIED_25 = 25,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_UNSPECIFIED_26	ccx_common_constants.h	/^	CCX_NAL_TYPE_UNSPECIFIED_26 = 26,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_UNSPECIFIED_27	ccx_common_constants.h	/^	CCX_NAL_TYPE_UNSPECIFIED_27 = 27,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_UNSPECIFIED_28	ccx_common_constants.h	/^	CCX_NAL_TYPE_UNSPECIFIED_28 = 28,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_UNSPECIFIED_29	ccx_common_constants.h	/^	CCX_NAL_TYPE_UNSPECIFIED_29 = 29,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_UNSPECIFIED_30	ccx_common_constants.h	/^	CCX_NAL_TYPE_UNSPECIFIED_30 = 30,$/;"	e	enum:ccx_avc_nal_types
CCX_NAL_TYPE_UNSPECIFIED_31	ccx_common_constants.h	/^	CCX_NAL_TYPE_UNSPECIFIED_31 = 31$/;"	e	enum:ccx_avc_nal_types
CCX_NOPTS	utility.h	15;"	d
CCX_OF_DVDRAW	ccx_common_constants.h	/^	CCX_OF_DVDRAW = 8, \/\/ See -d at http:\/\/www.geocities.com\/mcpoodle43\/SCC_TOOLS\/DOCS\/SCC_TOOLS.HTML#CCExtract$/;"	e	enum:ccx_output_format
CCX_OF_G608	ccx_common_constants.h	/^	CCX_OF_G608 = 11,$/;"	e	enum:ccx_output_format
CCX_OF_NULL	ccx_common_constants.h	/^	CCX_OF_NULL = 5,$/;"	e	enum:ccx_output_format
CCX_OF_RAW	ccx_common_constants.h	/^	CCX_OF_RAW	= 0,$/;"	e	enum:ccx_output_format
CCX_OF_RCWT	ccx_common_constants.h	/^	CCX_OF_RCWT = 4,$/;"	e	enum:ccx_output_format
CCX_OF_SAMI	ccx_common_constants.h	/^	CCX_OF_SAMI = 2,$/;"	e	enum:ccx_output_format
CCX_OF_SIMPLE_XML	ccx_common_constants.h	/^	CCX_OF_SIMPLE_XML = 10,$/;"	e	enum:ccx_output_format
CCX_OF_SMPTETT	ccx_common_constants.h	/^	CCX_OF_SMPTETT = 6,$/;"	e	enum:ccx_output_format
CCX_OF_SPUPNG	ccx_common_constants.h	/^	CCX_OF_SPUPNG = 7,$/;"	e	enum:ccx_output_format
CCX_OF_SRT	ccx_common_constants.h	/^	CCX_OF_SRT	= 1,$/;"	e	enum:ccx_output_format
CCX_OF_TRANSCRIPT	ccx_common_constants.h	/^	CCX_OF_TRANSCRIPT = 3,$/;"	e	enum:ccx_output_format
CCX_OF_WEBVTT	ccx_common_constants.h	/^	CCX_OF_WEBVTT = 9,$/;"	e	enum:ccx_output_format
CCX_OK	ccx_common_common.h	32;"	d
CCX_PES	ccx_common_constants.h	/^	CCX_PES = 1,$/;"	e	enum:ccx_bufferdata_type
CCX_PLATFORM_H	ccx_common_platform.h	2;"	d
CCX_PRIVATE_MPEG2_CC	ccx_common_constants.h	/^	CCX_PRIVATE_MPEG2_CC = 6,$/;"	e	enum:ccx_bufferdata_type
CCX_RAW	ccx_common_constants.h	/^	CCX_RAW = 2,$/;"	e	enum:ccx_bufferdata_type
CCX_RAW_TYPE	ccx_common_constants.h	/^	CCX_RAW_TYPE = 9,$/;"	e	enum:ccx_bufferdata_type
CCX_SM_ASF	ccx_common_constants.h	/^	CCX_SM_ASF=3,$/;"	e	enum:ccx_stream_mode_enum
CCX_SM_AUTODETECT	ccx_common_constants.h	/^	CCX_SM_AUTODETECT = 16$/;"	e	enum:ccx_stream_mode_enum
CCX_SM_ELEMENTARY_OR_NOT_FOUND	ccx_common_constants.h	/^	CCX_SM_ELEMENTARY_OR_NOT_FOUND=0,$/;"	e	enum:ccx_stream_mode_enum
CCX_SM_FFMPEG	ccx_common_constants.h	/^	CCX_SM_FFMPEG = 10,$/;"	e	enum:ccx_stream_mode_enum
CCX_SM_GXF	ccx_common_constants.h	/^	CCX_SM_GXF = 11,$/;"	e	enum:ccx_stream_mode_enum
CCX_SM_HEX_DUMP	ccx_common_constants.h	/^	CCX_SM_HEX_DUMP = 8, \/\/ Hexadecimal dump generated by wtvccdump$/;"	e	enum:ccx_stream_mode_enum
CCX_SM_MCPOODLESRAW	ccx_common_constants.h	/^	CCX_SM_MCPOODLESRAW = 4,$/;"	e	enum:ccx_stream_mode_enum
CCX_SM_MP4	ccx_common_constants.h	/^	CCX_SM_MP4 = 7, \/\/ MP4, ISO-$/;"	e	enum:ccx_stream_mode_enum
CCX_SM_MYTH	ccx_common_constants.h	/^	CCX_SM_MYTH = 6, \/\/ Use the myth loop$/;"	e	enum:ccx_stream_mode_enum
CCX_SM_PROGRAM	ccx_common_constants.h	/^	CCX_SM_PROGRAM=2,$/;"	e	enum:ccx_stream_mode_enum
CCX_SM_RCWT	ccx_common_constants.h	/^	CCX_SM_RCWT = 5, \/\/ Raw Captions With Time, not used yet.$/;"	e	enum:ccx_stream_mode_enum
CCX_SM_TRANSPORT	ccx_common_constants.h	/^	CCX_SM_TRANSPORT=1,$/;"	e	enum:ccx_stream_mode_enum
CCX_SM_WTV	ccx_common_constants.h	/^	CCX_SM_WTV = 9,$/;"	e	enum:ccx_stream_mode_enum
CCX_STREAM_TYPE_AUDIO_AAC	ccx_common_constants.h	/^	CCX_STREAM_TYPE_AUDIO_AAC   = 0x0f,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_AUDIO_AC3	ccx_common_constants.h	/^	CCX_STREAM_TYPE_AUDIO_AC3   = 0x81,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_AUDIO_DTS	ccx_common_constants.h	/^	CCX_STREAM_TYPE_AUDIO_DTS   = 0x8a,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_AUDIO_HDMV_DTS	ccx_common_constants.h	/^	CCX_STREAM_TYPE_AUDIO_HDMV_DTS = 0x82,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_AUDIO_MPEG1	ccx_common_constants.h	/^	CCX_STREAM_TYPE_AUDIO_MPEG1 = 0x03,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_AUDIO_MPEG2	ccx_common_constants.h	/^	CCX_STREAM_TYPE_AUDIO_MPEG2 = 0x04,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_ISO_IEC_13818_6_TYPE_A	ccx_common_constants.h	/^	CCX_STREAM_TYPE_ISO_IEC_13818_6_TYPE_A = 0x0A,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_ISO_IEC_13818_6_TYPE_B	ccx_common_constants.h	/^	CCX_STREAM_TYPE_ISO_IEC_13818_6_TYPE_B = 0x0B,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_ISO_IEC_13818_6_TYPE_C	ccx_common_constants.h	/^	CCX_STREAM_TYPE_ISO_IEC_13818_6_TYPE_C = 0x0C,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_ISO_IEC_13818_6_TYPE_D	ccx_common_constants.h	/^	CCX_STREAM_TYPE_ISO_IEC_13818_6_TYPE_D = 0x0D,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_ITU_T_H222_1	ccx_common_constants.h	/^	CCX_STREAM_TYPE_ITU_T_H222_1 = 0x09,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_MHEG_PACKETS	ccx_common_constants.h	/^	CCX_STREAM_TYPE_MHEG_PACKETS = 0x07,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_MPEG2_ANNEX_A_DSM_CC	ccx_common_constants.h	/^	CCX_STREAM_TYPE_MPEG2_ANNEX_A_DSM_CC = 0x08,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_PRIVATE_MPEG2	ccx_common_constants.h	/^	CCX_STREAM_TYPE_PRIVATE_MPEG2 = 0x06,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_PRIVATE_TABLE_MPEG2	ccx_common_constants.h	/^	CCX_STREAM_TYPE_PRIVATE_TABLE_MPEG2 = 0x05,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_PRIVATE_USER_MPEG2	ccx_common_constants.h	/^	CCX_STREAM_TYPE_PRIVATE_USER_MPEG2=0x80,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_UNKNOWNSTREAM	ccx_common_constants.h	/^	CCX_STREAM_TYPE_UNKNOWNSTREAM = 0,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_VIDEO_H264	ccx_common_constants.h	/^	CCX_STREAM_TYPE_VIDEO_H264  = 0x1b,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_VIDEO_MPEG1	ccx_common_constants.h	/^	CCX_STREAM_TYPE_VIDEO_MPEG1 = 0x01,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_VIDEO_MPEG2	ccx_common_constants.h	/^	CCX_STREAM_TYPE_VIDEO_MPEG2 = 0x02,$/;"	e	enum:ccx_stream_type
CCX_STREAM_TYPE_VIDEO_MPEG4	ccx_common_constants.h	/^	CCX_STREAM_TYPE_VIDEO_MPEG4 = 0x10,$/;"	e	enum:ccx_stream_type
CCX_TELETEXT	ccx_common_constants.h	/^	CCX_TELETEXT = 5,$/;"	e	enum:ccx_bufferdata_type
CCX_TRUE	ccx_common_common.h	34;"	d
CCX_TXT_AUTO_NOT_YET_FOUND	ccx_common_constants.h	289;"	d
CCX_TXT_FORBIDDEN	ccx_common_constants.h	288;"	d
CCX_TXT_IN_USE	ccx_common_constants.h	290;"	d
CCX_UNKNOWN	ccx_common_constants.h	/^	CCX_UNKNOWN = 0,$/;"	e	enum:ccx_bufferdata_type
CC_608	ccx_common_structs.h	/^	CC_608,$/;"	e	enum:subtype
CC_708	ccx_common_structs.h	/^	CC_708,$/;"	e	enum:subtype
CC_BITMAP	ccx_common_structs.h	/^	CC_BITMAP,$/;"	e	enum:subtype
CC_DESC	networking.c	18;"	d	file:
CC_RAW	ccx_common_structs.h	/^	CC_RAW,$/;"	e	enum:subtype
CC_TEXT	ccx_common_structs.h	/^	CC_TEXT,$/;"	e	enum:subtype
CC_UTILITY_H	utility.h	2;"	d
CDP_SECTION_DATA	ccx_common_constants.h	/^	CDP_SECTION_DATA = 0x72,$/;"	e	enum:cdp_section_type
CDP_SECTION_FOOTER	ccx_common_constants.h	/^	CDP_SECTION_FOOTER = 0x74$/;"	e	enum:cdp_section_type
CDP_SECTION_SVC_INFO	ccx_common_constants.h	/^	CDP_SECTION_SVC_INFO = 0x73,$/;"	e	enum:cdp_section_type
CHECK_OFFSET	ts_tables_epg.c	708;"	d	file:
CHECK_OFFSET	ts_tables_epg.c	757;"	d	file:
CHECK_OFFSET	ts_tables_epg.c	795;"	d	file:
CHECK_OFFSET	ts_tables_epg.c	830;"	d	file:
CLOSED_C608_SDID	ccx_gxf.c	27;"	d	file:
CLOSED_C708_SDID	ccx_gxf.c	26;"	d	file:
CLOSED_CAP_DID	ccx_gxf.c	25;"	d	file:
CNF_FILE	configuration.c	5;"	d	file:
CODEC_ID_4XM	myth.c	/^	CODEC_ID_4XM,$/;"	e	enum:CodecID	file:
CODEC_ID_8BPS	myth.c	/^	CODEC_ID_8BPS,$/;"	e	enum:CodecID	file:
CODEC_ID_AAC	myth.c	/^	CODEC_ID_AAC,$/;"	e	enum:CodecID	file:
CODEC_ID_AASC	myth.c	/^	CODEC_ID_AASC,$/;"	e	enum:CodecID	file:
CODEC_ID_AC3	myth.c	/^	CODEC_ID_AC3,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_4XM	myth.c	/^	CODEC_ID_ADPCM_4XM,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_ADX	myth.c	/^	CODEC_ID_ADPCM_ADX,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_CT	myth.c	/^	CODEC_ID_ADPCM_CT,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_EA	myth.c	/^	CODEC_ID_ADPCM_EA,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_G726	myth.c	/^	CODEC_ID_ADPCM_G726,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_IMA_DK3	myth.c	/^	CODEC_ID_ADPCM_IMA_DK3,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_IMA_DK4	myth.c	/^	CODEC_ID_ADPCM_IMA_DK4,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_IMA_QT	myth.c	/^	CODEC_ID_ADPCM_IMA_QT= 0x11000,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_IMA_SMJPEG	myth.c	/^	CODEC_ID_ADPCM_IMA_SMJPEG,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_IMA_WAV	myth.c	/^	CODEC_ID_ADPCM_IMA_WAV,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_IMA_WS	myth.c	/^	CODEC_ID_ADPCM_IMA_WS,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_MS	myth.c	/^	CODEC_ID_ADPCM_MS,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_SBPRO_2	myth.c	/^	CODEC_ID_ADPCM_SBPRO_2,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_SBPRO_3	myth.c	/^	CODEC_ID_ADPCM_SBPRO_3,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_SBPRO_4	myth.c	/^	CODEC_ID_ADPCM_SBPRO_4,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_SWF	myth.c	/^	CODEC_ID_ADPCM_SWF,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_XA	myth.c	/^	CODEC_ID_ADPCM_XA,$/;"	e	enum:CodecID	file:
CODEC_ID_ADPCM_YAMAHA	myth.c	/^	CODEC_ID_ADPCM_YAMAHA,$/;"	e	enum:CodecID	file:
CODEC_ID_ALAC	myth.c	/^	CODEC_ID_ALAC,$/;"	e	enum:CodecID	file:
CODEC_ID_AMR_NB	myth.c	/^	CODEC_ID_AMR_NB= 0x12000,$/;"	e	enum:CodecID	file:
CODEC_ID_AMR_WB	myth.c	/^	CODEC_ID_AMR_WB,$/;"	e	enum:CodecID	file:
CODEC_ID_ASV1	myth.c	/^	CODEC_ID_ASV1,$/;"	e	enum:CodecID	file:
CODEC_ID_ASV2	myth.c	/^	CODEC_ID_ASV2,$/;"	e	enum:CodecID	file:
CODEC_ID_AVS	myth.c	/^	CODEC_ID_AVS,$/;"	e	enum:CodecID	file:
CODEC_ID_BMP	myth.c	/^	CODEC_ID_BMP,$/;"	e	enum:CodecID	file:
CODEC_ID_CAVS	myth.c	/^	CODEC_ID_CAVS,$/;"	e	enum:CodecID	file:
CODEC_ID_CINEPAK	myth.c	/^	CODEC_ID_CINEPAK,$/;"	e	enum:CodecID	file:
CODEC_ID_CLJR	myth.c	/^	CODEC_ID_CLJR,$/;"	e	enum:CodecID	file:
CODEC_ID_COOK	myth.c	/^	CODEC_ID_COOK,$/;"	e	enum:CodecID	file:
CODEC_ID_CSCD	myth.c	/^	CODEC_ID_CSCD,$/;"	e	enum:CodecID	file:
CODEC_ID_CYUV	myth.c	/^	CODEC_ID_CYUV,$/;"	e	enum:CodecID	file:
CODEC_ID_DSMCC_B	myth.c	/^	CODEC_ID_DSMCC_B,$/;"	e	enum:CodecID	file:
CODEC_ID_DTS	myth.c	/^	CODEC_ID_DTS,$/;"	e	enum:CodecID	file:
CODEC_ID_DVAUDIO	myth.c	/^	CODEC_ID_DVAUDIO,$/;"	e	enum:CodecID	file:
CODEC_ID_DVB_SUBTITLE	myth.c	/^	CODEC_ID_DVB_SUBTITLE,$/;"	e	enum:CodecID	file:
CODEC_ID_DVB_VBI	myth.c	/^	CODEC_ID_DVB_VBI,$/;"	e	enum:CodecID	file:
CODEC_ID_DVD_SUBTITLE	myth.c	/^	CODEC_ID_DVD_SUBTITLE= 0x17000,$/;"	e	enum:CodecID	file:
CODEC_ID_DVVIDEO	myth.c	/^	CODEC_ID_DVVIDEO,$/;"	e	enum:CodecID	file:
CODEC_ID_FFV1	myth.c	/^	CODEC_ID_FFV1,$/;"	e	enum:CodecID	file:
CODEC_ID_FFVHUFF	myth.c	/^	CODEC_ID_FFVHUFF,$/;"	e	enum:CodecID	file:
CODEC_ID_FLAC	myth.c	/^	CODEC_ID_FLAC,$/;"	e	enum:CodecID	file:
CODEC_ID_FLASHSV	myth.c	/^	CODEC_ID_FLASHSV,$/;"	e	enum:CodecID	file:
CODEC_ID_FLIC	myth.c	/^	CODEC_ID_FLIC,$/;"	e	enum:CodecID	file:
CODEC_ID_FLV1	myth.c	/^	CODEC_ID_FLV1,$/;"	e	enum:CodecID	file:
CODEC_ID_FRAPS	myth.c	/^	CODEC_ID_FRAPS,$/;"	e	enum:CodecID	file:
CODEC_ID_GSM	myth.c	/^	CODEC_ID_GSM,$/;"	e	enum:CodecID	file:
CODEC_ID_H261	myth.c	/^	CODEC_ID_H261,$/;"	e	enum:CodecID	file:
CODEC_ID_H263	myth.c	/^	CODEC_ID_H263,$/;"	e	enum:CodecID	file:
CODEC_ID_H263I	myth.c	/^	CODEC_ID_H263I,$/;"	e	enum:CodecID	file:
CODEC_ID_H263P	myth.c	/^	CODEC_ID_H263P,$/;"	e	enum:CodecID	file:
CODEC_ID_H264	myth.c	/^	CODEC_ID_H264,$/;"	e	enum:CodecID	file:
CODEC_ID_HUFFYUV	myth.c	/^	CODEC_ID_HUFFYUV,$/;"	e	enum:CodecID	file:
CODEC_ID_IDCIN	myth.c	/^	CODEC_ID_IDCIN,$/;"	e	enum:CodecID	file:
CODEC_ID_INDEO2	myth.c	/^	CODEC_ID_INDEO2,$/;"	e	enum:CodecID	file:
CODEC_ID_INDEO3	myth.c	/^	CODEC_ID_INDEO3,$/;"	e	enum:CodecID	file:
CODEC_ID_INTERPLAY_DPCM	myth.c	/^	CODEC_ID_INTERPLAY_DPCM,$/;"	e	enum:CodecID	file:
CODEC_ID_INTERPLAY_VIDEO	myth.c	/^	CODEC_ID_INTERPLAY_VIDEO,$/;"	e	enum:CodecID	file:
CODEC_ID_JPEGLS	myth.c	/^	CODEC_ID_JPEGLS,$/;"	e	enum:CodecID	file:
CODEC_ID_KMVC	myth.c	/^	CODEC_ID_KMVC,$/;"	e	enum:CodecID	file:
CODEC_ID_LJPEG	myth.c	/^	CODEC_ID_LJPEG,$/;"	e	enum:CodecID	file:
CODEC_ID_LOCO	myth.c	/^	CODEC_ID_LOCO,$/;"	e	enum:CodecID	file:
CODEC_ID_MACE3	myth.c	/^	CODEC_ID_MACE3,$/;"	e	enum:CodecID	file:
CODEC_ID_MACE6	myth.c	/^	CODEC_ID_MACE6,$/;"	e	enum:CodecID	file:
CODEC_ID_MDEC	myth.c	/^	CODEC_ID_MDEC,$/;"	e	enum:CodecID	file:
CODEC_ID_MJPEG	myth.c	/^	CODEC_ID_MJPEG,$/;"	e	enum:CodecID	file:
CODEC_ID_MJPEGB	myth.c	/^	CODEC_ID_MJPEGB,$/;"	e	enum:CodecID	file:
CODEC_ID_MMVIDEO	myth.c	/^	CODEC_ID_MMVIDEO,$/;"	e	enum:CodecID	file:
CODEC_ID_MP2	myth.c	/^	CODEC_ID_MP2= 0x15000,$/;"	e	enum:CodecID	file:
CODEC_ID_MP3	myth.c	/^	CODEC_ID_MP3, \/* prefered ID for MPEG Audio layer 1, 2 or3 decoding *\/$/;"	e	enum:CodecID	file:
CODEC_ID_MP3ADU	myth.c	/^	CODEC_ID_MP3ADU,$/;"	e	enum:CodecID	file:
CODEC_ID_MP3ON4	myth.c	/^	CODEC_ID_MP3ON4,$/;"	e	enum:CodecID	file:
CODEC_ID_MPEG1VIDEO	myth.c	/^	CODEC_ID_MPEG1VIDEO,$/;"	e	enum:CodecID	file:
CODEC_ID_MPEG2TS	myth.c	/^	CODEC_ID_MPEG2TS= 0x20000, \/* _FAKE_ codec to indicate a raw MPEG2 transport$/;"	e	enum:CodecID	file:
CODEC_ID_MPEG2VBI	myth.c	/^	CODEC_ID_MPEG2VBI,$/;"	e	enum:CodecID	file:
CODEC_ID_MPEG2VIDEO	myth.c	/^	CODEC_ID_MPEG2VIDEO, \/* prefered ID for MPEG Video 1 or 2 decoding *\/$/;"	e	enum:CodecID	file:
CODEC_ID_MPEG2VIDEO_XVMC	myth.c	/^	CODEC_ID_MPEG2VIDEO_XVMC,$/;"	e	enum:CodecID	file:
CODEC_ID_MPEG2VIDEO_XVMC_VLD	myth.c	/^	CODEC_ID_MPEG2VIDEO_XVMC_VLD,$/;"	e	enum:CodecID	file:
CODEC_ID_MPEG4	myth.c	/^	CODEC_ID_MPEG4,$/;"	e	enum:CodecID	file:
CODEC_ID_MPEG4AAC	myth.c	/^	CODEC_ID_MPEG4AAC,$/;"	e	enum:CodecID	file:
CODEC_ID_MSMPEG4V1	myth.c	/^	CODEC_ID_MSMPEG4V1,$/;"	e	enum:CodecID	file:
CODEC_ID_MSMPEG4V2	myth.c	/^	CODEC_ID_MSMPEG4V2,$/;"	e	enum:CodecID	file:
CODEC_ID_MSMPEG4V3	myth.c	/^	CODEC_ID_MSMPEG4V3,$/;"	e	enum:CodecID	file:
CODEC_ID_MSRLE	myth.c	/^	CODEC_ID_MSRLE,$/;"	e	enum:CodecID	file:
CODEC_ID_MSVIDEO1	myth.c	/^	CODEC_ID_MSVIDEO1,$/;"	e	enum:CodecID	file:
CODEC_ID_MSZH	myth.c	/^	CODEC_ID_MSZH,$/;"	e	enum:CodecID	file:
CODEC_ID_NONE	myth.c	/^	CODEC_ID_NONE,$/;"	e	enum:CodecID	file:
CODEC_ID_NUV	myth.c	/^	CODEC_ID_NUV,$/;"	e	enum:CodecID	file:
CODEC_ID_PAM	myth.c	/^	CODEC_ID_PAM,$/;"	e	enum:CodecID	file:
CODEC_ID_PBM	myth.c	/^	CODEC_ID_PBM,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_ALAW	myth.c	/^	CODEC_ID_PCM_ALAW,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_MULAW	myth.c	/^	CODEC_ID_PCM_MULAW,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_S16BE	myth.c	/^	CODEC_ID_PCM_S16BE,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_S16LE	myth.c	/^	CODEC_ID_PCM_S16LE= 0x10000,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_S24BE	myth.c	/^	CODEC_ID_PCM_S24BE,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_S24DAUD	myth.c	/^	CODEC_ID_PCM_S24DAUD,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_S24LE	myth.c	/^	CODEC_ID_PCM_S24LE,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_S32BE	myth.c	/^	CODEC_ID_PCM_S32BE,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_S32LE	myth.c	/^	CODEC_ID_PCM_S32LE,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_S8	myth.c	/^	CODEC_ID_PCM_S8,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_U16BE	myth.c	/^	CODEC_ID_PCM_U16BE,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_U16LE	myth.c	/^	CODEC_ID_PCM_U16LE,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_U24BE	myth.c	/^	CODEC_ID_PCM_U24BE,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_U24LE	myth.c	/^	CODEC_ID_PCM_U24LE,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_U32BE	myth.c	/^	CODEC_ID_PCM_U32BE,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_U32LE	myth.c	/^	CODEC_ID_PCM_U32LE,$/;"	e	enum:CodecID	file:
CODEC_ID_PCM_U8	myth.c	/^	CODEC_ID_PCM_U8,$/;"	e	enum:CodecID	file:
CODEC_ID_PGM	myth.c	/^	CODEC_ID_PGM,$/;"	e	enum:CodecID	file:
CODEC_ID_PGMYUV	myth.c	/^	CODEC_ID_PGMYUV,$/;"	e	enum:CodecID	file:
CODEC_ID_PNG	myth.c	/^	CODEC_ID_PNG,$/;"	e	enum:CodecID	file:
CODEC_ID_PPM	myth.c	/^	CODEC_ID_PPM,$/;"	e	enum:CodecID	file:
CODEC_ID_QCELP	myth.c	/^	CODEC_ID_QCELP,$/;"	e	enum:CodecID	file:
CODEC_ID_QDM2	myth.c	/^	CODEC_ID_QDM2,$/;"	e	enum:CodecID	file:
CODEC_ID_QDRAW	myth.c	/^	CODEC_ID_QDRAW,$/;"	e	enum:CodecID	file:
CODEC_ID_QPEG	myth.c	/^	CODEC_ID_QPEG,$/;"	e	enum:CodecID	file:
CODEC_ID_QTRLE	myth.c	/^	CODEC_ID_QTRLE,$/;"	e	enum:CodecID	file:
CODEC_ID_RAWVIDEO	myth.c	/^	CODEC_ID_RAWVIDEO,$/;"	e	enum:CodecID	file:
CODEC_ID_RA_144	myth.c	/^	CODEC_ID_RA_144= 0x13000,$/;"	e	enum:CodecID	file:
CODEC_ID_RA_288	myth.c	/^	CODEC_ID_RA_288,$/;"	e	enum:CodecID	file:
CODEC_ID_ROQ	myth.c	/^	CODEC_ID_ROQ,$/;"	e	enum:CodecID	file:
CODEC_ID_ROQ_DPCM	myth.c	/^	CODEC_ID_ROQ_DPCM= 0x14000,$/;"	e	enum:CodecID	file:
CODEC_ID_RPZA	myth.c	/^	CODEC_ID_RPZA,$/;"	e	enum:CodecID	file:
CODEC_ID_RV10	myth.c	/^	CODEC_ID_RV10,$/;"	e	enum:CodecID	file:
CODEC_ID_RV20	myth.c	/^	CODEC_ID_RV20,$/;"	e	enum:CodecID	file:
CODEC_ID_RV30	myth.c	/^	CODEC_ID_RV30,$/;"	e	enum:CodecID	file:
CODEC_ID_RV40	myth.c	/^	CODEC_ID_RV40,$/;"	e	enum:CodecID	file:
CODEC_ID_SHORTEN	myth.c	/^	CODEC_ID_SHORTEN,$/;"	e	enum:CodecID	file:
CODEC_ID_SMACKAUDIO	myth.c	/^	CODEC_ID_SMACKAUDIO,$/;"	e	enum:CodecID	file:
CODEC_ID_SMACKVIDEO	myth.c	/^	CODEC_ID_SMACKVIDEO,$/;"	e	enum:CodecID	file:
CODEC_ID_SMC	myth.c	/^	CODEC_ID_SMC,$/;"	e	enum:CodecID	file:
CODEC_ID_SNOW	myth.c	/^	CODEC_ID_SNOW,$/;"	e	enum:CodecID	file:
CODEC_ID_SOL_DPCM	myth.c	/^	CODEC_ID_SOL_DPCM,$/;"	e	enum:CodecID	file:
CODEC_ID_SONIC	myth.c	/^	CODEC_ID_SONIC,$/;"	e	enum:CodecID	file:
CODEC_ID_SONIC_LS	myth.c	/^	CODEC_ID_SONIC_LS,$/;"	e	enum:CodecID	file:
CODEC_ID_SP5X	myth.c	/^	CODEC_ID_SP5X,$/;"	e	enum:CodecID	file:
CODEC_ID_SVQ1	myth.c	/^	CODEC_ID_SVQ1,$/;"	e	enum:CodecID	file:
CODEC_ID_SVQ3	myth.c	/^	CODEC_ID_SVQ3,$/;"	e	enum:CodecID	file:
CODEC_ID_THEORA	myth.c	/^	CODEC_ID_THEORA,$/;"	e	enum:CodecID	file:
CODEC_ID_TRUEMOTION1	myth.c	/^	CODEC_ID_TRUEMOTION1,$/;"	e	enum:CodecID	file:
CODEC_ID_TRUEMOTION2	myth.c	/^	CODEC_ID_TRUEMOTION2,$/;"	e	enum:CodecID	file:
CODEC_ID_TRUESPEECH	myth.c	/^	CODEC_ID_TRUESPEECH,$/;"	e	enum:CodecID	file:
CODEC_ID_TSCC	myth.c	/^	CODEC_ID_TSCC,$/;"	e	enum:CodecID	file:
CODEC_ID_TTA	myth.c	/^	CODEC_ID_TTA,$/;"	e	enum:CodecID	file:
CODEC_ID_ULTI	myth.c	/^	CODEC_ID_ULTI,$/;"	e	enum:CodecID	file:
CODEC_ID_VC1	myth.c	/^	CODEC_ID_VC1,$/;"	e	enum:CodecID	file:
CODEC_ID_VCR1	myth.c	/^	CODEC_ID_VCR1,$/;"	e	enum:CodecID	file:
CODEC_ID_VIXL	myth.c	/^	CODEC_ID_VIXL,$/;"	e	enum:CodecID	file:
CODEC_ID_VMDAUDIO	myth.c	/^	CODEC_ID_VMDAUDIO,$/;"	e	enum:CodecID	file:
CODEC_ID_VMDVIDEO	myth.c	/^	CODEC_ID_VMDVIDEO,$/;"	e	enum:CodecID	file:
CODEC_ID_VORBIS	myth.c	/^	CODEC_ID_VORBIS,$/;"	e	enum:CodecID	file:
CODEC_ID_VP3	myth.c	/^	CODEC_ID_VP3,$/;"	e	enum:CodecID	file:
CODEC_ID_WESTWOOD_SND1	myth.c	/^	CODEC_ID_WESTWOOD_SND1,$/;"	e	enum:CodecID	file:
CODEC_ID_WMAV1	myth.c	/^	CODEC_ID_WMAV1,$/;"	e	enum:CodecID	file:
CODEC_ID_WMAV2	myth.c	/^	CODEC_ID_WMAV2,$/;"	e	enum:CodecID	file:
CODEC_ID_WMV1	myth.c	/^	CODEC_ID_WMV1,$/;"	e	enum:CodecID	file:
CODEC_ID_WMV2	myth.c	/^	CODEC_ID_WMV2,$/;"	e	enum:CodecID	file:
CODEC_ID_WMV3	myth.c	/^	CODEC_ID_WMV3,$/;"	e	enum:CodecID	file:
CODEC_ID_WNV1	myth.c	/^	CODEC_ID_WNV1,$/;"	e	enum:CodecID	file:
CODEC_ID_WS_VQA	myth.c	/^	CODEC_ID_WS_VQA,$/;"	e	enum:CodecID	file:
CODEC_ID_XAN_DPCM	myth.c	/^	CODEC_ID_XAN_DPCM,$/;"	e	enum:CodecID	file:
CODEC_ID_XAN_WC3	myth.c	/^	CODEC_ID_XAN_WC3,$/;"	e	enum:CodecID	file:
CODEC_ID_XAN_WC4	myth.c	/^	CODEC_ID_XAN_WC4,$/;"	e	enum:CodecID	file:
CODEC_ID_XVID	myth.c	/^	CODEC_ID_XVID,$/;"	e	enum:CodecID	file:
CODEC_ID_ZLIB	myth.c	/^	CODEC_ID_ZLIB,$/;"	e	enum:CodecID	file:
CODEC_ID_ZMBV	myth.c	/^	CODEC_ID_ZMBV,$/;"	e	enum:CodecID	file:
CODEC_TYPE_AUDIO	myth.c	/^	CODEC_TYPE_AUDIO,$/;"	e	enum:CodecType	file:
CODEC_TYPE_DATA	myth.c	/^	CODEC_TYPE_DATA,$/;"	e	enum:CodecType	file:
CODEC_TYPE_SUBTITLE	myth.c	/^	CODEC_TYPE_SUBTITLE,$/;"	e	enum:CodecType	file:
CODEC_TYPE_UNKNOWN	myth.c	/^	CODEC_TYPE_UNKNOWN = -1,$/;"	e	enum:CodecType	file:
CODEC_TYPE_VIDEO	myth.c	/^	CODEC_TYPE_VIDEO,$/;"	e	enum:CodecType	file:
COLUMNS	spupng_encoder.h	11;"	d
COL_BLACK	ccx_decoders_608.h	/^	COL_BLACK = 8,$/;"	e	enum:ccx_decoder_608_color_code
COL_BLUE	ccx_decoders_608.h	/^	COL_BLUE = 2,$/;"	e	enum:ccx_decoder_608_color_code
COL_CYAN	ccx_decoders_608.h	/^	COL_CYAN = 3,$/;"	e	enum:ccx_decoder_608_color_code
COL_GREEN	ccx_decoders_608.h	/^	COL_GREEN = 1,$/;"	e	enum:ccx_decoder_608_color_code
COL_MAGENTA	ccx_decoders_608.h	/^	COL_MAGENTA = 6,$/;"	e	enum:ccx_decoder_608_color_code
COL_RED	ccx_decoders_608.h	/^	COL_RED = 4,$/;"	e	enum:ccx_decoder_608_color_code
COL_TRANSPARENT	ccx_decoders_608.h	/^	COL_TRANSPARENT = 9$/;"	e	enum:ccx_decoder_608_color_code
COL_USERDEFINED	ccx_decoders_608.h	/^	COL_USERDEFINED = 7,$/;"	e	enum:ccx_decoder_608_color_code
COL_WHITE	ccx_decoders_608.h	/^	COL_WHITE = 0,$/;"	e	enum:ccx_decoder_608_color_code
COL_YELLOW	ccx_decoders_608.h	/^	COL_YELLOW = 5,$/;"	e	enum:ccx_decoder_608_color_code
COM_ALARMOFF	ccx_decoders_608.h	/^	COM_ALARMOFF =14,$/;"	e	enum:command_code
COM_ALARMON	ccx_decoders_608.h	/^	COM_ALARMON = 15,$/;"	e	enum:command_code
COM_BACKSPACE	ccx_decoders_608.h	/^	COM_BACKSPACE = 12,$/;"	e	enum:command_code
COM_CARRIAGERETURN	ccx_decoders_608.h	/^	COM_CARRIAGERETURN = 10,$/;"	e	enum:command_code
COM_DELETETOENDOFROW	ccx_decoders_608.h	/^	COM_DELETETOENDOFROW = 16,$/;"	e	enum:command_code
COM_ENDOFCAPTION	ccx_decoders_608.h	/^	COM_ENDOFCAPTION = 3,$/;"	e	enum:command_code
COM_ERASEDISPLAYEDMEMORY	ccx_decoders_608.h	/^	COM_ERASEDISPLAYEDMEMORY = 1,$/;"	e	enum:command_code
COM_ERASENONDISPLAYEDMEMORY	ccx_decoders_608.h	/^	COM_ERASENONDISPLAYEDMEMORY = 11,$/;"	e	enum:command_code
COM_FAKE_RULLUP1	ccx_decoders_608.h	/^	COM_FAKE_RULLUP1 = 18$/;"	e	enum:command_code
COM_RESUMECAPTIONLOADING	ccx_decoders_608.h	/^	COM_RESUMECAPTIONLOADING = 2,$/;"	e	enum:command_code
COM_RESUMEDIRECTCAPTIONING	ccx_decoders_608.h	/^	COM_RESUMEDIRECTCAPTIONING = 17,$/;"	e	enum:command_code
COM_RESUMETEXTDISPLAY	ccx_decoders_608.h	/^	COM_RESUMETEXTDISPLAY = 13,$/;"	e	enum:command_code
COM_ROLLUP2	ccx_decoders_608.h	/^	COM_ROLLUP2 = 7,$/;"	e	enum:command_code
COM_ROLLUP3	ccx_decoders_608.h	/^	COM_ROLLUP3 = 8,$/;"	e	enum:command_code
COM_ROLLUP4	ccx_decoders_608.h	/^	COM_ROLLUP4 = 9,$/;"	e	enum:command_code
COM_TABOFFSET1	ccx_decoders_608.h	/^	COM_TABOFFSET1 = 4,$/;"	e	enum:command_code
COM_TABOFFSET2	ccx_decoders_608.h	/^	COM_TABOFFSET2 = 5,$/;"	e	enum:command_code
COM_TABOFFSET3	ccx_decoders_608.h	/^	COM_TABOFFSET3 = 6,$/;"	e	enum:command_code
COM_UNKNOWN	ccx_decoders_608.h	/^	COM_UNKNOWN = 0,$/;"	e	enum:command_code
CONN_LIMIT	networking.c	26;"	d	file:
CSI_CMD_ACPS	ccx_decoders_isdb.c	/^	CSI_CMD_ACPS = 0x61,$/;"	e	enum:csi_command	file:
CSI_CMD_ACS	ccx_decoders_isdb.c	/^	CSI_CMD_ACS = 0x69,$/;"	e	enum:csi_command	file:
CSI_CMD_CCC	ccx_decoders_isdb.c	/^	CSI_CMD_CCC = 0x54,$/;"	e	enum:csi_command	file:
CSI_CMD_CFS	ccx_decoders_isdb.c	/^	CSI_CMD_CFS = 0x65,$/;"	e	enum:csi_command	file:
CSI_CMD_GAA	ccx_decoders_isdb.c	/^	CSI_CMD_GAA = 0x5D,$/;"	e	enum:csi_command	file:
CSI_CMD_GSM	ccx_decoders_isdb.c	/^	CSI_CMD_GSM = 0x42,$/;"	e	enum:csi_command	file:
CSI_CMD_MDF	ccx_decoders_isdb.c	/^	CSI_CMD_MDF = 0x64,$/;"	e	enum:csi_command	file:
CSI_CMD_ORN	ccx_decoders_isdb.c	/^	CSI_CMD_ORN = 0x63,$/;"	e	enum:csi_command	file:
CSI_CMD_PLD	ccx_decoders_isdb.c	/^	CSI_CMD_PLD = 0x5B,$/;"	e	enum:csi_command	file:
CSI_CMD_PLU	ccx_decoders_isdb.c	/^	CSI_CMD_PLU = 0x5C,$/;"	e	enum:csi_command	file:
CSI_CMD_PRA	ccx_decoders_isdb.c	/^	CSI_CMD_PRA = 0x68,$/;"	e	enum:csi_command	file:
CSI_CMD_RCS	ccx_decoders_isdb.c	/^	CSI_CMD_RCS = 0x6E,$/;"	e	enum:csi_command	file:
CSI_CMD_SCS	ccx_decoders_isdb.c	/^	CSI_CMD_SCS = 0x6F,$/;"	e	enum:csi_command	file:
CSI_CMD_SDF	ccx_decoders_isdb.c	/^	CSI_CMD_SDF = 0x56,$/;"	e	enum:csi_command	file:
CSI_CMD_SDP	ccx_decoders_isdb.c	/^	CSI_CMD_SDP = 0x5F,$/;"	e	enum:csi_command	file:
CSI_CMD_SHS	ccx_decoders_isdb.c	/^	CSI_CMD_SHS = 0x58,$/;"	e	enum:csi_command	file:
CSI_CMD_SRC	ccx_decoders_isdb.c	/^	CSI_CMD_SRC = 0x5E,$/;"	e	enum:csi_command	file:
CSI_CMD_SSM	ccx_decoders_isdb.c	/^	CSI_CMD_SSM = 0x57,$/;"	e	enum:csi_command	file:
CSI_CMD_SVS	ccx_decoders_isdb.c	/^	CSI_CMD_SVS = 0x59,$/;"	e	enum:csi_command	file:
CSI_CMD_SWF	ccx_decoders_isdb.c	/^	CSI_CMD_SWF = 0x53,$/;"	e	enum:csi_command	file:
CSI_CMD_TCC	ccx_decoders_isdb.c	/^	CSI_CMD_TCC = 0x62,$/;"	e	enum:csi_command	file:
CSI_CMD_XCS	ccx_decoders_isdb.c	/^	CSI_CMD_XCS = 0x66,$/;"	e	enum:csi_command	file:
CXX_MP4_H	ccx_mp4.h	2;"	d
CYRILLIC1	telxcc.c	/^	CYRILLIC1,$/;"	e	enum:__anon6	file:
CYRILLIC2	telxcc.c	/^	CYRILLIC2,$/;"	e	enum:__anon6	file:
CYRILLIC3	telxcc.c	/^	CYRILLIC3,$/;"	e	enum:__anon6	file:
CaptionStreamNumber	asf_constants.h	/^	int CaptionStreamNumber;$/;"	m	struct:__anon8
CaptionStreamStyle	asf_constants.h	/^	int CaptionStreamStyle; \/\/ 1 = NTSC, 2 = ATSC$/;"	m	struct:__anon8
CodecID	myth.c	/^enum CodecID$/;"	g	file:
CodecType	myth.c	/^enum CodecType$/;"	g	file:
DATA_UNIT_CLOSED_CAPTIONS	telxcc.c	/^	DATA_UNIT_CLOSED_CAPTIONS = 0xc5$/;"	e	enum:__anon3	file:
DATA_UNIT_EBU_TELETEXT_INVERTED	telxcc.c	/^	DATA_UNIT_EBU_TELETEXT_INVERTED = 0x0c,$/;"	e	enum:__anon3	file:
DATA_UNIT_EBU_TELETEXT_NONSUBTITLE	telxcc.c	/^	DATA_UNIT_EBU_TELETEXT_NONSUBTITLE = 0x02,$/;"	e	enum:__anon3	file:
DATA_UNIT_EBU_TELETEXT_SUBTITLE	telxcc.c	/^	DATA_UNIT_EBU_TELETEXT_SUBTITLE = 0x03,$/;"	e	enum:__anon3	file:
DATA_UNIT_VPS	telxcc.c	/^	DATA_UNIT_VPS = 0xc3,$/;"	e	enum:__anon3	file:
DEBUG_OUT	networking.c	11;"	d	file:
DEF_VAL_ENDCREDITSFORATLEAST	ccx_common_constants.h	300;"	d
DEF_VAL_ENDCREDITSFORATMOST	ccx_common_constants.h	301;"	d
DEF_VAL_STARTCREDITSFORATLEAST	ccx_common_constants.h	298;"	d
DEF_VAL_STARTCREDITSFORATMOST	ccx_common_constants.h	299;"	d
DEF_VAL_STARTCREDITSNOTAFTER	ccx_common_constants.h	297;"	d
DEF_VAL_STARTCREDITSNOTBEFORE	ccx_common_constants.h	295;"	d
DFT_PORT	networking.c	31;"	d	file:
DO_NOTHING	general_loop.c	/^const static unsigned char DO_NOTHING[] = {0x80, 0x80};$/;"	v	file:
DTS_ID	myth.c	52;"	d	file:
DTVCC_COMMANDS_C0	ccx_decoders_708.c	/^const char *DTVCC_COMMANDS_C0[32] =$/;"	v
DTVCC_COMMANDS_C1	ccx_decoders_708.c	/^struct CCX_DTVCC_S_COMMANDS_C1 DTVCC_COMMANDS_C1[32] =$/;"	v	typeref:struct:CCX_DTVCC_S_COMMANDS_C1
DTVCC_PACKET_DATA	ccx_common_constants.c	/^	DTVCC_PACKET_DATA  = 2,$/;"	e	enum:__anon10	file:
DTVCC_PACKET_START	ccx_common_constants.c	/^	DTVCC_PACKET_START = 3,$/;"	e	enum:__anon10	file:
DVBSUBDEC_H	dvb_subtitle_decoder.h	17;"	d
DVBSUB_CLUT_SEGMENT	dvb_subtitle_decoder.c	32;"	d	file:
DVBSUB_DISPLAYDEFINITION_SEGMENT	dvb_subtitle_decoder.c	34;"	d	file:
DVBSUB_DISPLAY_SEGMENT	dvb_subtitle_decoder.c	35;"	d	file:
DVBSUB_OBJECT_SEGMENT	dvb_subtitle_decoder.c	33;"	d	file:
DVBSUB_PAGE_SEGMENT	dvb_subtitle_decoder.c	30;"	d	file:
DVBSUB_REGION_SEGMENT	dvb_subtitle_decoder.c	31;"	d	file:
DVBSubCLUT	dvb_subtitle_decoder.c	/^typedef struct DVBSubCLUT$/;"	s	file:
DVBSubCLUT	dvb_subtitle_decoder.c	/^} DVBSubCLUT;$/;"	t	typeref:struct:DVBSubCLUT	file:
DVBSubContext	dvb_subtitle_decoder.c	/^typedef struct DVBSubContext$/;"	s	file:
DVBSubContext	dvb_subtitle_decoder.c	/^} DVBSubContext;$/;"	t	typeref:struct:DVBSubContext	file:
DVBSubDisplayDefinition	dvb_subtitle_decoder.c	/^typedef struct DVBSubDisplayDefinition$/;"	s	file:
DVBSubDisplayDefinition	dvb_subtitle_decoder.c	/^} DVBSubDisplayDefinition;$/;"	t	typeref:struct:DVBSubDisplayDefinition	file:
DVBSubObject	dvb_subtitle_decoder.c	/^typedef struct DVBSubObject$/;"	s	file:
DVBSubObject	dvb_subtitle_decoder.c	/^} DVBSubObject;$/;"	t	typeref:struct:DVBSubObject	file:
DVBSubObjectDisplay	dvb_subtitle_decoder.c	/^typedef struct DVBSubObjectDisplay$/;"	s	file:
DVBSubObjectDisplay	dvb_subtitle_decoder.c	/^} DVBSubObjectDisplay;$/;"	t	typeref:struct:DVBSubObjectDisplay	file:
DVBSubRegion	dvb_subtitle_decoder.c	/^typedef struct DVBSubRegion$/;"	s	file:
DVBSubRegion	dvb_subtitle_decoder.c	/^} DVBSubRegion;$/;"	t	typeref:struct:DVBSubRegion	file:
DVBSubRegionDisplay	dvb_subtitle_decoder.c	/^typedef struct DVBSubRegionDisplay$/;"	s	file:
DVBSubRegionDisplay	dvb_subtitle_decoder.c	/^} DVBSubRegionDisplay;$/;"	t	typeref:struct:DVBSubRegionDisplay	file:
DVD_HEADER	ccx_common_constants.c	/^const unsigned char DVD_HEADER[8]={0x00,0x00,0x01,0xb2,0x43,0x43,0x01,0xf8};$/;"	v
DVRMS_ATSC	asf_constants.h	28;"	d
DVRMS_AUDIO	asf_constants.h	26;"	d
DVRMS_NTSC	asf_constants.h	27;"	d
DVRMS_PTS	asf_constants.h	31;"	d
DataObjectSize	asf_constants.h	/^	int64_t DataObjectSize;$/;"	m	struct:__anon9
DecodeStreamNumber	asf_constants.h	/^	int DecodeStreamNumber; \/\/ The stream that is chosen to be decoded$/;"	m	struct:__anon8
DecodeStreamPTS	asf_constants.h	/^	int DecodeStreamPTS; \/\/ This will be used for the next returned block$/;"	m	struct:__anon8
Default_clut	ccx_decoders_isdb.c	/^static rgba Default_clut[128] =$/;"	v	file:
EBSPtoRBSP	avc_functions.c	/^int EBSPtoRBSP(unsigned char *streamBuffer, int end_bytepos, int begin_bytepos)$/;"	f
EIA_708_BUFFER_LENGTH	ccx_common_constants.h	35;"	d
EIT_program	ts_functions.h	/^struct EIT_program$/;"	s
ENTITIES	telxcc.c	/^} const ENTITIES[] = {$/;"	v
EPG_ATSC_calc_time	ts_tables_epg.c	/^void EPG_ATSC_calc_time(char *output, uint32_t time)$/;"	f
EPG_ATSC_decode_EIT	ts_tables_epg.c	/^void EPG_ATSC_decode_EIT(struct lib_ccx_ctx *ctx, uint8_t *payload_start, uint32_t size)$/;"	f
EPG_ATSC_decode_VCT	ts_tables_epg.c	/^void EPG_ATSC_decode_VCT(struct lib_ccx_ctx *ctx, uint8_t *payload_start, uint32_t size)$/;"	f
EPG_ATSC_decode_multiple_string	ts_tables_epg.c	/^void EPG_ATSC_decode_multiple_string(uint8_t *offset, uint32_t length, struct EPG_event *event)$/;"	f
EPG_DATA	networking.c	21;"	d	file:
EPG_DVB_calc_end_time	ts_tables_epg.c	/^void EPG_DVB_calc_end_time(struct EPG_event *event, uint64_t time, uint32_t duration)$/;"	f
EPG_DVB_calc_start_time	ts_tables_epg.c	/^void EPG_DVB_calc_start_time(struct EPG_event *event, uint64_t time)$/;"	f
EPG_DVB_content_type_to_string	ts_tables_epg.c	/^char *EPG_DVB_content_type_to_string(uint8_t cat)$/;"	f
EPG_DVB_decode_EIT	ts_tables_epg.c	/^void EPG_DVB_decode_EIT(struct lib_ccx_ctx *ctx, uint8_t *payload_start, uint32_t size)$/;"	f
EPG_DVB_decode_string	ts_tables_epg.c	/^char* EPG_DVB_decode_string(uint8_t *in, size_t size)$/;"	f
EPG_MAX_EVENTS	ts_functions.h	70;"	d
EPG_add_event	ts_tables_epg.c	/^int EPG_add_event(struct lib_ccx_ctx *ctx, int32_t pmt_map, struct EPG_event *event)$/;"	f
EPG_decode_content_descriptor	ts_tables_epg.c	/^void EPG_decode_content_descriptor(uint8_t *offset, uint32_t descriptor_length, struct EPG_event *event)$/;"	f
EPG_decode_extended_event_descriptor	ts_tables_epg.c	/^void EPG_decode_extended_event_descriptor(uint8_t *offset, uint32_t descriptor_length, struct EPG_event *event)$/;"	f
EPG_decode_parental_rating_descriptor	ts_tables_epg.c	/^void EPG_decode_parental_rating_descriptor(uint8_t *offset, uint32_t descriptor_length, struct EPG_event *event)$/;"	f
EPG_decode_short_event_descriptor	ts_tables_epg.c	/^void EPG_decode_short_event_descriptor(uint8_t *offset, uint32_t descriptor_length, struct EPG_event *event)$/;"	f
EPG_event	ts_functions.h	/^struct EPG_event$/;"	s
EPG_event_cmp	ts_tables_epg.c	/^int EPG_event_cmp(struct EPG_event *e1, struct EPG_event *e2)$/;"	f
EPG_fprintxml	ts_tables_epg.c	/^void EPG_fprintxml(FILE *f, char *string)$/;"	f
EPG_free	ts_tables_epg.c	/^void EPG_free(struct lib_ccx_ctx *ctx)$/;"	f
EPG_free_event	ts_tables_epg.c	/^void EPG_free_event(struct EPG_event *event)$/;"	f
EPG_handle_output	ts_tables_epg.c	/^void EPG_handle_output(struct lib_ccx_ctx *ctx)$/;"	f
EPG_output	ts_tables_epg.c	/^void EPG_output(struct lib_ccx_ctx *ctx)$/;"	f
EPG_output_live	ts_tables_epg.c	/^void EPG_output_live(struct lib_ccx_ctx *ctx)$/;"	f
EPG_output_net	ts_tables_epg.c	/^void EPG_output_net(struct lib_ccx_ctx *ctx)$/;"	f
EPG_parse_table	ts_tables_epg.c	/^void EPG_parse_table(struct lib_ccx_ctx *ctx, uint8_t *b, uint32_t size)$/;"	f
EPG_print_event	ts_tables_epg.c	/^void EPG_print_event(struct EPG_event *event, uint32_t channel, FILE *f)$/;"	f
EPG_rating	ts_functions.h	/^struct EPG_rating$/;"	s
ERROR	networking.c	23;"	d	file:
EXIT_BUFFER_FULL	ccx_common_common.h	23;"	d
EXIT_ERROR_IN_CAPITALIZATION_FILE	ccx_common_common.h	22;"	d
EXIT_INCOMPATIBLE_PARAMETERS	ccx_common_common.h	16;"	d
EXIT_MALFORMED_PARAMETER	ccx_common_common.h	18;"	d
EXIT_MISSING_ASF_HEADER	ccx_common_common.h	24;"	d
EXIT_MISSING_RCWT_HEADER	ccx_common_common.h	25;"	d
EXIT_NOT_CLASSIFIED	ccx_common_common.h	21;"	d
EXIT_NOT_ENOUGH_MEMORY	ccx_common_common.h	29;"	d
EXIT_NO_INPUT_FILES	ccx_common_common.h	14;"	d
EXIT_OK	ccx_common_common.h	13;"	d
EXIT_READ_ERROR	ccx_common_common.h	19;"	d
EXIT_TOO_MANY_INPUT_FILES	ccx_common_common.h	15;"	d
EXIT_UNABLE_TO_DETERMINE_FILE_SIZE	ccx_common_common.h	17;"	d
EXIT_WITH_HELP	ccx_common_common.h	20;"	d
FILEBUFFERSIZE	file_functions.c	/^long FILEBUFFERSIZE = 1024*1024*16; \/\/ 16 Mbytes no less. Minimize number of real read calls()$/;"	v
FILE_BUFFER_H	file_buffer.h	2;"	d
FIX	dvb_subtitle_decoder.c	39;"	d	file:
FI_BLUE	ccx_decoders_isdb.c	/^	FI_BLUE,$/;"	e	enum:color	file:
FI_CYAN	ccx_decoders_isdb.c	/^	FI_CYAN,$/;"	e	enum:color	file:
FI_GREEN	ccx_decoders_isdb.c	/^	FI_GREEN,$/;"	e	enum:color	file:
FI_MAGENTA	ccx_decoders_isdb.c	/^	FI_MAGENTA,$/;"	e	enum:color	file:
FI_RED	ccx_decoders_isdb.c	/^	FI_RED,$/;"	e	enum:color	file:
FI_WHITE	ccx_decoders_isdb.c	/^	FI_WHITE,$/;"	e	enum:color	file:
FI_YELLOW	ccx_decoders_isdb.c	/^	FI_YELLOW,$/;"	e	enum:color	file:
FONT_ITALICS	ccx_decoders_608.h	/^	FONT_ITALICS = 1,$/;"	e	enum:font_bits
FONT_REGULAR	ccx_decoders_608.h	/^	FONT_REGULAR = 0,$/;"	e	enum:font_bits
FONT_UNDERLINED	ccx_decoders_608.h	/^	FONT_UNDERLINED = 2,$/;"	e	enum:font_bits
FONT_UNDERLINED_ITALICS	ccx_decoders_608.h	/^	FONT_UNDERLINED_ITALICS = 3$/;"	e	enum:font_bits
FOPEN64	ccx_common_platform.h	67;"	d
FOPEN64	ccx_common_platform.h	93;"	d
FSEEK	ccx_common_platform.h	69;"	d
FSEEK	ccx_common_platform.h	80;"	d
FSEEK	ccx_common_platform.h	84;"	d
FSEEK	ccx_common_platform.h	96;"	d
FSTAT	ccx_common_platform.h	72;"	d
FSTAT	ccx_common_platform.h	98;"	d
FSTATSTRUCT	ccx_common_platform.h	/^			typedef struct _stati64 FSTATSTRUCT;$/;"	t	typeref:struct:_stati64
FTELL	ccx_common_platform.h	70;"	d
FTELL	ccx_common_platform.h	81;"	d
FTELL	ccx_common_platform.h	85;"	d
FTELL	ccx_common_platform.h	97;"	d
FileSize	asf_constants.h	/^	int64_t FileSize;$/;"	m	struct:__anon9
G0	telxcc.c	/^uint16_t G0[5][96] = {$/;"	v
G0_LATIN_NATIONAL_SUBSETS	telxcc.c	/^} const G0_LATIN_NATIONAL_SUBSETS[14] = {$/;"	v
G0_LATIN_NATIONAL_SUBSETS_MAP	telxcc.c	/^const uint8_t G0_LATIN_NATIONAL_SUBSETS_MAP[56] = {$/;"	v
G0_LATIN_NATIONAL_SUBSETS_POSITIONS	telxcc.c	/^const uint8_t G0_LATIN_NATIONAL_SUBSETS_POSITIONS[13] = {$/;"	v
G2	telxcc.c	/^const uint16_t G2[1][96] = {$/;"	v
G2_ACCENTS	telxcc.c	/^const uint16_t G2_ACCENTS[15][52] = {$/;"	v
GREEK	telxcc.c	/^	GREEK,$/;"	e	enum:__anon6	file:
GXFAncDataPresFormat	ccx_gxf.c	/^}GXFAncDataPresFormat;$/;"	t	typeref:enum:ccx_ad_pres_format	file:
GXFMatTag	ccx_gxf.c	/^} GXFMatTag;$/;"	t	typeref:enum:__anon16	file:
GXFPktType	ccx_gxf.c	/^} GXFPktType;$/;"	t	typeref:enum:__anon15	file:
GXFTrackTag	ccx_gxf.c	/^} GXFTrackTag;$/;"	t	typeref:enum:__anon17	file:
GXFTrackType	ccx_gxf.c	/^}GXFTrackType;$/;"	t	typeref:enum:__anon18	file:
GetBitContext	dvb_subtitle_decoder.c	/^typedef struct GetBitContext$/;"	s	file:
GetBitContext	dvb_subtitle_decoder.c	/^} GetBitContext;$/;"	t	typeref:struct:GetBitContext	file:
HAUPPAGE_CCPID	lib_ccx.h	276;"	d
HEBREW	telxcc.c	/^	HEBREW$/;"	e	enum:__anon6	file:
HI_BLUE	ccx_decoders_isdb.c	/^	HI_BLUE,$/;"	e	enum:color	file:
HI_CYAN	ccx_decoders_isdb.c	/^	HI_CYAN,$/;"	e	enum:color	file:
HI_GREEN	ccx_decoders_isdb.c	/^	HI_GREEN,$/;"	e	enum:color	file:
HI_MAGENTA	ccx_decoders_isdb.c	/^	HI_MAGENTA,$/;"	e	enum:color	file:
HI_RED	ccx_decoders_isdb.c	/^	HI_RED,$/;"	e	enum:color	file:
HI_WHITE	ccx_decoders_isdb.c	/^	HI_WHITE,$/;"	e	enum:color	file:
HI_YELLOW	ccx_decoders_isdb.c	/^	HI_YELLOW,$/;"	e	enum:color	file:
HLIST_HEAD	list.h	375;"	d
HLIST_HEAD_INIT	list.h	374;"	d
HeaderObjectSize	asf_constants.h	/^	int64_t HeaderObjectSize;$/;"	m	struct:__anon9
INITIAL_ENC_BUFFER_CAPACITY	ccx_encoders_common.h	101;"	d
INIT_HLIST_HEAD	list.h	376;"	d
INIT_HLIST_NODE	list.h	377;"	d
INIT_LIST_HEAD	list.h	61;"	d
INT16_C	stdintmsc.h	216;"	d
INT16_MAX	stdintmsc.h	120;"	d
INT16_MIN	stdintmsc.h	119;"	d
INT32_C	stdintmsc.h	217;"	d
INT32_MAX	stdintmsc.h	122;"	d
INT32_MIN	stdintmsc.h	121;"	d
INT64_C	stdintmsc.h	218;"	d
INT64_MAX	stdintmsc.h	124;"	d
INT64_MIN	stdintmsc.h	123;"	d
INT8_C	stdintmsc.h	215;"	d
INT8_MAX	stdintmsc.h	118;"	d
INT8_MIN	stdintmsc.h	117;"	d
INTMAX_C	stdintmsc.h	226;"	d
INTMAX_MAX	stdintmsc.h	171;"	d
INTMAX_MIN	stdintmsc.h	170;"	d
INTPTR_MAX	stdintmsc.h	161;"	d
INTPTR_MAX	stdintmsc.h	165;"	d
INTPTR_MIN	stdintmsc.h	160;"	d
INTPTR_MIN	stdintmsc.h	164;"	d
INT_FAST16_MAX	stdintmsc.h	148;"	d
INT_FAST16_MIN	stdintmsc.h	147;"	d
INT_FAST32_MAX	stdintmsc.h	150;"	d
INT_FAST32_MIN	stdintmsc.h	149;"	d
INT_FAST64_MAX	stdintmsc.h	152;"	d
INT_FAST64_MIN	stdintmsc.h	151;"	d
INT_FAST8_MAX	stdintmsc.h	146;"	d
INT_FAST8_MIN	stdintmsc.h	145;"	d
INT_LEAST16_MAX	stdintmsc.h	134;"	d
INT_LEAST16_MIN	stdintmsc.h	133;"	d
INT_LEAST32_MAX	stdintmsc.h	136;"	d
INT_LEAST32_MIN	stdintmsc.h	135;"	d
INT_LEAST64_MAX	stdintmsc.h	138;"	d
INT_LEAST64_MIN	stdintmsc.h	137;"	d
INT_LEAST8_MAX	stdintmsc.h	132;"	d
INT_LEAST8_MIN	stdintmsc.h	131;"	d
INT_LEN	networking.c	14;"	d	file:
IN_CLASSD	ccx_common_platform.h	31;"	d
IN_MULTICAST	ccx_common_platform.h	32;"	d
ISDBPos	ccx_decoders_isdb.c	/^struct ISDBPos{$/;"	s	file:
ISDBSubContext	ccx_decoders_isdb.c	/^}ISDBSubContext;$/;"	t	typeref:struct:__anon13	file:
ISDBSubLayout	ccx_decoders_isdb.c	/^}ISDBSubLayout;$/;"	t	typeref:struct:__anon11	file:
ISDBSubState	ccx_decoders_isdb.c	/^} ISDBSubState;$/;"	t	typeref:struct:__anon12	file:
ISDBText	ccx_decoders_isdb.c	/^struct ISDBText$/;"	s	file:
ISDB_CC_AND	ccx_decoders_isdb.c	/^	ISDB_CC_AND  = 2,$/;"	e	enum:isdb_CC_composition	file:
ISDB_CC_NONE	ccx_decoders_isdb.c	/^	ISDB_CC_NONE = 0,$/;"	e	enum:isdb_CC_composition	file:
ISDB_CC_OR	ccx_decoders_isdb.c	/^	ISDB_CC_OR   = 3,$/;"	e	enum:isdb_CC_composition	file:
ISDB_CC_XOR	ccx_decoders_isdb.c	/^	ISDB_CC_XOR  = 4,$/;"	e	enum:isdb_CC_composition	file:
ISDB_H	ccx_decoders_isdb.h	2;"	d
ISDB_TMD_FREE	ccx_decoders_isdb.c	/^	ISDB_TMD_FREE = 0,$/;"	e	enum:isdb_tmd	file:
ISDB_TMD_OFFSET_TIME	ccx_decoders_isdb.c	/^	ISDB_TMD_OFFSET_TIME = 0x2,$/;"	e	enum:isdb_tmd	file:
ISDB_TMD_REAL_TIME	ccx_decoders_isdb.c	/^	ISDB_TMD_REAL_TIME = 0x1,$/;"	e	enum:isdb_tmd	file:
ISO_11172_END_CODE	myth.c	38;"	d	file:
ISO_639_language_code	ts_functions.h	/^	char ISO_639_language_code[4];$/;"	m	struct:EPG_event
IS_FEASIBLE	ccx_common_constants.h	287;"	d
IS_HORIZONTAL_LAYOUT	ccx_decoders_isdb.c	131;"	d	file:
IS_VALID_TELETEXT_DESC	ccx_common_constants.h	266;"	d
KeyFrame	asf_constants.h	/^	int KeyFrame; \/\/ ASF$/;"	m	struct:__anon9
LATIN	telxcc.c	/^	LATIN = 0,$/;"	e	enum:__anon6	file:
LAYOUT_GET_HEIGHT	ccx_decoders_isdb.c	143;"	d	file:
LAYOUT_GET_WIDTH	ccx_decoders_isdb.c	141;"	d	file:
LIST_HEAD	list.h	58;"	d
LIST_HEAD_INIT	list.h	56;"	d
LIST_POISON1	list.h	40;"	d
LIST_POISON2	list.h	41;"	d
LITTLE_ENDIAN_BOM	ccx_common_constants.c	/^const unsigned char LITTLE_ENDIAN_BOM[]={0xff, 0xfe};$/;"	v
LLONG	ccx_common_platform.h	/^	typedef int64_t LLONG;$/;"	t
LPCM_ID	myth.c	53;"	d	file:
LSEEK	ccx_common_platform.h	71;"	d
LSEEK	ccx_common_platform.h	88;"	d
LSEEK	ccx_common_platform.h	95;"	d
MAGAZINE	telxcc.c	185;"	d	file:
MAT_FIRST_FIELD	ccx_gxf.c	/^	MAT_FIRST_FIELD = 0x41,$/;"	e	enum:__anon16	file:
MAT_LAST_FIELD	ccx_gxf.c	/^	MAT_LAST_FIELD  = 0x42,$/;"	e	enum:__anon16	file:
MAT_MARK_IN	ccx_gxf.c	/^	MAT_MARK_IN     = 0x43,$/;"	e	enum:__anon16	file:
MAT_MARK_OUT	ccx_gxf.c	/^	MAT_MARK_OUT    = 0x44,$/;"	e	enum:__anon16	file:
MAT_NAME	ccx_gxf.c	/^	MAT_NAME        = 0x40,$/;"	e	enum:__anon16	file:
MAT_SIZE	ccx_gxf.c	/^	MAT_SIZE        = 0x45,$/;"	e	enum:__anon16	file:
MAXBFRAMES	ccx_decoders_structs.h	12;"	d
MAX_CLOSED_CAPTION_DATA_PER_PICTURE	ccx_common_constants.h	34;"	d
MAX_COLOR	ccx_decoders_608.h	64;"	d
MAX_LANGUAGE_PER_DESC	dvb_subtitle_decoder.h	19;"	d
MAX_NEG_CROP	dvb_subtitle_decoder.c	62;"	d	file:
MAX_PID	ccx_demuxer.h	12;"	d
MAX_PROGRAM	ccx_demuxer.h	15;"	d
MAX_PROGRAM_NAME_LEN	ccx_demuxer.h	16;"	d
MAX_PSI_PID	ccx_demuxer.h	13;"	d
MAX_SYNC_SIZE	myth.c	32;"	d	file:
MAX_TLT_PAGES	lib_ccx.h	280;"	d
MAX_TLT_PAGES	telxcc.c	142;"	d	file:
MIDDLE_FONT_SIZE	ccx_decoders_isdb.c	/^	MIDDLE_FONT_SIZE,$/;"	e	enum:fontSize	file:
MIN	ccx_gxf.c	23;"	d	file:
MIN3	utility.c	149;"	d	file:
MODE_FAKE_ROLLUP_1	ccx_decoders_structs.h	/^	MODE_FAKE_ROLLUP_1 = 100$/;"	e	enum:cc_modes
MODE_PAINTON	ccx_decoders_structs.h	/^	MODE_PAINTON = 5,$/;"	e	enum:cc_modes
MODE_POPON	ccx_decoders_structs.h	/^	MODE_POPON = 0,$/;"	e	enum:cc_modes
MODE_ROLLUP_2	ccx_decoders_structs.h	/^	MODE_ROLLUP_2 = 1,$/;"	e	enum:cc_modes
MODE_ROLLUP_3	ccx_decoders_structs.h	/^	MODE_ROLLUP_3 = 2,$/;"	e	enum:cc_modes
MODE_ROLLUP_4	ccx_decoders_structs.h	/^	MODE_ROLLUP_4 = 3,$/;"	e	enum:cc_modes
MODE_TEXT	ccx_decoders_structs.h	/^	MODE_TEXT = 4,$/;"	e	enum:cc_modes
MPEG_CLOCK_FREQ	ccx_common_timing.c	/^int MPEG_CLOCK_FREQ = 90000; \/\/ This "constant" is part of the standard$/;"	v
MediaNumberLType	asf_constants.h	/^	int MediaNumberLType; \/\/ ASF$/;"	m	struct:__anon9
MultiplePayloads	asf_constants.h	/^	int MultiplePayloads; \/\/ ASF$/;"	m	struct:__anon9
NB_LANGUAGE	ccx_common_constants.h	292;"	d
NETWORKING_H	networking.h	2;"	d
NO	ccx_common_constants.h	/^	NO = 0,$/;"	e	enum:__anon20
NO_RESPONCE_INTERVAL	networking.c	34;"	d	file:
NTSC_CC_f1	ccx_common_constants.c	/^	NTSC_CC_f1         = 0,$/;"	e	enum:__anon10	file:
NTSC_CC_f2	ccx_common_constants.c	/^	NTSC_CC_f2         = 1,$/;"	e	enum:__anon10	file:
NUM_BYTES_PER_PACKET	ccx_decoders_xds.c	82;"	d	file:
NUM_XDS_BUFFERS	ccx_decoders_xds.c	81;"	d	file:
NumberOfPayloads	asf_constants.h	/^	int NumberOfPayloads; \/\/ ASF - Number of payloads.$/;"	m	struct:__anon9
OCR_DEBUG	ocr.c	10;"	d	file:
OCR_DEBUG	spupng_encoder.c	8;"	d	file:
OCR_H	ocr.h	2;"	d
ODF_DATE	ccx_common_constants.h	/^	ODF_DATE =3,$/;"	e	enum:ccx_output_date_format
ODF_HHMMSS	ccx_common_constants.h	/^	ODF_HHMMSS = 1,$/;"	e	enum:ccx_output_date_format
ODF_HHMMSSMS	ccx_common_constants.h	/^	ODF_HHMMSSMS = 4, \/\/ HH:MM:SS,MILIS (.srt style)$/;"	e	enum:ccx_output_date_format
ODF_NONE	ccx_common_constants.h	/^	ODF_NONE = 0,$/;"	e	enum:ccx_output_date_format
ODF_SECONDS	ccx_common_constants.h	/^	ODF_SECONDS = 2,$/;"	e	enum:ccx_output_date_format
OK	networking.c	15;"	d	file:
ONEPASS	ccx_common_constants.h	32;"	d
ONE_HALF	dvb_subtitle_decoder.c	38;"	d	file:
OPEN	ccx_common_platform.h	68;"	d
OPEN	ccx_common_platform.h	75;"	d
OPEN	ccx_common_platform.h	94;"	d
O_BINARY	ccx_common_platform.h	110;"	d
OffsetMediaLType	asf_constants.h	/^	int OffsetMediaLType; \/\/ ASF$/;"	m	struct:__anon9
PACKET_START_CODE_MASK	myth.c	36;"	d	file:
PACKET_START_CODE_PREFIX	myth.c	37;"	d	file:
PACK_START_CODE	myth.c	33;"	d	file:
PADDING_STREAM	myth.c	45;"	d	file:
PAGE	telxcc.c	188;"	d	file:
PARITY_8	hamming.h	/^const uint8_t PARITY_8[256] = {$/;"	v
PASSWORD	networking.c	16;"	d	file:
PAT_entry	ts_functions.h	/^struct PAT_entry$/;"	s
PAYEXTNUM	asf_constants.h	49;"	d
PID_buffers	ccx_demuxer.h	/^	struct PSI_buffer *PID_buffers[MAX_PSI_PID];$/;"	m	struct:ccx_demuxer	typeref:struct:ccx_demuxer::PSI_buffer
PIDs_programs	ccx_demuxer.h	/^	struct PMT_entry *PIDs_programs[MAX_PID];$/;"	m	struct:ccx_demuxer	typeref:struct:ccx_demuxer::PMT_entry
PIDs_seen	ccx_demuxer.h	/^	int PIDs_seen[MAX_PID];$/;"	m	struct:ccx_demuxer
PING	networking.c	27;"	d	file:
PING_INTERVAL	networking.c	35;"	d	file:
PKT_EOS	ccx_gxf.c	/^	PKT_EOS         = 0xfb,$/;"	e	enum:__anon15	file:
PKT_FLT	ccx_gxf.c	/^	PKT_FLT         = 0xfc,$/;"	e	enum:__anon15	file:
PKT_MAP	ccx_gxf.c	/^	PKT_MAP         = 0xbc,$/;"	e	enum:__anon15	file:
PKT_MEDIA	ccx_gxf.c	/^	PKT_MEDIA       = 0xbf,$/;"	e	enum:__anon15	file:
PKT_UMF	ccx_gxf.c	/^	PKT_UMF         = 0xfd,$/;"	e	enum:__anon15	file:
PMT_PID	ts_functions.h	/^	unsigned PMT_PID;$/;"	m	struct:PAT_entry
PMT_entry	ts_functions.h	/^struct PMT_entry$/;"	s
PRES_FORMAT_HD	ccx_gxf.c	/^	PRES_FORMAT_HD = 2,$/;"	e	enum:ccx_ad_pres_format	file:
PRES_FORMAT_SD	ccx_gxf.c	/^	PRES_FORMAT_SD = 1,$/;"	e	enum:ccx_ad_pres_format	file:
PRIVATE_STREAM_1	myth.c	44;"	d	file:
PRIVATE_STREAM_2	myth.c	46;"	d	file:
PROGRAM_STREAM_MAP	myth.c	43;"	d	file:
PSI_buffer	ts_functions.h	/^struct PSI_buffer$/;"	s
PTRDIFF_MAX	stdintmsc.h	178;"	d
PTRDIFF_MAX	stdintmsc.h	181;"	d
PTRDIFF_MIN	stdintmsc.h	177;"	d
PTRDIFF_MIN	stdintmsc.h	180;"	d
PacketLType	asf_constants.h	/^	int PacketLType; \/\/ ASF$/;"	m	struct:__anon9
PacketLength	asf_constants.h	/^	uint32_t PacketLength;$/;"	m	struct:__anon9
PacketSize	asf_constants.h	/^	uint32_t PacketSize;$/;"	m	struct:__anon9
PaddingLength	asf_constants.h	/^	uint32_t PaddingLength;$/;"	m	struct:__anon9
PayloadExtPTSEntry	asf_constants.h	/^	int PayloadExtPTSEntry[STREAMNUM];$/;"	m	struct:__anon9
PayloadExtSize	asf_constants.h	/^	int PayloadExtSize[STREAMNUM][PAYEXTNUM];$/;"	m	struct:__anon9
PayloadLType	asf_constants.h	/^	int PayloadLType; \/\/ ASF - Payload Length Type. <>0 for multiple payloads$/;"	m	struct:__anon9
PayloadLength	asf_constants.h	/^	uint32_t PayloadLength; \/\/ ASF - Payload Length$/;"	m	struct:__anon9
PayloadMediaNumber	asf_constants.h	/^	uint32_t PayloadMediaNumber; \/\/ ASF$/;"	m	struct:__anon9
PayloadStreamNumber	asf_constants.h	/^	int PayloadStreamNumber; \/\/ ASF$/;"	m	struct:__anon9
ProcessVBIDataPacket	myth.c	/^void ProcessVBIDataPacket(struct lib_ccx_ctx *ctx, struct cc_subtitle *sub)$/;"	f
RB16	utility.h	11;"	d
RB24	utility.h	13;"	d
RB32	utility.h	9;"	d
REQUEST_BUFFER_CAPACITY	ccx_encoders_common.h	15;"	d
REVERSE_8	hamming.h	/^const uint8_t REVERSE_8[256] = {$/;"	v
RGBA	ccx_decoders_isdb.c	146;"	d	file:
RGBA	dvb_subtitle_decoder.c	182;"	d	file:
RL16	utility.h	10;"	d
RL32	utility.h	8;"	d
ROWS	spupng_encoder.h	10;"	d
ReplicatedLType	asf_constants.h	/^	int ReplicatedLType; \/\/ ASF$/;"	m	struct:__anon9
SCALEBITS	dvb_subtitle_decoder.c	37;"	d	file:
SEQUENCE_END_CODE	myth.c	35;"	d	file:
SFORMAT_CC_LINE	ccx_decoders_structs.h	/^	SFORMAT_CC_LINE,$/;"	e	enum:ccx_eia608_format
SFORMAT_CC_SCREEN	ccx_decoders_structs.h	/^	SFORMAT_CC_SCREEN,$/;"	e	enum:ccx_eia608_format
SFORMAT_XDS	ccx_decoders_structs.h	/^	SFORMAT_XDS$/;"	e	enum:ccx_eia608_format
SIG_ATOMIC_MAX	stdintmsc.h	185;"	d
SIG_ATOMIC_MIN	stdintmsc.h	184;"	d
SIZE_MAX	stdintmsc.h	189;"	d
SIZE_MAX	stdintmsc.h	191;"	d
SMALL_FONT_SIZE	ccx_decoders_isdb.c	/^	SMALL_FONT_SIZE,$/;"	e	enum:fontSize	file:
SORTBUF	ccx_decoders_structs.h	13;"	d
STANDARD_FONT_SIZE	ccx_decoders_isdb.c	/^	STANDARD_FONT_SIZE,$/;"	e	enum:fontSize	file:
STARTBYTESLENGTH	ccx_common_constants.h	38;"	d
STDERR_FILENO	ccx_common_platform.h	24;"	d
STDIN_FILENO	ccx_common_platform.h	22;"	d
STDOUT_FILENO	ccx_common_platform.h	23;"	d
STREAMNUM	asf_constants.h	48;"	d
STREAM_TYPE_AUDIO_AAC	myth.c	62;"	d	file:
STREAM_TYPE_AUDIO_AC3	myth.c	66;"	d	file:
STREAM_TYPE_AUDIO_DTS	myth.c	67;"	d	file:
STREAM_TYPE_AUDIO_MPEG1	myth.c	58;"	d	file:
STREAM_TYPE_AUDIO_MPEG2	myth.c	59;"	d	file:
STREAM_TYPE_PRIVATE_DATA	myth.c	61;"	d	file:
STREAM_TYPE_PRIVATE_SECTION	myth.c	60;"	d	file:
STREAM_TYPE_VIDEO_H264	myth.c	64;"	d	file:
STREAM_TYPE_VIDEO_MPEG1	myth.c	56;"	d	file:
STREAM_TYPE_VIDEO_MPEG2	myth.c	57;"	d	file:
STREAM_TYPE_VIDEO_MPEG4	myth.c	63;"	d	file:
STR_LEN	ccx_gxf.c	22;"	d	file:
SUBLINESIZE	ccx_common_constants.h	37;"	d
SUB_EOD_MARKER	ccx_decoders_structs.h	17;"	d
SUB_ID	myth.c	54;"	d	file:
SUB_STREAMS_CNT	ccx_demuxer.h	11;"	d
SUB_STREAMS_CNT	lib_ccx.h	25;"	d
SYSTEM_HEADER_START_CODE	myth.c	34;"	d	file:
StreamNumberLType	asf_constants.h	/^	int StreamNumberLType; \/\/ ASF$/;"	m	struct:__anon9
StreamProperties	asf_constants.h	/^	asf_data_stream_properties StreamProperties;$/;"	m	struct:__anon9
TELETEXT_CHUNK_LEN	lib_ccx.h	27;"	d
TELL	ccx_common_platform.h	87;"	d
TELL	ccx_common_platform.h	99;"	d
TRACK_AUX	ccx_gxf.c	/^	TRACK_AUX       = 0x4d,$/;"	e	enum:__anon17	file:
TRACK_FPF	ccx_gxf.c	/^	 TRACK_FPF       = 0x52,$/;"	e	enum:__anon17	file:
TRACK_FPS	ccx_gxf.c	/^	TRACK_FPS       = 0x50,$/;"	e	enum:__anon17	file:
TRACK_LINES	ccx_gxf.c	/^	 TRACK_LINES     = 0x51,$/;"	e	enum:__anon17	file:
TRACK_MPG_AUX	ccx_gxf.c	/^	TRACK_MPG_AUX   = 0x4f,$/;"	e	enum:__anon17	file:
TRACK_NAME	ccx_gxf.c	/^	TRACK_NAME      = 0x4c,$/;"	e	enum:__anon17	file:
TRACK_TYPE_AC_3_16b_audio	ccx_gxf.c	/^	TRACK_TYPE_AC_3_16b_audio = 17,$/;"	e	enum:__anon18	file:
TRACK_TYPE_ANCILLARY_DATA	ccx_gxf.c	/^	TRACK_TYPE_ANCILLARY_DATA = 21,$/;"	e	enum:__anon18	file:
TRACK_TYPE_AUDIO_PCM_16	ccx_gxf.c	/^	TRACK_TYPE_AUDIO_PCM_16 = 10,$/;"	e	enum:__anon18	file:
TRACK_TYPE_AUDIO_PCM_24	ccx_gxf.c	/^	TRACK_TYPE_AUDIO_PCM_24 = 9,$/;"	e	enum:__anon18	file:
TRACK_TYPE_COMPRESSED_24B_AUDIO	ccx_gxf.c	/^	TRACK_TYPE_COMPRESSED_24B_AUDIO = 18,$/;"	e	enum:__anon18	file:
TRACK_TYPE_DV_BASED_25MB_525	ccx_gxf.c	/^	TRACK_TYPE_DV_BASED_25MB_525 = 13,$/;"	e	enum:__anon18	file:
TRACK_TYPE_DV_BASED_25MB_625	ccx_gxf.c	/^	TRACK_TYPE_DV_BASED_25MB_625 = 14,$/;"	e	enum:__anon18	file:
TRACK_TYPE_DV_BASED_50MB_525	ccx_gxf.c	/^	TRACK_TYPE_DV_BASED_50MB_525 = 15,$/;"	e	enum:__anon18	file:
TRACK_TYPE_DV_BASED_50_MB_625	ccx_gxf.c	/^	TRACK_TYPE_DV_BASED_50_MB_625 = 16,$/;"	e	enum:__anon18	file:
TRACK_TYPE_MOTION_JPEG_525	ccx_gxf.c	/^	TRACK_TYPE_MOTION_JPEG_525 = 3,$/;"	e	enum:__anon18	file:
TRACK_TYPE_MOTION_JPEG_625	ccx_gxf.c	/^	TRACK_TYPE_MOTION_JPEG_625 = 4,$/;"	e	enum:__anon18	file:
TRACK_TYPE_MPEG1_525	ccx_gxf.c	/^	TRACK_TYPE_MPEG1_525 = 22,$/;"	e	enum:__anon18	file:
TRACK_TYPE_MPEG1_625	ccx_gxf.c	/^	TRACK_TYPE_MPEG1_625 = 23,$/;"	e	enum:__anon18	file:
TRACK_TYPE_MPEG2_525	ccx_gxf.c	/^	TRACK_TYPE_MPEG2_525 = 11,$/;"	e	enum:__anon18	file:
TRACK_TYPE_MPEG2_625	ccx_gxf.c	/^	TRACK_TYPE_MPEG2_625 = 12,$/;"	e	enum:__anon18	file:
TRACK_TYPE_MPEG2_HD	ccx_gxf.c	/^	TRACK_TYPE_MPEG2_HD = 20,$/;"	e	enum:__anon18	file:
TRACK_TYPE_RESERVED	ccx_gxf.c	/^	TRACK_TYPE_RESERVED = 19,$/;"	e	enum:__anon18	file:
TRACK_TYPE_TIME_CODE_525	ccx_gxf.c	/^	TRACK_TYPE_TIME_CODE_525  = 7,$/;"	e	enum:__anon18	file:
TRACK_TYPE_TIME_CODE_625	ccx_gxf.c	/^	TRACK_TYPE_TIME_CODE_625 = 8,$/;"	e	enum:__anon18	file:
TRACK_TYPE_TIME_CODE_HD	ccx_gxf.c	/^	TRACK_TYPE_TIME_CODE_HD = 24,$/;"	e	enum:__anon18	file:
TRACK_VER	ccx_gxf.c	/^	TRACK_VER       = 0x4e,$/;"	e	enum:__anon17	file:
TRANSMISSION_MODE_PARALLEL	telxcc.c	/^	TRANSMISSION_MODE_PARALLEL = 0,$/;"	e	enum:__anon2	file:
TRANSMISSION_MODE_SERIAL	telxcc.c	/^	TRANSMISSION_MODE_SERIAL = 1$/;"	e	enum:__anon2	file:
TS_FUNCTION_H	ts_functions.h	2;"	d
TS_PACKET_PAYLOAD_LENGTH	ccx_common_constants.h	36;"	d
TS_PMT_MAP_SIZE	ccx_demuxer.h	14;"	d
TTXT_COLOURS	telxcc.c	/^static const char* TTXT_COLOURS[8] = {$/;"	v	file:
TeletextCtx	telxcc.c	/^struct TeletextCtx$/;"	s	file:
TotalDataPackets	asf_constants.h	/^	uint32_t TotalDataPackets;$/;"	m	struct:__anon9
UINT16_C	stdintmsc.h	221;"	d
UINT16_MAX	stdintmsc.h	126;"	d
UINT32_C	stdintmsc.h	222;"	d
UINT32_MAX	stdintmsc.h	127;"	d
UINT64_C	stdintmsc.h	223;"	d
UINT64_MAX	ccx_common_platform.h	26;"	d
UINT64_MAX	stdintmsc.h	128;"	d
UINT8_C	stdintmsc.h	220;"	d
UINT8_MAX	stdintmsc.h	125;"	d
UINTMAX_C	stdintmsc.h	227;"	d
UINTMAX_MAX	stdintmsc.h	172;"	d
UINTPTR_MAX	stdintmsc.h	162;"	d
UINTPTR_MAX	stdintmsc.h	166;"	d
UINT_FAST16_MAX	stdintmsc.h	154;"	d
UINT_FAST32_MAX	stdintmsc.h	155;"	d
UINT_FAST64_MAX	stdintmsc.h	156;"	d
UINT_FAST8_MAX	stdintmsc.h	153;"	d
UINT_LEAST16_MAX	stdintmsc.h	140;"	d
UINT_LEAST32_MAX	stdintmsc.h	141;"	d
UINT_LEAST64_MAX	stdintmsc.h	142;"	d
UINT_LEAST8_MAX	stdintmsc.h	139;"	d
UNDEF	ccx_common_constants.h	/^	UNDEF = 0xff$/;"	e	enum:__anon20
UNHAM_8_4	hamming.h	/^const uint8_t UNHAM_8_4[256] = {$/;"	v
UNKNOWN_COMMAND	networking.c	24;"	d	file:
UTF8_BOM	ccx_common_constants.c	/^const unsigned char UTF8_BOM[]={0xef, 0xbb,0xbf};$/;"	v
UTF8_MAX_BYTES	ccx_common_constants.h	39;"	d
VBI_DEBUG	ccx_decoders_vbi.h	5;"	d
VBI_TYPE_CC	myth.c	28;"	d	file:
VBI_TYPE_TELETEXT	myth.c	27;"	d	file:
VBI_TYPE_VPS	myth.c	30;"	d	file:
VBI_TYPE_WSS	myth.c	29;"	d	file:
VERBOSE_ONLY	telxcc.c	161;"	d	file:
VERSION	lib_ccx.h	4;"	d
VIDEO_ID	myth.c	50;"	d	file:
VideoClosedCaptioningFlag	asf_constants.h	/^	int VideoClosedCaptioningFlag;$/;"	m	struct:__anon9
VideoJump	asf_constants.h	/^	int VideoJump; \/\/ Remember a jump in the video timeline$/;"	m	struct:__anon8
VideoStreamMS	asf_constants.h	/^	int VideoStreamMS; \/\/ See ableve, just for video$/;"	m	struct:__anon8
VideoStreamNumber	asf_constants.h	/^	int VideoStreamNumber;$/;"	m	struct:__anon8
WCHAR_MAX	stdintmsc.h	200;"	d
WCHAR_MIN	stdintmsc.h	197;"	d
WF_HORIZONTAL_1280x720	ccx_decoders_isdb.c	/^	WF_HORIZONTAL_1280x720 = 11,$/;"	e	enum:writing_format	file:
WF_HORIZONTAL_1920x1080	ccx_decoders_isdb.c	/^	WF_HORIZONTAL_1920x1080 = 5,$/;"	e	enum:writing_format	file:
WF_HORIZONTAL_720x480	ccx_decoders_isdb.c	/^	WF_HORIZONTAL_720x480 = 9,$/;"	e	enum:writing_format	file:
WF_HORIZONTAL_960x540	ccx_decoders_isdb.c	/^	WF_HORIZONTAL_960x540 = 7,$/;"	e	enum:writing_format	file:
WF_HORIZONTAL_CUSTOM	ccx_decoders_isdb.c	/^	WF_HORIZONTAL_CUSTOM = 100,$/;"	e	enum:writing_format	file:
WF_HORIZONTAL_HIGH_DENSITY	ccx_decoders_isdb.c	/^	WF_HORIZONTAL_HIGH_DENSITY = 2,$/;"	e	enum:writing_format	file:
WF_HORIZONTAL_STD_DENSITY	ccx_decoders_isdb.c	/^	WF_HORIZONTAL_STD_DENSITY = 0,$/;"	e	enum:writing_format	file:
WF_HORIZONTAL_WESTERN_LANG	ccx_decoders_isdb.c	/^	WF_HORIZONTAL_WESTERN_LANG = 4,$/;"	e	enum:writing_format	file:
WF_NONE	ccx_decoders_isdb.c	/^	WF_NONE,$/;"	e	enum:writing_format	file:
WF_VERTICAL_1280x720	ccx_decoders_isdb.c	/^	WF_VERTICAL_1280x720 = 12,$/;"	e	enum:writing_format	file:
WF_VERTICAL_1920x1080	ccx_decoders_isdb.c	/^	WF_VERTICAL_1920x1080 = 6,$/;"	e	enum:writing_format	file:
WF_VERTICAL_720x480	ccx_decoders_isdb.c	/^	WF_VERTICAL_720x480 = 10,$/;"	e	enum:writing_format	file:
WF_VERTICAL_960x540	ccx_decoders_isdb.c	/^	WF_VERTICAL_960x540 = 8,$/;"	e	enum:writing_format	file:
WF_VERTICAL_HIGH_DENSITY	ccx_decoders_isdb.c	/^	WF_VERTICAL_HIGH_DENSITY = 3,$/;"	e	enum:writing_format	file:
WF_VERTICAL_STD_DENSITY	ccx_decoders_isdb.c	/^	WF_VERTICAL_STD_DENSITY = 1,$/;"	e	enum:writing_format	file:
WIN32_LEAN_AND_MEAN	telxcc.c	44;"	d	file:
WINT_MAX	stdintmsc.h	204;"	d
WINT_MIN	stdintmsc.h	203;"	d
WRONG_PASSWORD	networking.c	25;"	d	file:
WRONG_PASSWORD_DELAY	networking.c	32;"	d	file:
WTV_CC_TIMESTAMP_MAGIC	wtv_constants.h	22;"	d
WTV_CC_TIMESTAMP_MAGIC_THRESH	wtv_constants.h	23;"	d
WTV_CHUNK_SIZE	wtv_constants.h	12;"	d
WTV_DATA	wtv_constants.h	5;"	d
WTV_EOF	wtv_constants.h	9;"	d
WTV_HEADER	wtv_constants.h	2;"	d
WTV_MAX_ALLOC	wtv_constants.h	20;"	d
WTV_META_CHUNK_MASK	wtv_constants.h	15;"	d
WTV_META_CHUNK_SIZE	wtv_constants.h	13;"	d
WTV_STREAM	wtv_constants.h	3;"	d
WTV_STREAM2	wtv_constants.h	4;"	d
WTV_STREAM_AUDIO	wtv_constants.h	7;"	d
WTV_STREAM_MSTVCAPTION	wtv_constants.h	8;"	d
WTV_STREAM_VIDEO	wtv_constants.h	6;"	d
WTV_TABLE_ENTRIES	wtv_constants.h	17;"	d
WTV_TIMING	wtv_constants.h	10;"	d
XDSProgramTypes	ccx_decoders_xds.c	/^static const char *XDSProgramTypes[]=$/;"	v	file:
XDS_CLASS_CHANNEL	ccx_decoders_xds.c	46;"	d	file:
XDS_CLASS_CURRENT	ccx_decoders_xds.c	44;"	d	file:
XDS_CLASS_END	ccx_decoders_xds.c	51;"	d	file:
XDS_CLASS_FUTURE	ccx_decoders_xds.c	45;"	d	file:
XDS_CLASS_MISC	ccx_decoders_xds.c	47;"	d	file:
XDS_CLASS_OUT_OF_BAND	ccx_decoders_xds.c	52;"	d	file:
XDS_CLASS_PRIVATE	ccx_decoders_xds.c	50;"	d	file:
XDS_CLASS_PUBLIC	ccx_decoders_xds.c	48;"	d	file:
XDS_CLASS_RESERVED	ccx_decoders_xds.c	49;"	d	file:
XDS_TYPE_ASPECT_RATIO_INFO	ccx_decoders_xds.c	62;"	d	file:
XDS_TYPE_AUDIO_SERVICES	ccx_decoders_xds.c	60;"	d	file:
XDS_TYPE_CALL_LETTERS_AND_CHANNEL	ccx_decoders_xds.c	74;"	d	file:
XDS_TYPE_CGMS	ccx_decoders_xds.c	61;"	d	file:
XDS_TYPE_CONTENT_ADVISORY	ccx_decoders_xds.c	59;"	d	file:
XDS_TYPE_LENGH_AND_CURRENT_TIME	ccx_decoders_xds.c	56;"	d	file:
XDS_TYPE_LOCAL_TIME_ZONE	ccx_decoders_xds.c	79;"	d	file:
XDS_TYPE_NETWORK_NAME	ccx_decoders_xds.c	73;"	d	file:
XDS_TYPE_OUT_OF_BAND_CHANNEL_NUMBER	ccx_decoders_xds.c	80;"	d	file:
XDS_TYPE_PIN_START_TIME	ccx_decoders_xds.c	55;"	d	file:
XDS_TYPE_PROGRAM_DESC_1	ccx_decoders_xds.c	63;"	d	file:
XDS_TYPE_PROGRAM_DESC_2	ccx_decoders_xds.c	64;"	d	file:
XDS_TYPE_PROGRAM_DESC_3	ccx_decoders_xds.c	65;"	d	file:
XDS_TYPE_PROGRAM_DESC_4	ccx_decoders_xds.c	66;"	d	file:
XDS_TYPE_PROGRAM_DESC_5	ccx_decoders_xds.c	67;"	d	file:
XDS_TYPE_PROGRAM_DESC_6	ccx_decoders_xds.c	68;"	d	file:
XDS_TYPE_PROGRAM_DESC_7	ccx_decoders_xds.c	69;"	d	file:
XDS_TYPE_PROGRAM_DESC_8	ccx_decoders_xds.c	70;"	d	file:
XDS_TYPE_PROGRAM_NAME	ccx_decoders_xds.c	57;"	d	file:
XDS_TYPE_PROGRAM_TYPE	ccx_decoders_xds.c	58;"	d	file:
XDS_TYPE_TIME_OF_DAY	ccx_decoders_xds.c	78;"	d	file:
XDS_TYPE_TSID	ccx_decoders_xds.c	75;"	d	file:
XDSclasses	ccx_decoders_xds.c	/^static const char *XDSclasses[]=$/;"	v	file:
XDSclasses_short	ccx_encoders_xds.c	/^static const char *XDSclasses_short[]=$/;"	v	file:
XMLRPC_CHUNK_SIZE	ccx_common_constants.h	41;"	d
YES	ccx_common_constants.h	/^	YES = 1,$/;"	e	enum:__anon20
YUV_TO_RGB1_CCIR	dvb_subtitle_decoder.c	41;"	d	file:
YUV_TO_RGB2_CCIR	dvb_subtitle_decoder.c	51;"	d	file:
Y_N	params_dump.c	191;"	d	file:
Y_N	params_dump.c	391;"	d	file:
ZEROBYTES_SHORTSTARTCODE	avc_functions.c	250;"	d	file:
_BITSTREAM_	bitstream.h	2;"	d
_CCX_DECODERS_708_ENCODING_H_	ccx_decoders_708_encoding.h	2;"	d
_CCX_DECODERS_708_OUTPUT_H_	ccx_decoders_708_output.h	2;"	d
_CCX_ENCODERS_HELPERS_H	ccx_encoders_helpers.h	2;"	d
_CCX_ENCODER_XDS_H	ccx_encoders_xds.h	2;"	d
_CC_COMMON_COMMON	ccx_common_common.h	2;"	d
_CC_COMMON_STRUCTS	ccx_common_structs.h	2;"	d
_CC_DECODER_COMMON	ccx_decoders_common.h	2;"	d
_CC_ENCODER_COMMON_H	ccx_encoders_common.h	2;"	d
_CONFIGURATION_H	configuration.h	2;"	d
_CRT_fmode	telxcc.c	/^int _CRT_fmode = _O_BINARY;$/;"	v
_FFMPEG_INTIGRATION	ffmpeg_intgr.h	2;"	d
_INCLUDE_708_	ccx_decoders_708.h	2;"	d
_LINUX_LIST_H	list.h	9;"	d
_MSC_STDINT_H_	stdintmsc.h	37;"	d
_SPUPNG_ENCODER_H	spupng_encoder.h	2;"	d
_W64	stdintmsc.h	59;"	d
_W64	stdintmsc.h	61;"	d
_WIN32_IE	telxcc.c	46;"	d	file:
_WIN32_WINNT	telxcc.c	45;"	d	file:
__608_SPUPNG_H__	ccx_encoders_spupng.h	2;"	d
__CCX_COMMON_CHAR_ENCODING__	ccx_common_char_encoding.h	2;"	d
__STDC_FORMAT_MACROS	ccx_common_platform.h	14;"	d
__STDC_LIMIT_MACROS	ccx_common_platform.h	45;"	d
__Timing_H__	ccx_common_timing.h	2;"	d
__hlist_del	list.h	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_del	list.h	/^static inline void __list_del(struct list_head * prev, struct list_head * next)$/;"	f
__list_for_each	list.h	248;"	d
__list_splice	list.h	/^static inline void __list_splice(struct list_head *list,$/;"	f
_ccx_dtvcc_write	ccx_decoders_708_output.c	/^void _ccx_dtvcc_write(ccx_dtvcc_writer_ctx *writer, dtvcc_tv_screen *tv, struct encoder_ctx *encoder)$/;"	f
_clock_in	telxcc.c	/^	uint8_t _clock_in; \/\/ clock run in$/;"	m	struct:__anon4	file:
_dtvcc_color_to_hex	ccx_decoders_708_output.c	/^void _dtvcc_color_to_hex(int color, unsigned *hR, unsigned *hG, unsigned *hB)$/;"	f
_dtvcc_compare_win_priorities	ccx_decoders_708.c	/^int _dtvcc_compare_win_priorities(const void *a, const void *b)$/;"	f
_dtvcc_decoder_has_visible_windows	ccx_decoders_708.c	/^int _dtvcc_decoder_has_visible_windows(ccx_dtvcc_service_decoder *decoder)$/;"	f
_dtvcc_decoders_reset	ccx_decoders_708.c	/^void _dtvcc_decoders_reset(ccx_dtvcc_ctx *dtvcc)$/;"	f
_dtvcc_get_win_write_interval	ccx_decoders_708.c	/^void _dtvcc_get_win_write_interval(ccx_dtvcc_window *window, int row_index, int *first, int *last)$/;"	f
_dtvcc_get_write_interval	ccx_decoders_708_output.c	/^void _dtvcc_get_write_interval(dtvcc_tv_screen *tv, int row_index, int *first, int *last)$/;"	f
_dtvcc_handle_C0	ccx_decoders_708.c	/^int _dtvcc_handle_C0(ccx_dtvcc_ctx *dtvcc,$/;"	f
_dtvcc_handle_C0_P16	ccx_decoders_708.c	/^int _dtvcc_handle_C0_P16(ccx_dtvcc_service_decoder *decoder, unsigned char *data) \/\/16-byte chars always have 2 bytes$/;"	f
_dtvcc_handle_C1	ccx_decoders_708.c	/^int _dtvcc_handle_C1(ccx_dtvcc_ctx *dtvcc,$/;"	f
_dtvcc_handle_C2	ccx_decoders_708.c	/^int _dtvcc_handle_C2(ccx_dtvcc_service_decoder *decoder, unsigned char *data, int data_length)$/;"	f
_dtvcc_handle_C3	ccx_decoders_708.c	/^int _dtvcc_handle_C3(ccx_dtvcc_service_decoder *decoder, unsigned char *data, int data_length)$/;"	f
_dtvcc_handle_G0	ccx_decoders_708.c	/^int _dtvcc_handle_G0(ccx_dtvcc_service_decoder *decoder, unsigned char *data, int data_length)$/;"	f
_dtvcc_handle_G1	ccx_decoders_708.c	/^int _dtvcc_handle_G1(ccx_dtvcc_service_decoder *decoder, unsigned char *data, int data_length)$/;"	f
_dtvcc_handle_extended_char	ccx_decoders_708.c	/^int _dtvcc_handle_extended_char(ccx_dtvcc_service_decoder *decoder, unsigned char *data, int data_length)$/;"	f
_dtvcc_is_row_empty	ccx_decoders_708_output.c	/^int _dtvcc_is_row_empty(dtvcc_tv_screen *tv, int row_index)$/;"	f
_dtvcc_is_screen_empty	ccx_decoders_708_output.c	/^int _dtvcc_is_screen_empty(dtvcc_tv_screen *tv)$/;"	f
_dtvcc_is_win_row_empty	ccx_decoders_708.c	/^int _dtvcc_is_win_row_empty(ccx_dtvcc_window *window, int row_index)$/;"	f
_dtvcc_process_character	ccx_decoders_708.c	/^void _dtvcc_process_character(ccx_dtvcc_service_decoder *decoder, ccx_dtvcc_symbol symbol)$/;"	f
_dtvcc_process_cr	ccx_decoders_708.c	/^void _dtvcc_process_cr(ccx_dtvcc_ctx *dtvcc, ccx_dtvcc_service_decoder *decoder)$/;"	f
_dtvcc_process_etx	ccx_decoders_708.c	/^void _dtvcc_process_etx(ccx_dtvcc_service_decoder *decoder)$/;"	f
_dtvcc_process_ff	ccx_decoders_708.c	/^void _dtvcc_process_ff(ccx_dtvcc_service_decoder *decoder)$/;"	f
_dtvcc_process_hcr	ccx_decoders_708.c	/^void _dtvcc_process_hcr(ccx_dtvcc_service_decoder *decoder)$/;"	f
_dtvcc_screen_print	ccx_decoders_708.c	/^void _dtvcc_screen_print(ccx_dtvcc_ctx *dtvcc, ccx_dtvcc_service_decoder *decoder)$/;"	f
_dtvcc_screen_update_time_hide	ccx_decoders_708.c	/^void _dtvcc_screen_update_time_hide(dtvcc_tv_screen *tv, LLONG time)$/;"	f
_dtvcc_screen_update_time_show	ccx_decoders_708.c	/^void _dtvcc_screen_update_time_show(dtvcc_tv_screen *tv, LLONG time)$/;"	f
_dtvcc_tv_clear	ccx_decoders_708.c	/^void _dtvcc_tv_clear(ccx_dtvcc_service_decoder *decoder)$/;"	f
_dtvcc_window_apply_style	ccx_decoders_708.c	/^void _dtvcc_window_apply_style(ccx_dtvcc_window *window, ccx_dtvcc_window_attribs *style)$/;"	f
_dtvcc_window_clear	ccx_decoders_708.c	/^void _dtvcc_window_clear(ccx_dtvcc_service_decoder *decoder, int window_id)$/;"	f
_dtvcc_window_clear_row	ccx_decoders_708.c	/^void _dtvcc_window_clear_row(ccx_dtvcc_window *window, int row_index)$/;"	f
_dtvcc_window_clear_text	ccx_decoders_708.c	/^void _dtvcc_window_clear_text(ccx_dtvcc_window *window)$/;"	f
_dtvcc_window_copy_to_screen	ccx_decoders_708.c	/^void _dtvcc_window_copy_to_screen(ccx_dtvcc_service_decoder *decoder, ccx_dtvcc_window *window)$/;"	f
_dtvcc_window_dump	ccx_decoders_708.c	/^void _dtvcc_window_dump(ccx_dtvcc_service_decoder *decoder, ccx_dtvcc_window *window)$/;"	f
_dtvcc_window_rollup	ccx_decoders_708.c	/^void _dtvcc_window_rollup(ccx_dtvcc_service_decoder *decoder, ccx_dtvcc_window *window)$/;"	f
_dtvcc_window_update_time_hide	ccx_decoders_708.c	/^void _dtvcc_window_update_time_hide(ccx_dtvcc_window *window, struct ccx_common_timing_ctx *timing)$/;"	f
_dtvcc_window_update_time_show	ccx_decoders_708.c	/^void _dtvcc_window_update_time_show(ccx_dtvcc_window *window, struct ccx_common_timing_ctx *timing)$/;"	f
_dtvcc_write_row	ccx_decoders_708_output.c	/^void _dtvcc_write_row(ccx_dtvcc_writer_ctx *writer, dtvcc_tv_screen *tv, int row_index, struct encoder_ctx *encoder)$/;"	f
_dtvcc_write_sami_footer	ccx_decoders_708_output.c	/^void _dtvcc_write_sami_footer(dtvcc_tv_screen *tv, struct encoder_ctx *encoder)$/;"	f
_dtvcc_write_sami_header	ccx_decoders_708_output.c	/^void _dtvcc_write_sami_header(dtvcc_tv_screen *tv, struct encoder_ctx *encoder)$/;"	f
_dtvcc_write_tag_close	ccx_decoders_708_output.c	/^void _dtvcc_write_tag_close(dtvcc_tv_screen *tv, struct encoder_ctx *encoder, int row_index)$/;"	f
_dtvcc_write_tag_open	ccx_decoders_708_output.c	/^void _dtvcc_write_tag_open(dtvcc_tv_screen *tv, struct encoder_ctx *encoder, int row_index)$/;"	f
_framing_code	telxcc.c	/^	uint8_t _framing_code; \/\/ framing code, not needed, ETSI 300 706: const 0xe4$/;"	m	struct:__anon4	file:
_i_bpos	bitstream.h	/^	int _i_bpos;$/;"	m	struct:bitstream
_i_pos	bitstream.h	/^	unsigned char *_i_pos;$/;"	m	struct:bitstream
acps	ccx_decoders_isdb.c	/^	int acps[2];$/;"	m	struct:__anon11	file:
active_services_count	ccx_decoders_708.h	/^	int active_services_count;$/;"	m	struct:ccx_decoder_dtvcc_settings
active_services_count	ccx_decoders_708.h	/^	int active_services_count;$/;"	m	struct:ccx_dtvcc_ctx
activity_header	activity.c	/^void activity_header (void)$/;"	f
activity_input_file_closed	activity.c	/^void activity_input_file_closed (void)$/;"	f
activity_input_file_open	activity.c	/^void activity_input_file_open (const char *filename)$/;"	f
activity_library_process	activity.c	/^void activity_library_process(enum ccx_common_logging_gui message_type, ...)$/;"	f
activity_message	activity.c	/^void activity_message (const char *fmt, ...)$/;"	f
activity_program_number	activity.c	/^void activity_program_number (unsigned program_number)$/;"	f
activity_progress	activity.c	/^void activity_progress (int percentage, int cur_min, int cur_sec)$/;"	f
activity_report_data_read	activity.c	/^void activity_report_data_read (void)$/;"	f
activity_report_version	activity.c	/^void activity_report_version (void)$/;"	f
activity_video_info	activity.c	/^void  activity_video_info (int hor_size,int vert_size,$/;"	f
ad_format	ccx_gxf.c	/^	enum ccx_ad_pres_format ad_format;$/;"	m	struct:ccx_gxf_ancillary_data_track	typeref:enum:ccx_gxf_ancillary_data_track::ccx_ad_pres_format	file:
ad_track	ccx_gxf.c	/^	struct ccx_gxf_ancillary_data_track *ad_track;$/;"	m	struct:ccx_gxf	typeref:struct:ccx_gxf::ccx_gxf_ancillary_data_track	file:
add_built_in_words	ccx_encoders_helpers.c	/^int add_built_in_words(void)$/;"	f
add_cc_sub_text	ccx_common_common.c	/^int add_cc_sub_text(struct cc_subtitle *sub, char *str, LLONG start_time,$/;"	f
add_chunk	wtv_functions.c	/^void add_chunk(struct wtv_chunked_buffer *cb, uint64_t value)$/;"	f
add_current_pts	ccx_common_timing.c	/^void add_current_pts(struct ccx_common_timing_ctx *ctx, LLONG pts)$/;"	f
add_file_sequence	params.c	/^int add_file_sequence (struct ccx_s_options *opt, char *filename)$/;"	f
add_skip_chunks	wtv_functions.c	/^int add_skip_chunks(struct ccx_demuxer *ctx, struct wtv_chunked_buffer *cb, uint32_t offset, uint32_t flag)$/;"	f
add_word	ccx_encoders_helpers.c	/^int add_word(const char *word)$/;"	f
address	telxcc.c	/^	uint8_t address[2];$/;"	m	struct:__anon4	file:
age	ts_functions.h	/^	uint8_t age;$/;"	m	struct:EPG_rating
all_services_charset	ccx_common_option.h	/^	char* all_services_charset;$/;"	m	struct:encoder_cfg
all_stream	ccx_demuxer.h	/^	struct list_head all_stream;$/;"	m	struct:cap_info	typeref:struct:cap_info::list_head
alloc_demuxer_data	ccx_demuxer.c	/^struct demuxer_data* alloc_demuxer_data(void)$/;"	f
allocate_text_node	ccx_decoders_isdb.c	/^static struct ISDBText *allocate_text_node(ISDBSubLayout *ls)$/;"	f	file:
alpha	ccx_encoders_spupng.c	/^static png_byte alpha[10] =$/;"	v	file:
analysed_PMT_once	ccx_demuxer.h	/^	uint8_t analysed_PMT_once:1;$/;"	m	struct:program_info
anchor_hdcc	sequencing.c	/^void anchor_hdcc(struct lib_cc_decode *ctx, int seq)$/;"	f
anchor_horizontal	ccx_decoders_708.h	/^	int anchor_horizontal;$/;"	m	struct:ccx_dtvcc_window
anchor_point	ccx_decoders_708.h	/^	int anchor_point;$/;"	m	struct:ccx_dtvcc_window
anchor_seq_number	ccx_decoders_structs.h	/^	int anchor_seq_number;$/;"	m	struct:lib_cc_decode
anchor_vertical	ccx_decoders_708.h	/^	int anchor_vertical;$/;"	m	struct:ccx_dtvcc_window
ancillary_id	dvb_subtitle_decoder.c	/^	int ancillary_id;$/;"	m	struct:DVBSubContext	file:
ancillary_id	dvb_subtitle_decoder.h	/^	unsigned short ancillary_id[MAX_LANGUAGE_PER_DESC];$/;"	m	struct:dvb_config
api	ocr.c	/^	TessBaseAPI* api;$/;"	m	struct:ocrCtx	file:
append_char	ccx_decoders_isdb.c	/^static int append_char(ISDBSubContext *ctx, const char ch)$/;"	f	file:
append_file_to_queue	params.c	/^int append_file_to_queue (struct ccx_s_options *opt,char *filename)$/;"	f
array_len	ts_functions.h	/^	uint32_t array_len;$/;"	m	struct:EIT_program
array_length	telxcc.c	182;"	d	file:
asf_data	asf_constants.h	/^} asf_data;$/;"	t	typeref:struct:__anon9
asf_data_container	asf_functions.c	/^asf_data asf_data_container;$/;"	v
asf_data_stream_properties	asf_constants.h	/^} asf_data_stream_properties;$/;"	t	typeref:struct:__anon8
asf_getmoredata	asf_functions.c	/^int asf_getmoredata(struct lib_ccx_ctx *ctx, struct demuxer_data **ppdata)$/;"	f
asf_readval	asf_functions.c	/^uint32_t asf_readval(void *val, int ltype)$/;"	f
aspect_ratio	lib_ccx.h	/^	unsigned aspect_ratio;$/;"	m	struct:file_report
aspect_ratio_types	ccx_common_constants.c	/^const char *aspect_ratio_types[16]=$/;"	v
atoi_hex	params.c	/^int atoi_hex (char *s)$/;"	f
atol_size	params.c	/^long atol_size (char *s)$/;"	f
attribs	ccx_decoders_708.h	/^	ccx_dtvcc_window_attribs attribs;$/;"	m	struct:ccx_dtvcc_window
auto_display	ccx_decoders_isdb.c	/^	int auto_display; \/\/ bool. forced to be displayed w\/o user interaction$/;"	m	struct:__anon12	file:
auto_myth	ccx_common_option.h	/^	int auto_myth; \/\/ Use myth-tv mpeg code? 0=no, 1=yes, 2=auto$/;"	m	struct:ccx_s_options
auto_stream	ccx_common_option.h	/^	enum ccx_stream_mode_enum auto_stream;$/;"	m	struct:demuxer_cfg	typeref:enum:demuxer_cfg::ccx_stream_mode_enum
auto_stream	ccx_demuxer.h	/^	enum ccx_stream_mode_enum auto_stream;$/;"	m	struct:ccx_demuxer	typeref:enum:ccx_demuxer::ccx_stream_mode_enum
autodash	ccx_common_option.h	/^	int autodash; \/\/ Add dashes (-) before each speaker automatically?$/;"	m	struct:encoder_cfg
autodash	ccx_encoders_common.h	/^	int autodash; \/\/ Add dashes (-) before each speaker automatically?$/;"	m	struct:encoder_ctx
av	myth.c	/^static AVPacket av;$/;"	v	file:
avc_ctx	avc_functions.h	/^struct avc_ctx$/;"	s
avc_ctx	ccx_decoders_structs.h	/^	struct avc_ctx *avc_ctx;$/;"	m	struct:lib_cc_decode	typeref:struct:lib_cc_decode::avc_ctx
basefilename	lib_ccx.h	/^	char *basefilename; \/\/ Input filename without the extension$/;"	m	struct:lib_ccx_ctx
bcd_page_to_int	telxcc.c	/^uint16_t bcd_page_to_int (uint16_t bcd)$/;"	f
bg_color	ccx_decoders_708.h	/^	int bg_color;$/;"	m	struct:ccx_dtvcc_pen_color
bg_color	ccx_decoders_isdb.c	/^	uint32_t bg_color;$/;"	m	struct:__anon12	file:
bg_opacity	ccx_decoders_708.h	/^	int bg_opacity;$/;"	m	struct:ccx_dtvcc_pen_color
bgcolor	dvb_subtitle_decoder.c	/^	int bgcolor;$/;"	m	struct:DVBSubObjectDisplay	file:
bgcolor	dvb_subtitle_decoder.c	/^	int bgcolor;$/;"	m	struct:DVBSubRegion	file:
binary_concat	ccx_common_option.h	/^	int binary_concat; \/\/ Disabled by -ve or --videoedited$/;"	m	struct:ccx_s_options
binary_concat	lib_ccx.h	/^	int binary_concat; \/\/ Disabled by -ve or --videoedited$/;"	m	struct:lib_ccx_ctx
bitsleft	bitstream.h	/^	int64_t bitsleft;$/;"	m	struct:bitstream
bitstream	bitstream.h	/^struct bitstream$/;"	s
bitstream_get_num	cc_bitstream.c	/^uint64_t bitstream_get_num(struct bitstream *bstr, unsigned bytes, int advance)$/;"	f
bom	lib_ccx.h	/^	uint8_t bom : 1; \/\/ print UTF-8 BOM characters at the beginning of output$/;"	m	struct:ccx_s_teletext_config
bom	telxcc.c	/^	uint8_t bom : 1; \/\/ print UTF-8 BOM characters at the beginning of output$/;"	m	struct:TeletextCtx	file:
bool_t	ccx_common_constants.h	/^} bool_t;$/;"	t	typeref:enum:__anon20
border_color	ccx_decoders_708.h	/^	int border_color;$/;"	m	struct:ccx_dtvcc_window_attribs
border_type	ccx_decoders_708.h	/^	int border_type;$/;"	m	struct:ccx_dtvcc_window_attribs
boxType	stream_functions.c	/^	char boxType[5]; \/\/ Name of the box structure$/;"	m	struct:ccx_stream_mp4_box	file:
bpos	bitstream.h	/^	int bpos;$/;"	m	struct:bitstream
buf	ccx_decoders_isdb.c	/^	char *buf;$/;"	m	struct:ISDBText	file:
buf_size	dvb_subtitle_decoder.c	/^	int buf_size;$/;"	m	struct:DVBSubRegion	file:
buffer	ccx_demuxer.h	/^	unsigned char *buffer;$/;"	m	struct:demuxer_data
buffer	ccx_encoders_common.h	/^	unsigned char *buffer;$/;"	m	struct:encoder_ctx
buffer	dvb_subtitle_decoder.c	/^	const uint8_t *buffer, *buffer_end;$/;"	m	struct:GetBitContext	file:
buffer	ts_functions.h	/^	uint8_t *buffer;$/;"	m	struct:PSI_buffer
buffer	wtv_constants.h	/^	uint8_t* buffer;$/;"	m	struct:wtv_chunked_buffer
buffer1	ccx_decoders_608.h	/^	eia608_screen buffer1;$/;"	m	struct:ccx_decoder_608_context
buffer2	ccx_decoders_608.h	/^	eia608_screen buffer2;$/;"	m	struct:ccx_decoder_608_context
buffer_end	dvb_subtitle_decoder.c	/^	const uint8_t *buffer, *buffer_end;$/;"	m	struct:GetBitContext	file:
buffer_input	ccx_common_option.h	/^	int buffer_input;$/;"	m	struct:ccx_s_options
buffer_length	ts_functions.h	/^	uint32_t buffer_length;$/;"	m	struct:PSI_buffer
buffer_size	wtv_constants.h	/^	uint32_t buffer_size;$/;"	m	struct:wtv_chunked_buffer
bufferdatatype	ccx_demuxer.h	/^	enum ccx_bufferdata_type bufferdatatype;$/;"	m	struct:demuxer_data	typeref:enum:demuxer_data::ccx_bufferdata_type
buffered_get_be16	file_functions.c	/^unsigned short buffered_get_be16(struct ccx_demuxer *ctx)$/;"	f
buffered_get_be32	file_functions.c	/^unsigned int buffered_get_be32(struct ccx_demuxer *ctx)$/;"	f
buffered_get_byte	file_functions.c	/^unsigned char buffered_get_byte (struct ccx_demuxer *ctx)$/;"	f
buffered_get_le16	file_functions.c	/^unsigned short buffered_get_le16(struct ccx_demuxer *ctx)$/;"	f
buffered_get_le32	file_functions.c	/^unsigned int buffered_get_le32(struct ccx_demuxer *ctx)$/;"	f
buffered_read	file_buffer.h	/^static size_t inline buffered_read(struct ccx_demuxer *ctx, unsigned char *buffer, size_t bytes)$/;"	f
buffered_read_byte	file_buffer.h	/^static size_t inline buffered_read_byte(struct ccx_demuxer *ctx, unsigned char *buffer)$/;"	f
buffered_read_opt	file_functions.c	/^size_t buffered_read_opt (struct ccx_demuxer *ctx, unsigned char *buffer, size_t bytes)$/;"	f
buffered_seek	file_functions.c	/^void buffered_seek (struct ccx_demuxer *ctx, int offset)$/;"	f
buffered_skip	file_buffer.h	/^static size_t inline  buffered_skip(struct ccx_demuxer *ctx, unsigned int bytes)$/;"	f
buffered_text	ccx_decoders_isdb.c	/^	struct list_head buffered_text;$/;"	m	struct:__anon13	typeref:struct:__anon13::list_head	file:
build_parity_table	ccx_common_common.c	/^void build_parity_table (void)$/;"	f
bytes	ccx_decoders_xds.c	/^	unsigned char bytes[NUM_BYTES_PER_PACKET]; \/\/ Class + type (repeated for convenience) + data + zero$/;"	m	struct:xds_buffer	file:
bytes_processed_608	ccx_decoders_608.h	/^	long bytes_processed_608; \/\/ To be written ONLY by process_608$/;"	m	struct:ccx_decoder_608_context
bytesinbuffer	ccx_demuxer.h	/^	unsigned int bytesinbuffer; \/\/ Number of bytes we actually have on buffer$/;"	m	struct:ccx_demuxer
bytestream_get_be16	dvb_subtitle_decoder.c	/^static __inline unsigned int bytestream_get_be16(const uint8_t **b)$/;"	f	file:
bytestream_get_byte	dvb_subtitle_decoder.c	/^static __inline unsigned int bytestream_get_byte(const uint8_t **b)$/;"	f	file:
calculate_ms_gop_time	ccx_common_timing.c	/^void calculate_ms_gop_time (struct gop_time_code *g)$/;"	f
cap_info	ccx_demuxer.h	/^struct cap_info$/;"	s
capacity	ccx_encoders_common.h	/^	unsigned int capacity;$/;"	m	struct:encoder_ctx
capbuf	ccx_demuxer.h	/^	unsigned char *capbuf;$/;"	m	struct:cap_info
capbuflen	ccx_demuxer.h	/^	long capbuflen; \/\/ Bytes read in capbuf$/;"	m	struct:cap_info
capbufsize	ccx_demuxer.h	/^	long capbufsize;$/;"	m	struct:cap_info
capitalize	ccx_encoders_helpers.c	/^void capitalize(struct encoder_ctx *context, int line_num, struct eia608_screen *data)$/;"	f
categories	ts_functions.h	/^	uint8_t *categories;$/;"	m	struct:EPG_event
cb_708	ccx_common_timing.c	/^int cb_field1, cb_field2, cb_708;$/;"	v
cb_field1	ccx_common_timing.c	/^int cb_field1, cb_field2, cb_708;$/;"	v
cb_field2	ccx_common_timing.c	/^int cb_field1, cb_field2, cb_708;$/;"	v
cc608_build_parity_table	ccx_common_common.c	/^void cc608_build_parity_table(int *parity_table)$/;"	f
cc608_good_parity	myth.c	/^static int cc608_good_parity(const int *parity_table, unsigned int data)$/;"	f	file:
cc608_parity	ccx_common_common.c	/^int cc608_parity(unsigned int byte)$/;"	f
cc608_parity_table	ccx_common_common.c	/^int cc608_parity_table[256];$/;"	v
cc_bitmap	ccx_decoders_structs.h	/^struct cc_bitmap$/;"	s
cc_buffer_saved	avc_functions.h	/^	int cc_buffer_saved; \/\/ Was the CC buffer saved after it was last updated?$/;"	m	struct:avc_ctx
cc_channel	ccx_common_option.h	/^	int cc_channel; \/\/ Channel we want to dump in srt mode$/;"	m	struct:ccx_s_options
cc_channel	ccx_decoders_structs.h	/^	int cc_channel; \/\/ Channel we want to dump in srt mode$/;"	m	struct:ccx_decoders_common_settings_t
cc_channels	ccx_decoders_608.h	/^	uint8_t cc_channels[4];$/;"	m	struct:ccx_decoder_608_report
cc_count	avc_functions.h	/^	unsigned char cc_count;$/;"	m	struct:avc_ctx
cc_count	ccx_decoders_708.h	/^	int cc_count;$/;"	m	struct:ccx_dtvcc_service_decoder
cc_count	ccx_decoders_708.h	/^	unsigned int cc_count;$/;"	m	struct:dtvcc_tv_screen
cc_data	avc_functions.h	/^	unsigned char *cc_data;$/;"	m	struct:avc_ctx
cc_data_count	ccx_decoders_structs.h	/^	int cc_data_count[SORTBUF];$/;"	m	struct:lib_cc_decode
cc_data_pkts	ccx_decoders_structs.h	/^	unsigned char cc_data_pkts[SORTBUF][10*31*3+1]; \/\/ *10, because MP4 seems to have different limits$/;"	m	struct:lib_cc_decode
cc_databufsize	avc_functions.h	/^	long cc_databufsize;$/;"	m	struct:avc_ctx
cc_fts	ccx_decoders_structs.h	/^	LLONG cc_fts[SORTBUF];$/;"	m	struct:lib_cc_decode
cc_map	telxcc.c	/^	uint8_t cc_map[256];$/;"	m	struct:TeletextCtx	file:
cc_modes	ccx_decoders_structs.h	/^enum cc_modes$/;"	g
cc_stats	ccx_decoders_structs.h	/^	int cc_stats[4];$/;"	m	struct:lib_cc_decode
cc_subtitle	ccx_common_structs.h	/^struct cc_subtitle$/;"	s
cc_to_stdout	ccx_common_option.h	/^	int cc_to_stdout; \/\/ If this is set to 1, the stdout will be flushed when data was written to the screen during a process_608 call.$/;"	m	struct:ccx_s_options
cc_to_stdout	ccx_common_option.h	/^	int cc_to_stdout; \/\/ If this is set to 1, the stdout will be flushed when data was written to the screen during a process_608 call.$/;"	m	struct:encoder_cfg
cc_to_stdout	ccx_decoders_608.h	/^	int cc_to_stdout; \/\/ If this is set to 1, the stdout will be flushed when data was written to the screen during a process_608 call.$/;"	m	struct:ccx_decoder_608_context
cc_to_stdout	ccx_decoders_structs.h	/^	int cc_to_stdout;$/;"	m	struct:ccx_decoders_common_settings_t
cc_to_stdout	lib_ccx.h	/^	int cc_to_stdout; \/\/ If 1, captions go to stdout instead of file$/;"	m	struct:lib_ccx_ctx
cc_types	ccx_common_constants.c	/^const char *cc_types[4] =$/;"	v
ccblocks_in_avc_lost	avc_functions.h	/^	int ccblocks_in_avc_lost;$/;"	m	struct:avc_ctx
ccblocks_in_avc_total	avc_functions.h	/^	int ccblocks_in_avc_total;$/;"	m	struct:avc_ctx
ccc	ccx_decoders_isdb.c	/^	enum isdb_CC_composition ccc;$/;"	m	struct:__anon11	typeref:enum:__anon11::isdb_CC_composition	file:
ccounter	ts_functions.h	/^	uint32_t ccounter;$/;"	m	struct:PSI_buffer
cctolower	ccx_common_char_encoding.c	/^unsigned char cctolower (unsigned char c)$/;"	f
cctoupper	ccx_common_char_encoding.c	/^unsigned char cctoupper (unsigned char c)$/;"	f
ccx_ad_pres_format	ccx_gxf.c	/^typedef enum ccx_ad_pres_format$/;"	g	file:
ccx_avc_nal_types	ccx_common_constants.h	/^enum ccx_avc_nal_types$/;"	g
ccx_boundary_time	ccx_common_timing.h	/^struct ccx_boundary_time$/;"	s
ccx_bufferdata_type	ccx_common_constants.h	/^enum ccx_bufferdata_type$/;"	g
ccx_code_type	ccx_common_constants.h	/^enum ccx_code_type$/;"	g
ccx_common_logging	lib_ccx.c	/^struct ccx_common_logging_t ccx_common_logging;$/;"	v	typeref:struct:ccx_common_logging_t
ccx_common_logging_gui	ccx_common_structs.h	/^enum ccx_common_logging_gui {$/;"	g
ccx_common_logging_t	ccx_common_structs.h	/^struct ccx_common_logging_t {$/;"	s
ccx_common_timing_ctx	ccx_common_timing.h	/^struct ccx_common_timing_ctx$/;"	s
ccx_common_timing_init	ccx_common_timing.c	/^void ccx_common_timing_init(LLONG *file_position,int no_sync)$/;"	f
ccx_common_timing_settings	ccx_common_timing.c	/^struct ccx_common_timing_settings_t ccx_common_timing_settings;$/;"	v	typeref:struct:ccx_common_timing_settings_t
ccx_common_timing_settings_t	ccx_common_timing.h	/^struct ccx_common_timing_settings_t$/;"	s
ccx_datasource	ccx_common_constants.h	/^enum ccx_datasource$/;"	g
ccx_debug_message_types	ccx_common_constants.h	/^enum ccx_debug_message_types$/;"	g
ccx_decoder_608_color_code	ccx_decoders_608.h	/^typedef enum ccx_decoder_608_color_code$/;"	g
ccx_decoder_608_color_code	ccx_decoders_608.h	/^} ccx_decoder_608_color_code;$/;"	t	typeref:enum:ccx_decoder_608_color_code
ccx_decoder_608_context	ccx_decoders_608.h	/^typedef struct ccx_decoder_608_context$/;"	s
ccx_decoder_608_context	ccx_decoders_608.h	/^} ccx_decoder_608_context;$/;"	t	typeref:struct:ccx_decoder_608_context
ccx_decoder_608_dinit_library	ccx_decoders_608.c	/^void ccx_decoder_608_dinit_library(void **ctx)$/;"	f
ccx_decoder_608_init_library	ccx_decoders_608.c	/^ccx_decoder_608_context* ccx_decoder_608_init_library(struct ccx_decoder_608_settings *settings, int channel,$/;"	f
ccx_decoder_608_report	ccx_decoders_608.h	/^struct ccx_decoder_608_report$/;"	s
ccx_decoder_608_settings	ccx_decoders_608.h	/^typedef struct ccx_decoder_608_settings$/;"	s
ccx_decoder_608_settings	ccx_decoders_608.h	/^} ccx_decoder_608_settings;$/;"	t	typeref:struct:ccx_decoder_608_settings
ccx_decoder_dtvcc_report	ccx_decoders_708.h	/^typedef struct ccx_decoder_dtvcc_report$/;"	s
ccx_decoder_dtvcc_report	ccx_decoders_708.h	/^} ccx_decoder_dtvcc_report;$/;"	t	typeref:struct:ccx_decoder_dtvcc_report
ccx_decoder_dtvcc_settings	ccx_decoders_708.h	/^typedef struct ccx_decoder_dtvcc_settings$/;"	s
ccx_decoder_dtvcc_settings	ccx_decoders_708.h	/^} ccx_decoder_dtvcc_settings;$/;"	t	typeref:struct:ccx_decoder_dtvcc_settings
ccx_decoder_vbi_cfg	ccx_decoders_vbi.h	/^struct ccx_decoder_vbi_cfg$/;"	s
ccx_decoder_vbi_ctx	ccx_decoders_vbi.h	/^struct ccx_decoder_vbi_ctx$/;"	s
ccx_decoders_common_settings_t	ccx_decoders_structs.h	/^struct ccx_decoders_common_settings_t$/;"	s
ccx_decoders_xds_context	ccx_decoders_xds.c	/^typedef struct ccx_decoders_xds_context$/;"	s	file:
ccx_decoders_xds_context_t	ccx_decoders_xds.c	/^} ccx_decoders_xds_context_t;$/;"	t	typeref:struct:ccx_decoders_xds_context	file:
ccx_decoders_xds_init_library	ccx_decoders_xds.c	/^struct ccx_decoders_xds_context *ccx_decoders_xds_init_library(struct ccx_common_timing_ctx *timing)$/;"	f
ccx_demux_report	ccx_demuxer.h	/^struct ccx_demux_report$/;"	s
ccx_demuxer	ccx_demuxer.h	/^struct ccx_demuxer$/;"	s
ccx_demuxer_close	ccx_demuxer.c	/^static void ccx_demuxer_close(struct ccx_demuxer *ctx)$/;"	f	file:
ccx_demuxer_delete	ccx_demuxer.c	/^void ccx_demuxer_delete(struct ccx_demuxer **ctx)$/;"	f
ccx_demuxer_get_stream_mode	ccx_demuxer.c	/^static int ccx_demuxer_get_stream_mode(struct ccx_demuxer *ctx)$/;"	f	file:
ccx_demuxer_getfilesize	ccx_demuxer.c	/^LLONG ccx_demuxer_getfilesize (struct ccx_demuxer *ctx)$/;"	f
ccx_demuxer_isopen	ccx_demuxer.c	/^static int ccx_demuxer_isopen(struct ccx_demuxer *ctx)$/;"	f	file:
ccx_demuxer_open	ccx_demuxer.c	/^static int ccx_demuxer_open(struct ccx_demuxer *ctx, const char *file)$/;"	f	file:
ccx_demuxer_print_cfg	ccx_demuxer.c	/^static void ccx_demuxer_print_cfg(struct ccx_demuxer *ctx)$/;"	f	file:
ccx_demuxer_reset	ccx_demuxer.c	/^static void ccx_demuxer_reset(struct ccx_demuxer *ctx)$/;"	f	file:
ccx_demuxer_write_es	ccx_demuxer.c	/^int ccx_demuxer_write_es(struct ccx_demuxer *ctx, unsigned char* buf, size_t len)$/;"	f
ccx_dtvcc_clear_packet	ccx_decoders_708.c	/^void ccx_dtvcc_clear_packet(ccx_dtvcc_ctx *ctx)$/;"	f
ccx_dtvcc_ctx	ccx_decoders_708.h	/^typedef struct ccx_dtvcc_ctx$/;"	s
ccx_dtvcc_ctx	ccx_decoders_708.h	/^} ccx_dtvcc_ctx;$/;"	t	typeref:struct:ccx_dtvcc_ctx
ccx_dtvcc_decoder_flush	ccx_decoders_708.c	/^void ccx_dtvcc_decoder_flush(ccx_dtvcc_ctx *dtvcc, ccx_dtvcc_service_decoder *decoder)$/;"	f
ccx_dtvcc_default_pen_attribs	ccx_decoders_708.c	/^ccx_dtvcc_pen_attribs ccx_dtvcc_default_pen_attribs =$/;"	v
ccx_dtvcc_default_pen_color	ccx_decoders_708.c	/^ccx_dtvcc_pen_color ccx_dtvcc_default_pen_color =$/;"	v
ccx_dtvcc_free	ccx_dtvcc.c	/^void ccx_dtvcc_free(ccx_dtvcc_ctx **ctx_ptr)$/;"	f
ccx_dtvcc_init	ccx_dtvcc.c	/^ccx_dtvcc_ctx *ccx_dtvcc_init(struct ccx_decoder_dtvcc_settings *opts)$/;"	f
ccx_dtvcc_pen_anchor_point	ccx_decoders_708.h	/^enum ccx_dtvcc_pen_anchor_point$/;"	g
ccx_dtvcc_pen_attribs	ccx_decoders_708.h	/^typedef struct ccx_dtvcc_pen_attribs$/;"	s
ccx_dtvcc_pen_attribs	ccx_decoders_708.h	/^} ccx_dtvcc_pen_attribs;$/;"	t	typeref:struct:ccx_dtvcc_pen_attribs
ccx_dtvcc_pen_color	ccx_decoders_708.h	/^typedef struct ccx_dtvcc_pen_color$/;"	s
ccx_dtvcc_pen_color	ccx_decoders_708.h	/^} ccx_dtvcc_pen_color;$/;"	t	typeref:struct:ccx_dtvcc_pen_color
ccx_dtvcc_pen_edge	ccx_decoders_708.h	/^enum ccx_dtvcc_pen_edge$/;"	g
ccx_dtvcc_pen_font_style	ccx_decoders_708.h	/^enum ccx_dtvcc_pen_font_style$/;"	g
ccx_dtvcc_pen_offset	ccx_decoders_708.h	/^enum ccx_dtvcc_pen_offset$/;"	g
ccx_dtvcc_pen_size	ccx_decoders_708.h	/^enum ccx_dtvcc_pen_size$/;"	g
ccx_dtvcc_pen_text_tag	ccx_decoders_708.h	/^enum ccx_dtvcc_pen_text_tag$/;"	g
ccx_dtvcc_predefined_window_styles	ccx_decoders_708.c	/^ccx_dtvcc_window_attribs ccx_dtvcc_predefined_window_styles[] =$/;"	v
ccx_dtvcc_process_current_packet	ccx_decoders_708.c	/^void ccx_dtvcc_process_current_packet(ccx_dtvcc_ctx *dtvcc)$/;"	f
ccx_dtvcc_process_data	ccx_dtvcc.c	/^void ccx_dtvcc_process_data(struct lib_cc_decode *ctx,$/;"	f
ccx_dtvcc_process_service_block	ccx_decoders_708.c	/^void ccx_dtvcc_process_service_block(ccx_dtvcc_ctx *dtvcc,$/;"	f
ccx_dtvcc_service_decoder	ccx_decoders_708.h	/^typedef struct ccx_dtvcc_service_decoder$/;"	s
ccx_dtvcc_service_decoder	ccx_decoders_708.h	/^} ccx_dtvcc_service_decoder;$/;"	t	typeref:struct:ccx_dtvcc_service_decoder
ccx_dtvcc_symbol	ccx_decoders_708.h	/^typedef struct ccx_dtvcc_symbol$/;"	s
ccx_dtvcc_symbol	ccx_decoders_708.h	/^} ccx_dtvcc_symbol;$/;"	t	typeref:struct:ccx_dtvcc_symbol
ccx_dtvcc_window	ccx_decoders_708.h	/^typedef struct ccx_dtvcc_window$/;"	s
ccx_dtvcc_window	ccx_decoders_708.h	/^} ccx_dtvcc_window;$/;"	t	typeref:struct:ccx_dtvcc_window
ccx_dtvcc_window_attribs	ccx_decoders_708.h	/^typedef struct ccx_dtvcc_window_attribs$/;"	s
ccx_dtvcc_window_attribs	ccx_decoders_708.h	/^} ccx_dtvcc_window_attribs;$/;"	t	typeref:struct:ccx_dtvcc_window_attribs
ccx_dtvcc_window_border	ccx_decoders_708.h	/^enum ccx_dtvcc_window_border$/;"	g
ccx_dtvcc_window_ed	ccx_decoders_708.h	/^enum ccx_dtvcc_window_ed \/\/Effect Direction$/;"	g
ccx_dtvcc_window_fo	ccx_decoders_708.h	/^enum ccx_dtvcc_window_fo \/\/Fill Opacity$/;"	g
ccx_dtvcc_window_justify	ccx_decoders_708.h	/^enum ccx_dtvcc_window_justify$/;"	g
ccx_dtvcc_window_pd	ccx_decoders_708.h	/^enum ccx_dtvcc_window_pd \/\/Print Direction$/;"	g
ccx_dtvcc_window_sd	ccx_decoders_708.h	/^enum ccx_dtvcc_window_sd \/\/Scroll Direction$/;"	g
ccx_dtvcc_window_sde	ccx_decoders_708.h	/^enum ccx_dtvcc_window_sde \/\/Scroll Display Effect$/;"	g
ccx_dtvcc_windows_reset	ccx_decoders_708.c	/^void ccx_dtvcc_windows_reset(ccx_dtvcc_service_decoder *decoder)$/;"	f
ccx_dtvcc_write_debug	ccx_decoders_708_output.c	/^void ccx_dtvcc_write_debug(dtvcc_tv_screen *tv)$/;"	f
ccx_dtvcc_write_done	ccx_decoders_708_output.c	/^void ccx_dtvcc_write_done(dtvcc_tv_screen *tv, struct encoder_ctx *encoder)$/;"	f
ccx_dtvcc_write_sami	ccx_decoders_708_output.c	/^void ccx_dtvcc_write_sami(ccx_dtvcc_writer_ctx *writer, dtvcc_tv_screen *tv, struct encoder_ctx *encoder)$/;"	f
ccx_dtvcc_write_srt	ccx_decoders_708_output.c	/^void ccx_dtvcc_write_srt(ccx_dtvcc_writer_ctx *writer, dtvcc_tv_screen *tv, struct encoder_ctx *encoder)$/;"	f
ccx_dtvcc_write_transcript	ccx_decoders_708_output.c	/^void ccx_dtvcc_write_transcript(ccx_dtvcc_writer_ctx *writer, dtvcc_tv_screen *tv, struct encoder_ctx *encoder)$/;"	f
ccx_dtvcc_writer_cleanup	ccx_decoders_708_output.c	/^void ccx_dtvcc_writer_cleanup(ccx_dtvcc_writer_ctx *writer)$/;"	f
ccx_dtvcc_writer_ctx	ccx_encoders_common.h	/^typedef struct ccx_dtvcc_writer_ctx$/;"	s
ccx_dtvcc_writer_ctx	ccx_encoders_common.h	/^} ccx_dtvcc_writer_ctx;$/;"	t	typeref:struct:ccx_dtvcc_writer_ctx
ccx_dtvcc_writer_init	ccx_decoders_708_output.c	/^void ccx_dtvcc_writer_init(ccx_dtvcc_writer_ctx *writer,$/;"	f
ccx_dtvcc_writer_output	ccx_decoders_708_output.c	/^void ccx_dtvcc_writer_output(ccx_dtvcc_writer_ctx *writer, dtvcc_tv_screen *tv, struct encoder_ctx *encoder)$/;"	f
ccx_eia608_format	ccx_decoders_structs.h	/^enum ccx_eia608_format$/;"	g
ccx_encoders_default_transcript_settings	ccx_encoders_common.c	/^ccx_encoders_transcript_format ccx_encoders_default_transcript_settings =$/;"	v
ccx_encoders_helpers_perform_shellsort_words	ccx_encoders_helpers.c	/^void ccx_encoders_helpers_perform_shellsort_words(void)$/;"	f
ccx_encoders_helpers_settings_t	ccx_encoders_helpers.h	/^struct ccx_encoders_helpers_settings_t {$/;"	s
ccx_encoders_transcript_format	ccx_encoders_structs.h	/^typedef struct ccx_encoders_transcript_format {$/;"	s
ccx_encoders_transcript_format	ccx_encoders_structs.h	/^} ccx_encoders_transcript_format;$/;"	t	typeref:struct:ccx_encoders_transcript_format
ccx_encoding_type	ccx_common_constants.h	/^enum ccx_encoding_type$/;"	g
ccx_frame_type	ccx_common_constants.h	/^enum ccx_frame_type$/;"	g
ccx_gxf	ccx_gxf.c	/^struct ccx_gxf$/;"	s	file:
ccx_gxf_ancillary_data_track	ccx_gxf.c	/^struct ccx_gxf_ancillary_data_track$/;"	s	file:
ccx_gxf_delete	ccx_gxf.c	/^void ccx_gxf_delete(struct ccx_demuxer *arg)$/;"	f
ccx_gxf_getmoredata	ccx_gxf.c	/^int ccx_gxf_getmoredata(struct ccx_demuxer *ctx, struct demuxer_data **ppdata)$/;"	f
ccx_gxf_init	ccx_gxf.c	/^struct ccx_gxf *ccx_gxf_init(struct ccx_demuxer *arg)$/;"	f
ccx_gxf_probe	ccx_gxf.c	/^int ccx_gxf_probe(unsigned char *buf, int len)$/;"	f
ccx_gxf_video_track	ccx_gxf.c	/^struct ccx_gxf_video_track$/;"	s	file:
ccx_mpeg_descriptor	ccx_common_constants.h	/^enum ccx_mpeg_descriptor$/;"	g
ccx_offsetof	list.h	21;"	d
ccx_output_date_format	ccx_common_constants.h	/^enum ccx_output_date_format$/;"	g
ccx_output_format	ccx_common_constants.h	/^enum ccx_output_format$/;"	g
ccx_rational	utility.h	/^struct ccx_rational$/;"	s
ccx_s_mp4Cfg	lib_ccx.h	/^struct ccx_s_mp4Cfg$/;"	s
ccx_s_options	ccx_common_option.h	/^struct ccx_s_options \/\/ Options from user parameters$/;"	s
ccx_s_teletext_config	lib_ccx.h	/^struct ccx_s_teletext_config$/;"	s
ccx_s_write	ccx_encoders_structs.h	/^struct ccx_s_write$/;"	s
ccx_stream_mode_enum	ccx_common_constants.h	/^enum ccx_stream_mode_enum$/;"	g
ccx_stream_mp4_box	stream_functions.c	/^typedef struct ccx_stream_mp4_box$/;"	s	file:
ccx_stream_mp4_box	stream_functions.c	/^} ccx_stream_mp4_box;$/;"	t	typeref:struct:ccx_stream_mp4_box	file:
ccx_stream_mp4_boxes	stream_functions.c	/^ccx_stream_mp4_box ccx_stream_mp4_boxes[16] = {$/;"	v
ccx_stream_type	ccx_common_constants.h	/^enum ccx_stream_type$/;"	g
ccx_strstr_ignorespace	ccx_decoders_isdb.c	/^static int ccx_strstr_ignorespace(const unsigned char *str1, const unsigned char *str2)$/;"	f	file:
cd	ccx_encoders_common.h	/^	iconv_t cd;$/;"	m	struct:ccx_dtvcc_writer_ctx
cdp	ccx_gxf.c	/^	unsigned char *cdp;$/;"	m	struct:ccx_gxf	file:
cdp_len	ccx_gxf.c	/^	size_t cdp_len;$/;"	m	struct:ccx_gxf	file:
cdp_section_type	ccx_common_constants.h	/^enum cdp_section_type$/;"	g
cell_spacing	ccx_decoders_isdb.c	/^	} cell_spacing;$/;"	m	struct:__anon11	typeref:struct:__anon11::spacing	file:
cfg_no_rollup	ccx_decoders_isdb.c	/^	int cfg_no_rollup;$/;"	m	struct:__anon13	file:
change_ascii_encoding	ccx_encoders_common.c	/^int change_ascii_encoding(unsigned char* dest, unsigned char* src, int len, enum ccx_encoding_type out_enc)$/;"	f
change_latin1_encoding	ccx_encoders_common.c	/^int change_latin1_encoding(unsigned char* dest, unsigned char* src, int len, enum ccx_encoding_type out_enc)$/;"	f
change_timebase	utility.c	/^LLONG change_timebase(LLONG val, struct ccx_rational cur_tb, struct ccx_rational dest_tb)$/;"	f
change_unicode_encoding	ccx_encoders_common.c	/^int change_unicode_encoding(unsigned char* dest, unsigned char* src, int len, enum ccx_encoding_type out_enc)$/;"	f
change_utf8_encoding	ccx_encoders_common.c	/^int change_utf8_encoding(unsigned char* dest, unsigned char* src, int len, enum ccx_encoding_type out_enc)$/;"	f
channel	ccx_decoders_608.h	/^	int channel; \/\/ Currently selected channel$/;"	m	struct:ccx_decoder_608_context
channel	ccx_decoders_structs.h	/^	int channel; \/\/ Currently selected channel$/;"	m	struct:eia608_screen
character	telxcc.c	/^	uint16_t character;$/;"	m	struct:__anon5	file:
characters	ccx_decoders_structs.h	/^	unsigned char characters[15][33];$/;"	m	struct:eia608_screen
characters	telxcc.c	/^	uint16_t characters[13];$/;"	m	struct:__anon7	file:
chars	ccx_decoders_708.h	/^	ccx_dtvcc_symbol chars[CCX_DTVCC_SCREENGRID_ROWS][CCX_DTVCC_SCREENGRID_COLUMNS];$/;"	m	struct:dtvcc_tv_screen
check_channel	ccx_decoders_608.c	/^int check_channel(unsigned char c1, ccx_decoder_608_context *context)$/;"	f
check_password	networking.c	/^int check_password(int fd, const char *pwd)$/;"	f
check_ret	ccx_encoders_common.c	1053;"	d	file:
check_roll_up	ccx_decoders_608.c	/^int check_roll_up(ccx_decoder_608_context *context)$/;"	f
check_stream_id	wtv_functions.c	/^int check_stream_id(int stream_id, int video_streams[], int num_streams)$/;"	f
check_trans_tn_intensity	ocr.c	/^static int check_trans_tn_intensity(const void *p1, const void *p2, void *arg)$/;"	f	file:
chunk	wtv_constants.h	/^	uint32_t chunk;$/;"	m	struct:wtv_chunked_buffer
cinfo_cremation	ts_functions.c	/^void cinfo_cremation(struct ccx_demuxer *ctx, struct demuxer_data **data)$/;"	f
cinfo_tree	ccx_demuxer.h	/^	struct cap_info cinfo_tree;$/;"	m	struct:ccx_demuxer	typeref:struct:ccx_demuxer::cap_info
clear_PMT_array	ts_tables.c	/^void clear_PMT_array (struct ccx_demuxer *ctx)$/;"	f
clear_eia608_cc_buffer	ccx_decoders_608.c	/^void clear_eia608_cc_buffer(ccx_decoder_608_context *context, struct eia608_screen *data)$/;"	f
clear_xds_buffer	ccx_decoders_xds.c	/^void clear_xds_buffer (struct ccx_decoders_xds_context *ctx, int num)$/;"	f
close	ccx_demuxer.h	/^	void (*close)(struct ccx_demuxer *ctx);$/;"	m	struct:ccx_demuxer
close_input_file	file_functions.c	/^void close_input_file (struct lib_ccx_ctx *ctx)$/;"	f
close_tag	ccx_encoders_helpers.c	/^unsigned char *close_tag(struct encoder_ctx *ctx, unsigned char *buffer, char *tagstack, char tagtype, int *punderlined, int *pitalics, int *pchanged_font)$/;"	f
clut	dvb_subtitle_decoder.c	/^	int clut;$/;"	m	struct:DVBSubRegion	file:
clut16	dvb_subtitle_decoder.c	/^	uint32_t clut16[16];$/;"	m	struct:DVBSubCLUT	file:
clut256	dvb_subtitle_decoder.c	/^	uint32_t clut256[256];$/;"	m	struct:DVBSubCLUT	file:
clut4	dvb_subtitle_decoder.c	/^	uint32_t clut4[4];$/;"	m	struct:DVBSubCLUT	file:
clut_high_idx	ccx_decoders_isdb.c	/^	uint8_t clut_high_idx; \/\/ color = default_clut[high_idx << 4 | low_idx]$/;"	m	struct:__anon12	file:
clut_list	dvb_subtitle_decoder.c	/^	DVBSubCLUT *clut_list;$/;"	m	struct:DVBSubContext	file:
cm	dvb_subtitle_decoder.c	87;"	d	file:
code	ccx_decoders_708.h	/^	int code;$/;"	m	struct:CCX_DTVCC_S_COMMANDS_C1
codec	ccx_common_option.h	/^	enum ccx_code_type codec;$/;"	m	struct:demuxer_cfg	typeref:enum:demuxer_cfg::ccx_code_type
codec	ccx_decoders_structs.h	/^	enum ccx_code_type codec;$/;"	m	struct:ccx_decoders_common_settings_t	typeref:enum:ccx_decoders_common_settings_t::ccx_code_type
codec	ccx_decoders_structs.h	/^	enum ccx_code_type codec;$/;"	m	struct:lib_cc_decode	typeref:enum:lib_cc_decode::ccx_code_type
codec	ccx_demuxer.h	/^	enum ccx_code_type codec;$/;"	m	struct:cap_info	typeref:enum:cap_info::ccx_code_type
codec	ccx_demuxer.h	/^	enum ccx_code_type codec;$/;"	m	struct:ccx_demuxer	typeref:enum:ccx_demuxer::ccx_code_type
codec	ccx_demuxer.h	/^	enum ccx_code_type codec;$/;"	m	struct:demuxer_data	typeref:enum:demuxer_data::ccx_code_type
codec_id	myth.c	/^	int    codec_id;$/;"	m	struct:AVPacket	file:
codec_private_data	ccx_demuxer.h	/^	void *codec_private_data;$/;"	m	struct:cap_info
col	ccx_decoders_isdb.c	/^		int col, row;$/;"	m	struct:__anon11::spacing	file:
col_count	ccx_decoders_708.h	/^	int col_count;$/;"	m	struct:ccx_dtvcc_window
col_lock	ccx_decoders_708.h	/^	int col_lock;$/;"	m	struct:ccx_dtvcc_window
color	ccx_decoders_isdb.c	/^enum color$/;"	g	file:
color_text	ccx_decoders_608.c	/^const char *color_text[MAX_COLOR][2]=$/;"	v
colors	ccx_decoders_structs.h	/^	unsigned char colors[15][33];$/;"	m	struct:eia608_screen
command_code	ccx_decoders_608.h	/^enum command_code$/;"	g
command_type	ccx_decoders_608.c	/^static const char *command_type[] =$/;"	v	file:
commands	ccx_decoders_708.h	/^	unsigned char commands[6]; \/\/ Commands used to create this window$/;"	m	struct:ccx_dtvcc_window
compare_rect_by_ypos	ocr.c	/^int compare_rect_by_ypos(const void*p1, const void *p2, void*arg)$/;"	f
composition_id	dvb_subtitle_decoder.c	/^	int composition_id;$/;"	m	struct:DVBSubContext	file:
composition_id	dvb_subtitle_decoder.h	/^	unsigned short composition_id[MAX_LANGUAGE_PER_DESC];$/;"	m	struct:dvb_config
conf_map	configuration.c	/^struct conf_map$/;"	s	file:
configuration_map	configuration.c	/^struct conf_map configuration_map[] = {$/;"	v	typeref:struct:conf_map
connect_to_srv	networking.c	/^void connect_to_srv(const char *addr, const char *port, const char *cc_desc, const char *pwd)$/;"	f
container_of	list.h	31;"	d
context_cc608_field_1	ccx_decoders_structs.h	/^	void *context_cc608_field_1;$/;"	m	struct:lib_cc_decode
context_cc608_field_2	ccx_decoders_structs.h	/^	void *context_cc608_field_2;$/;"	m	struct:lib_cc_decode
copy_capbuf_demux_data	ts_functions.c	/^int copy_capbuf_demux_data(struct ccx_demuxer *ctx, struct demuxer_data **data, struct cap_info *cinfo)$/;"	f
copy_ccdata_to_buffer	avc_functions.c	/^void copy_ccdata_to_buffer (struct avc_ctx *ctx, char *source, int new_cc_count)$/;"	f
copy_payload_to_capbuf	ts_functions.c	/^int copy_payload_to_capbuf(struct cap_info *cinfo, struct ts_payload *payload)$/;"	f
correct_case	ccx_encoders_helpers.c	/^void correct_case(int line_num, struct eia608_screen *data)$/;"	f
count	ts_functions.h	/^	long long int count; \/\/incremented by one each time the event is updated$/;"	m	struct:EPG_event
count	wtv_constants.h	/^	uint8_t count;$/;"	m	struct:wtv_chunked_buffer
counter	ts_functions.h	/^	int counter;          \/\/ continuity counter$/;"	m	struct:ts_payload
country_code	ts_functions.h	/^	char country_code[4];$/;"	m	struct:EPG_rating
crc	ccx_demuxer.h	/^	int32_t crc;$/;"	m	struct:program_info
crc32_table	utility.c	/^static uint32_t crc32_table [] = {$/;"	v	file:
create_outfilename	utility.c	/^char *create_outfilename(const char *basename, const char *suffix, const char *extension)$/;"	f
credits_shown	activity.c	/^static int credits_shown=0;$/;"	v	file:
crop_tab	dvb_subtitle_decoder.c	/^const uint8_t crop_tab[256 + 2 * MAX_NEG_CROP] = { times256(0x00), 0x00, 0x01,$/;"	v
csi_command	ccx_decoders_isdb.c	/^enum csi_command$/;"	g	file:
cur_xds_buffer_idx	ccx_decoders_xds.c	/^	int cur_xds_buffer_idx;$/;"	m	struct:ccx_decoders_xds_context	file:
cur_xds_packet_class	ccx_decoders_structs.h	/^	int cur_xds_packet_class;$/;"	m	struct:eia608_screen
cur_xds_packet_class	ccx_decoders_xds.c	/^	int cur_xds_packet_class;$/;"	m	struct:ccx_decoders_xds_context	file:
cur_xds_packet_type	ccx_decoders_xds.c	/^	int cur_xds_packet_type;$/;"	m	struct:ccx_decoders_xds_context	file:
cur_xds_payload	ccx_decoders_xds.c	/^	unsigned char *cur_xds_payload;$/;"	m	struct:ccx_decoders_xds_context	file:
cur_xds_payload_length	ccx_decoders_xds.c	/^	int cur_xds_payload_length;$/;"	m	struct:ccx_decoders_xds_context	file:
currDecodeStreamPTS	asf_constants.h	/^	int currDecodeStreamPTS; \/\/ Time of the data returned by the function$/;"	m	struct:__anon8
currVideoStreamMS	asf_constants.h	/^	int currVideoStreamMS;$/;"	m	struct:__anon8
currefpts	avc_functions.h	/^	LLONG currefpts;$/;"	m	struct:avc_ctx
current	telxcc.c	/^	uint8_t current;$/;"	m	struct:s_primary_charset	file:
current_aspect_ratio	ccx_decoders_structs.h	/^	unsigned int current_aspect_ratio;$/;"	m	struct:lib_cc_decode
current_color	ccx_decoders_608.h	/^	unsigned char current_color; \/\/ Color we are currently using to write$/;"	m	struct:ccx_decoder_608_context
current_field	ccx_decoders_structs.h	/^	int current_field;$/;"	m	struct:lib_cc_decode
current_file	lib_ccx.h	/^	int current_file; \/\/ If current_file!=1, we are processing *inputfile[current_file]$/;"	m	struct:lib_ccx_ctx
current_fps	ccx_common_timing.c	/^double current_fps = (double) 30000.0 \/ 1001; \/* 29.97 *\/ \/\/ TODO: Get from framerates_values[] instead$/;"	v
current_frame_rate	ccx_decoders_structs.h	/^	unsigned int current_frame_rate; \/\/ Assume standard fps, 29.97$/;"	m	struct:lib_cc_decode
current_hor_size	ccx_decoders_structs.h	/^	unsigned int current_hor_size;$/;"	m	struct:lib_cc_decode
current_packet	ccx_decoders_708.h	/^	unsigned char current_packet[CCX_DTVCC_MAX_PACKET_LENGTH];$/;"	m	struct:ccx_dtvcc_ctx
current_packet_length	ccx_decoders_708.h	/^	int current_packet_length;$/;"	m	struct:ccx_dtvcc_ctx
current_picture_coding_type	ccx_common_timing.h	/^	enum ccx_frame_type current_picture_coding_type;$/;"	m	struct:ccx_common_timing_ctx	typeref:enum:ccx_common_timing_ctx::ccx_frame_type
current_program_type_reported	ccx_decoders_xds.c	/^	int current_program_type_reported; \/\/ No.$/;"	m	struct:ccx_decoders_xds_context	file:
current_progressive_sequence	ccx_decoders_structs.h	/^	unsigned int current_progressive_sequence;$/;"	m	struct:lib_cc_decode
current_pts	ccx_common_timing.h	/^	LLONG current_pts;$/;"	m	struct:ccx_common_timing_ctx
current_pulldownfields	ccx_decoders_structs.h	/^	unsigned int current_pulldownfields ;$/;"	m	struct:lib_cc_decode
current_state	ccx_decoders_isdb.c	/^	ISDBSubState current_state; \/\/modified default_state[lang_tag]$/;"	m	struct:__anon13	file:
current_tref	ccx_common_timing.h	/^	int current_tref; \/\/ Store temporal reference of current frame$/;"	m	struct:ccx_common_timing_ctx
current_vert_size	ccx_decoders_structs.h	/^	unsigned int current_vert_size;$/;"	m	struct:lib_cc_decode
current_visible_start_ms	ccx_decoders_608.h	/^	LLONG current_visible_start_ms; \/\/ At what time did the current visible buffer became so?$/;"	m	struct:ccx_decoder_608_context
current_window	ccx_decoders_708.h	/^	int current_window;$/;"	m	struct:ccx_dtvcc_service_decoder
current_xds_call_letters	ccx_decoders_xds.c	/^	char current_xds_call_letters[7];$/;"	m	struct:ccx_decoders_xds_context	file:
current_xds_date	ccx_decoders_xds.c	/^	int current_xds_date;$/;"	m	struct:ccx_decoders_xds_context	file:
current_xds_hour	ccx_decoders_xds.c	/^	int current_xds_hour;$/;"	m	struct:ccx_decoders_xds_context	file:
current_xds_min	ccx_decoders_xds.c	/^	int current_xds_min;$/;"	m	struct:ccx_decoders_xds_context	file:
current_xds_month	ccx_decoders_xds.c	/^	int current_xds_month;$/;"	m	struct:ccx_decoders_xds_context	file:
current_xds_network_name	ccx_decoders_xds.c	/^	char current_xds_network_name[33];$/;"	m	struct:ccx_decoders_xds_context	file:
current_xds_program_name	ccx_decoders_xds.c	/^	char current_xds_program_name[33];$/;"	m	struct:ccx_decoders_xds_context	file:
current_xds_program_type	ccx_decoders_xds.c	/^	char current_xds_program_type[33];$/;"	m	struct:ccx_decoders_xds_context	file:
currref	avc_functions.h	/^	int currref;$/;"	m	struct:avc_ctx
cursor_column	ccx_decoders_608.h	/^	int cursor_row, cursor_column;$/;"	m	struct:ccx_decoder_608_context
cursor_pos	ccx_decoders_isdb.c	/^	struct ISDBPos cursor_pos;$/;"	m	struct:__anon11	typeref:struct:__anon11::ISDBPos	file:
cursor_row	ccx_decoders_608.h	/^	int cursor_row, cursor_column;$/;"	m	struct:ccx_decoder_608_context
data	ccx_common_structs.h	/^	void *data;$/;"	m	struct:cc_subtitle
data	ccx_decoders_structs.h	/^	unsigned char *data[2];$/;"	m	struct:cc_bitmap
data	myth.c	/^	unsigned char *data;$/;"	m	struct:AVPacket	file:
data	telxcc.c	/^	uint8_t data[40];$/;"	m	struct:__anon4	file:
data_from_608	lib_ccx.h	/^	struct ccx_decoder_608_report *data_from_608;$/;"	m	struct:file_report	typeref:struct:file_report::ccx_decoder_608_report
data_from_708	lib_ccx.h	/^	struct ccx_decoder_dtvcc_report *data_from_708;$/;"	m	struct:file_report	typeref:struct:file_report::ccx_decoder_dtvcc_report
data_unit_t	telxcc.c	/^} data_unit_t;$/;"	t	typeref:enum:__anon3	file:
datapacketcur	asf_constants.h	/^	uint32_t datapacketcur; \/\/ Current packet number$/;"	m	struct:__anon9
date_format	ccx_common_option.h	/^	enum ccx_output_date_format date_format;$/;"	m	struct:ccx_s_options	typeref:enum:ccx_s_options::ccx_output_date_format
date_format	ccx_common_option.h	/^	enum ccx_output_date_format date_format;$/;"	m	struct:encoder_cfg	typeref:enum:encoder_cfg::ccx_output_date_format
date_format	ccx_encoders_common.h	/^	enum ccx_output_date_format date_format;$/;"	m	struct:encoder_ctx	typeref:enum:encoder_ctx::ccx_output_date_format
date_format	lib_ccx.h	/^	enum ccx_output_date_format date_format;$/;"	m	struct:ccx_s_teletext_config	typeref:enum:ccx_s_teletext_config::ccx_output_date_format
date_format	telxcc.c	/^	enum ccx_output_date_format date_format;$/;"	m	struct:TeletextCtx	typeref:enum:TeletextCtx::ccx_output_date_format	file:
dbg_print	utility.c	/^void dbg_print(LLONG mask, const char *fmt, ...)$/;"	f
dc	ccx_decoders_isdb.c	/^	uint8_t dc;$/;"	m	struct:__anon13	file:
debug	ccx_gxf.c	29;"	d	file:
debug	es_functions.c	21;"	d	file:
debug_608toASC	ccx_decoders_608.c	/^unsigned char *debug_608toASC (unsigned char *cc_data, int channel)$/;"	f
debug_file_name	ccx_decoders_vbi.h	/^	char *debug_file_name;$/;"	m	struct:ccx_decoder_vbi_cfg
debug_ftn	ccx_common_structs.h	/^	void(*debug_ftn) (LLONG mask, const char *fmt, ...); \/\/ Used to process debug output. Mask can be ignored (custom set by debug_mask).$/;"	m	struct:ccx_common_logging_t
debug_mask	ccx_common_option.h	/^	LLONG debug_mask; \/\/ dbg_print will use this mask to print or ignore different types$/;"	m	struct:ccx_s_options
debug_mask	ccx_common_structs.h	/^	LLONG debug_mask; \/\/ The debug mask that is used to determine if things should be printed or not.$/;"	m	struct:ccx_common_logging_t
debug_mask_on_debug	ccx_common_option.h	/^	LLONG debug_mask_on_debug; \/\/ If we're using temp_debug to enable\/disable debug "live", this is the mask when temp_debug=1$/;"	m	struct:ccx_s_options
dec_ctx	ffmpeg_intgr.c	/^	AVCodecContext *dec_ctx;$/;"	m	struct:ffmpeg_ctx	file:
dec_ctx_head	lib_ccx.h	/^	struct list_head dec_ctx_head;$/;"	m	struct:lib_ccx_ctx	typeref:struct:lib_ccx_ctx::list_head
dec_global_setting	lib_ccx.h	/^	struct ccx_decoders_common_settings_t *dec_global_setting;$/;"	m	struct:lib_ccx_ctx	typeref:struct:lib_ccx_ctx::ccx_decoders_common_settings_t
dec_sub	ccx_decoders_structs.h	/^	struct cc_subtitle dec_sub;$/;"	m	struct:lib_cc_decode	typeref:struct:lib_cc_decode::cc_subtitle
decode_SDT_services_loop	ts_tables.c	/^void decode_SDT_services_loop(struct ccx_demuxer *ctx, uint8_t *buf, uint32_t length)$/;"	f
decode_service_descriptors	ts_tables.c	/^void decode_service_descriptors(struct ccx_demuxer *ctx, uint8_t *buf, uint32_t length, uint32_t service_id)$/;"	f
decode_vbi	ccx_decoders_vbi.c	/^int decode_vbi(struct lib_cc_decode *dec_ctx, uint8_t field, unsigned char *buffer, size_t len,  struct cc_subtitle *sub)$/;"	f
decoders	ccx_decoders_708.h	/^	ccx_dtvcc_service_decoder decoders[CCX_DTVCC_MAX_SERVICES];$/;"	m	struct:ccx_dtvcc_ctx
default_clut	dvb_subtitle_decoder.c	/^static DVBSubCLUT default_clut;$/;"	v	file:
default_color	ccx_decoders_608.h	/^	unsigned char default_color; \/\/ Default color to use.$/;"	m	struct:ccx_decoder_608_settings
delete_cluts	dvb_subtitle_decoder.c	/^static void delete_cluts(DVBSubContext *ctx)$/;"	f	file:
delete_datalist	general_loop.c	/^void delete_datalist(struct demuxer_data *list)$/;"	f
delete_decoder_vbi	ccx_decoders_vbi.c	/^void delete_decoder_vbi(struct ccx_decoder_vbi_ctx** arg)$/;"	f
delete_demuxer_data	ccx_demuxer.c	/^void delete_demuxer_data(struct demuxer_data *data)$/;"	f
delete_demuxer_data_node_by_pid	ts_functions.c	/^void delete_demuxer_data_node_by_pid(struct demuxer_data **data, int pid)$/;"	f
delete_isdb_decoder	ccx_decoders_isdb.c	/^void delete_isdb_decoder(void **isdb_ctx)$/;"	f
delete_objects	dvb_subtitle_decoder.c	/^static void delete_objects(DVBSubContext *ctx)$/;"	f	file:
delete_ocr	ocr.c	/^void delete_ocr (void** arg)$/;"	f
delete_region_display_list	dvb_subtitle_decoder.c	/^static void delete_region_display_list(DVBSubContext *ctx, DVBSubRegion *region)$/;"	f	file:
delete_regions	dvb_subtitle_decoder.c	/^static void delete_regions(DVBSubContext *ctx)$/;"	f	file:
delete_to_end_of_row	ccx_decoders_608.c	/^void delete_to_end_of_row(ccx_decoder_608_context *context)$/;"	f
delta	telxcc.c	/^	int64_t delta;$/;"	m	struct:TeletextCtx	file:
demux_cfg	ccx_common_option.h	/^	struct demuxer_cfg demux_cfg;$/;"	m	struct:ccx_s_options	typeref:struct:ccx_s_options::demuxer_cfg
demux_ctx	lib_ccx.h	/^	struct ccx_demuxer *demux_ctx;$/;"	m	struct:lib_ccx_ctx	typeref:struct:lib_ccx_ctx::ccx_demuxer
demuxer_cfg	ccx_common_option.h	/^struct demuxer_cfg$/;"	s
demuxer_data	ccx_demuxer.h	/^struct demuxer_data$/;"	s
den	utility.h	/^	int den;$/;"	m	struct:ccx_rational
depth	dvb_subtitle_decoder.c	/^	int depth;$/;"	m	struct:DVBSubRegion	file:
desc	ts_functions.c	/^const char *desc[256];$/;"	v
description	ccx_decoders_708.h	/^	const char *description;$/;"	m	struct:CCX_DTVCC_S_COMMANDS_C1
destruct	myth.c	/^	void  (*destruct)(struct AVPacket *);$/;"	m	struct:AVPacket	file:
detect_myth	stream_functions.c	/^int detect_myth( struct ccx_demuxer *ctx )$/;"	f
detect_stream_type	stream_functions.c	/^void detect_stream_type (struct ccx_demuxer *ctx)$/;"	f
dinit_avc	avc_functions.c	/^void dinit_avc(struct avc_ctx **ctx)$/;"	f
dinit_cap	ts_info.c	/^void dinit_cap (struct ccx_demuxer *ctx)$/;"	f
dinit_cc_decode	ccx_decoders_common.c	/^void dinit_cc_decode(struct lib_cc_decode **ctx)$/;"	f
dinit_decoder_setting	lib_ccx.c	/^static void dinit_decoder_setting (struct ccx_decoders_common_settings_t **setting)$/;"	f	file:
dinit_encoder	ccx_encoders_common.c	/^void dinit_encoder(struct encoder_ctx **arg, LLONG current_fts)$/;"	f
dinit_libraries	lib_ccx.c	/^void dinit_libraries( struct lib_ccx_ctx **ctx)$/;"	f
dinit_output_ctx	ccx_encoders_common.c	/^static void dinit_output_ctx(struct encoder_ctx *ctx)$/;"	f	file:
dinit_timing_ctx	ccx_common_timing.c	/^void dinit_timing_ctx(struct ccx_common_timing_ctx **arg)$/;"	f
dinit_write	output.c	/^void dinit_write(struct ccx_s_write *wb)$/;"	f
direct_rollup	ccx_decoders_608.h	/^	int direct_rollup; \/\/ Write roll-up captions directly instead of line by line?$/;"	m	struct:ccx_decoder_608_settings
dirname	spupng_encoder.h	/^	char* dirname;$/;"	m	struct:spupng_t
dirty	dvb_subtitle_decoder.c	/^	int dirty;$/;"	m	struct:DVBSubRegion	file:
disCommand	ccx_decoders_608.c	/^int disCommand(unsigned char hi, unsigned char lo, ccx_decoder_608_context *context, struct cc_subtitle *sub)$/;"	f
disable_sync_check	ccx_common_timing.h	/^	int disable_sync_check; \/\/ If 1, timeline jumps will be ignored. This is important in several input formats that are assumed to have correct timing, no matter what.$/;"	m	struct:ccx_common_timing_settings_t
disp_area	ccx_decoders_isdb.c	/^	struct disp_area {$/;"	s	struct:__anon11	file:
display_area	ccx_decoders_isdb.c	/^	} display_area;$/;"	m	struct:__anon11	typeref:struct:__anon11::disp_area	file:
display_definition	dvb_subtitle_decoder.c	/^	DVBSubDisplayDefinition *display_definition;$/;"	m	struct:DVBSubContext	file:
display_effect	ccx_decoders_708.h	/^	int display_effect;$/;"	m	struct:ccx_dtvcc_window_attribs
display_list	dvb_subtitle_decoder.c	/^	DVBSubObjectDisplay *display_list;$/;"	m	struct:DVBSubObject	file:
display_list	dvb_subtitle_decoder.c	/^	DVBSubObjectDisplay *display_list;$/;"	m	struct:DVBSubRegion	file:
display_list	dvb_subtitle_decoder.c	/^	DVBSubRegionDisplay *display_list;$/;"	m	struct:DVBSubContext	file:
dmf	ccx_decoders_isdb.c	/^	uint8_t dmf;$/;"	m	struct:__anon13	file:
do_NAL	avc_functions.c	/^void do_NAL (struct lib_cc_decode *ctx, unsigned char *NALstart, LLONG NAL_length, struct cc_subtitle *sub)$/;"	f
do_cb	ccx_decoders_common.c	/^int do_cb (struct lib_cc_decode *ctx, unsigned char *cc_block, struct cc_subtitle *sub)$/;"	f
do_end_of_xds	ccx_decoders_xds.c	/^void do_end_of_xds (struct cc_subtitle *sub, struct ccx_decoders_xds_context *ctx, unsigned char expected_checksum)$/;"	f
dobjectread	asf_constants.h	/^	int64_t dobjectread; \/\/ Bytes read in Data Object$/;"	m	struct:__anon9
draw_char	spupng_encoder.c	/^static void draw_char(int canvas_type, uint8_t *canvas, int rowstride,$/;"	f	file:
draw_char_indexed	spupng_encoder.c	/^void draw_char_indexed(uint8_t * canvas, int rowstride,  uint8_t * pen,$/;"	f
draw_row	ccx_encoders_spupng.c	/^void draw_row(struct eia608_screen* data, int row, uint8_t * canvas, int rowstride)$/;"	f
draw_str	ccx_encoders_spupng.c	/^void draw_str(char *str, uint8_t * canvas, int rowstride)$/;"	f
drop_frame_flag	ccx_common_timing.h	/^	int drop_frame_flag;$/;"	m	struct:gop_time_code
dts	myth.c	/^	LLONG dts;                            \/\/\/< decompression time stamp in time_base units$/;"	m	struct:AVPacket	file:
dtvcc	ccx_decoders_structs.h	/^	ccx_dtvcc_ctx *dtvcc;$/;"	m	struct:lib_cc_decode
dtvcc_extract	ccx_common_option.h	/^	int dtvcc_extract; \/\/ 1 or 0$/;"	m	struct:encoder_cfg
dtvcc_extract	ccx_encoders_common.h	/^	int dtvcc_extract; \/\/1 or 0 depending if we have to handle dtvcc$/;"	m	struct:encoder_ctx
dtvcc_get_internal_from_G0	ccx_decoders_708_encoding.c	/^unsigned char dtvcc_get_internal_from_G0(unsigned char g0_char)$/;"	f
dtvcc_get_internal_from_G1	ccx_decoders_708_encoding.c	/^unsigned char dtvcc_get_internal_from_G1(unsigned char g1_char)$/;"	f
dtvcc_get_internal_from_G2	ccx_decoders_708_encoding.c	/^unsigned char dtvcc_get_internal_from_G2(unsigned char g2_char)$/;"	f
dtvcc_get_internal_from_G3	ccx_decoders_708_encoding.c	/^unsigned char dtvcc_get_internal_from_G3(unsigned char g3_char)$/;"	f
dtvcc_handle_CLW_ClearWindows	ccx_decoders_708.c	/^void dtvcc_handle_CLW_ClearWindows(ccx_dtvcc_service_decoder *decoder, int windows_bitmap)$/;"	f
dtvcc_handle_CWx_SetCurrentWindow	ccx_decoders_708.c	/^void dtvcc_handle_CWx_SetCurrentWindow(ccx_dtvcc_service_decoder *decoder, int window_id)$/;"	f
dtvcc_handle_DFx_DefineWindow	ccx_decoders_708.c	/^void dtvcc_handle_DFx_DefineWindow(ccx_dtvcc_service_decoder *decoder, int window_id, unsigned char *data, struct ccx_common_timing_ctx *timing)$/;"	f
dtvcc_handle_DLC_DelayCancel	ccx_decoders_708.c	/^void dtvcc_handle_DLC_DelayCancel(ccx_dtvcc_service_decoder *decoder)$/;"	f
dtvcc_handle_DLW_DeleteWindows	ccx_decoders_708.c	/^void dtvcc_handle_DLW_DeleteWindows(ccx_dtvcc_ctx *dtvcc,$/;"	f
dtvcc_handle_DLY_Delay	ccx_decoders_708.c	/^void dtvcc_handle_DLY_Delay(ccx_dtvcc_service_decoder *decoder, int tenths_of_sec)$/;"	f
dtvcc_handle_DSW_DisplayWindows	ccx_decoders_708.c	/^void dtvcc_handle_DSW_DisplayWindows(ccx_dtvcc_service_decoder *decoder, int windows_bitmap, struct ccx_common_timing_ctx *timing)$/;"	f
dtvcc_handle_HDW_HideWindows	ccx_decoders_708.c	/^void dtvcc_handle_HDW_HideWindows(ccx_dtvcc_ctx *dtvcc,$/;"	f
dtvcc_handle_RST_Reset	ccx_decoders_708.c	/^void dtvcc_handle_RST_Reset(ccx_dtvcc_service_decoder *decoder)$/;"	f
dtvcc_handle_SPA_SetPenAttributes	ccx_decoders_708.c	/^void dtvcc_handle_SPA_SetPenAttributes(ccx_dtvcc_service_decoder *decoder, unsigned char *data)$/;"	f
dtvcc_handle_SPC_SetPenColor	ccx_decoders_708.c	/^void dtvcc_handle_SPC_SetPenColor(ccx_dtvcc_service_decoder *decoder, unsigned char *data)$/;"	f
dtvcc_handle_SPL_SetPenLocation	ccx_decoders_708.c	/^void dtvcc_handle_SPL_SetPenLocation(ccx_dtvcc_service_decoder *decoder, unsigned char *data)$/;"	f
dtvcc_handle_SWA_SetWindowAttributes	ccx_decoders_708.c	/^void dtvcc_handle_SWA_SetWindowAttributes(ccx_dtvcc_service_decoder *decoder, unsigned char *data)$/;"	f
dtvcc_handle_TGW_ToggleWindows	ccx_decoders_708.c	/^void dtvcc_handle_TGW_ToggleWindows(ccx_dtvcc_ctx *dtvcc,$/;"	f
dtvcc_tv_screen	ccx_decoders_708.h	/^typedef struct dtvcc_tv_screen$/;"	s
dtvcc_tv_screen	ccx_decoders_708.h	/^} dtvcc_tv_screen;$/;"	t	typeref:struct:dtvcc_tv_screen
dtvcc_writers	ccx_encoders_common.h	/^	ccx_dtvcc_writer_ctx dtvcc_writers[CCX_DTVCC_MAX_SERVICES];$/;"	m	struct:encoder_ctx
dump	utility.c	/^void dump (LLONG mask, unsigned char *start, int l, unsigned long abs_start, unsigned clear_high_bit)$/;"	f
duration	myth.c	/^	int   duration;                         \/\/\/< presentation duration in time_base units (0 if not available)$/;"	m	struct:AVPacket	file:
dvb_config	dvb_subtitle_decoder.h	/^struct dvb_config$/;"	s
dvb_sub_pid	ccx_demuxer.h	/^        unsigned dvb_sub_pid[SUB_STREAMS_CNT];$/;"	m	struct:ccx_demux_report
dvbsub_close_decoder	dvb_subtitle_decoder.c	/^int dvbsub_close_decoder(void **dvb_ctx)$/;"	f
dvbsub_decode	dvb_subtitle_decoder.c	/^int dvbsub_decode(struct lib_cc_decode *dec_ctx, const unsigned char *buf, int buf_size, struct cc_subtitle *sub)$/;"	f
dvbsub_init_decoder	dvb_subtitle_decoder.c	/^void* dvbsub_init_decoder(struct dvb_config* cfg)$/;"	f
dvbsub_parse_clut_segment	dvb_subtitle_decoder.c	/^static int dvbsub_parse_clut_segment(void *dvb_ctx, const uint8_t *buf,$/;"	f	file:
dvbsub_parse_display_definition_segment	dvb_subtitle_decoder.c	/^static void dvbsub_parse_display_definition_segment(void *dvb_ctx,$/;"	f	file:
dvbsub_parse_object_segment	dvb_subtitle_decoder.c	/^static void dvbsub_parse_object_segment(void *dvb_ctx, const uint8_t *buf,$/;"	f	file:
dvbsub_parse_page_segment	dvb_subtitle_decoder.c	/^static void dvbsub_parse_page_segment(void *dvb_ctx, const uint8_t *buf,$/;"	f	file:
dvbsub_parse_pixel_data_block	dvb_subtitle_decoder.c	/^static void dvbsub_parse_pixel_data_block(void *dvb_ctx,$/;"	f	file:
dvbsub_parse_region_segment	dvb_subtitle_decoder.c	/^static void dvbsub_parse_region_segment(void*dvb_ctx, const uint8_t *buf,$/;"	f	file:
dvbsub_read_2bit_string	dvb_subtitle_decoder.c	/^static int dvbsub_read_2bit_string(uint8_t *destbuf, int dbuf_len,$/;"	f	file:
dvbsub_read_4bit_string	dvb_subtitle_decoder.c	/^static int dvbsub_read_4bit_string(uint8_t *destbuf, int dbuf_len,$/;"	f	file:
dvbsub_read_8bit_string	dvb_subtitle_decoder.c	/^static int dvbsub_read_8bit_string(uint8_t *destbuf, int dbuf_len,$/;"	f	file:
dvprint	avc_functions.c	7;"	d	file:
edge_color	ccx_decoders_708.h	/^	int edge_color;$/;"	m	struct:ccx_dtvcc_pen_color
edge_type	ccx_decoders_708.h	/^	int edge_type;$/;"	m	struct:ccx_dtvcc_pen_attribs
effect_direction	ccx_decoders_708.h	/^	int effect_direction;$/;"	m	struct:ccx_dtvcc_window_attribs
effect_speed	ccx_decoders_708.h	/^	int effect_speed;$/;"	m	struct:ccx_dtvcc_window_attribs
eia608_screen	ccx_decoders_structs.h	/^typedef struct eia608_screen \/\/ A CC buffer$/;"	s
eia608_screen	ccx_decoders_structs.h	/^} eia608_screen;$/;"	t	typeref:struct:eia608_screen
eit_current_events	lib_ccx.h	/^	int32_t eit_current_events[TS_PMT_MAP_SIZE+1];$/;"	m	struct:lib_ccx_ctx
eit_programs	lib_ccx.h	/^	struct EIT_program eit_programs[TS_PMT_MAP_SIZE+1];$/;"	m	struct:lib_ccx_ctx	typeref:struct:lib_ccx_ctx::EIT_program
elementary_PID	ts_functions.h	/^	unsigned elementary_PID;$/;"	m	struct:PMT_entry
empty	ccx_decoders_structs.h	/^	int empty; \/\/ Buffer completely empty?$/;"	m	struct:eia608_screen
enabled	ccx_decoders_708.h	/^	int enabled;$/;"	m	struct:ccx_decoder_dtvcc_settings
enc_cfg	ccx_common_option.h	/^	struct encoder_cfg enc_cfg;$/;"	m	struct:ccx_s_options	typeref:struct:ccx_s_options::encoder_cfg
enc_ctx_head	lib_ccx.h	/^	struct list_head enc_ctx_head;$/;"	m	struct:lib_ccx_ctx	typeref:struct:lib_ccx_ctx::list_head
enc_type	ccx_common_structs.h	/^	enum ccx_encoding_type  enc_type;$/;"	m	struct:cc_subtitle	typeref:enum:cc_subtitle::ccx_encoding_type
encode_line	ccx_encoders_helpers.c	/^unsigned encode_line(struct encoder_ctx *ctx, unsigned char *buffer, unsigned char *text)$/;"	f
encode_sub	ccx_encoders_common.c	/^int encode_sub(struct encoder_ctx *context, struct cc_subtitle *sub)$/;"	f
encoded_br	ccx_encoders_common.h	/^	unsigned char encoded_br[16];$/;"	m	struct:encoder_ctx
encoded_br_length	ccx_encoders_common.h	/^	unsigned int encoded_br_length;$/;"	m	struct:encoder_ctx
encoded_crlf	ccx_encoders_common.h	/^	unsigned char encoded_crlf[16];$/;"	m	struct:encoder_ctx
encoded_crlf_length	ccx_encoders_common.h	/^	unsigned int encoded_crlf_length;$/;"	m	struct:encoder_ctx
encoder	ccx_decoders_708.h	/^	void *encoder; \/\/we can't include header, so keeping it this way$/;"	m	struct:ccx_dtvcc_ctx
encoder_cfg	ccx_common_option.h	/^struct encoder_cfg$/;"	s
encoder_ctx	ccx_encoders_common.h	/^struct encoder_ctx$/;"	s
encoding	ccx_common_option.h	/^	enum ccx_encoding_type encoding;$/;"	m	struct:encoder_cfg	typeref:enum:encoder_cfg::ccx_encoding_type
encoding	ccx_encoders_common.h	/^	enum ccx_encoding_type encoding;$/;"	m	struct:encoder_ctx	typeref:enum:encoder_ctx::ccx_encoding_type
encoding	ccx_encoders_helpers.h	/^	enum ccx_encoding_type encoding;$/;"	m	struct:ccx_encoders_helpers_settings_t	typeref:enum:ccx_encoders_helpers_settings_t::ccx_encoding_type
encoding	lib_ccx.h	/^	enum ccx_encoding_type encoding;$/;"	m	struct:ccx_s_teletext_config	typeref:enum:ccx_s_teletext_config::ccx_encoding_type
end	bitstream.h	/^	unsigned char *end;$/;"	m	struct:bitstream
end_credits_displayed	lib_ccx.h	/^	int end_credits_displayed;$/;"	m	struct:lib_ccx_ctx
end_credits_text	ccx_common_option.h	/^	char *end_credits_text;$/;"	m	struct:encoder_cfg
end_credits_text	ccx_encoders_common.h	/^	char *end_credits_text;$/;"	m	struct:encoder_ctx
end_of_file	general_loop.c	/^int end_of_file=0; \/\/ End of file?$/;"	v
end_time	ccx_common_structs.h	/^	LLONG end_time;$/;"	m	struct:cc_subtitle
end_time	ccx_decoders_structs.h	/^	LLONG end_time;$/;"	m	struct:eia608_screen
end_time_string	ts_functions.h	/^	char end_time_string[21];$/;"	m	struct:EPG_event
endcreditsforatleast	ccx_common_option.h	/^	struct ccx_boundary_time endcreditsforatleast, endcreditsforatmost;$/;"	m	struct:encoder_cfg	typeref:struct:encoder_cfg::ccx_boundary_time
endcreditsforatleast	ccx_encoders_common.h	/^	struct ccx_boundary_time endcreditsforatleast, endcreditsforatmost;$/;"	m	struct:encoder_ctx	typeref:struct:encoder_ctx::ccx_boundary_time
endcreditsforatmost	ccx_common_option.h	/^	struct ccx_boundary_time endcreditsforatleast, endcreditsforatmost;$/;"	m	struct:encoder_cfg	typeref:struct:encoder_cfg::
endcreditsforatmost	ccx_encoders_common.h	/^	struct ccx_boundary_time endcreditsforatleast, endcreditsforatmost;$/;"	m	struct:encoder_ctx	typeref:struct:encoder_ctx::
entity	telxcc.c	/^	const char *entity;$/;"	m	struct:__anon5	file:
epg_buffers	lib_ccx.h	/^	struct PSI_buffer epg_buffers[0xfff+1];$/;"	m	struct:lib_ccx_ctx	typeref:struct:lib_ccx_ctx::PSI_buffer
epg_events	ts_functions.h	/^	struct EPG_event epg_events[EPG_MAX_EVENTS];$/;"	m	struct:EIT_program	typeref:struct:EIT_program::EPG_event
epg_last_live_output	lib_ccx.h	/^	int epg_last_live_output; $/;"	m	struct:lib_ccx_ctx
epg_last_output	lib_ccx.h	/^	int epg_last_output; $/;"	m	struct:lib_ccx_ctx
erase_both_memories	ccx_decoders_608.c	/^void erase_both_memories(ccx_decoder_608_context *context, struct cc_subtitle *sub)$/;"	f
erase_memory	ccx_decoders_608.c	/^void erase_memory(ccx_decoder_608_context *context, int displayed)$/;"	f
error	bitstream.h	/^	int error;$/;"	m	struct:bitstream
es_video_sequence	es_functions.c	/^static int es_video_sequence(struct lib_cc_decode *ctx, struct bitstream *esstream, struct cc_subtitle *sub)$/;"	f	file:
event_name	ts_functions.h	/^	char *event_name;$/;"	m	struct:EPG_event
extended_ISO_639_language_code	ts_functions.h	/^	char extended_ISO_639_language_code[4];$/;"	m	struct:EPG_event
extended_text	ts_functions.h	/^	char *extended_text;$/;"	m	struct:EPG_event
extension	lib_ccx.h	/^	const char *extension; \/\/ Output extension$/;"	m	struct:lib_ccx_ctx
extension_and_user_data	es_functions.c	/^static int extension_and_user_data(struct lib_cc_decode *ctx, struct bitstream *esstream, int udtype, struct cc_subtitle *sub)$/;"	f	file:
extract	ccx_common_option.h	/^	int extract; \/\/ Extract 1st, 2nd or both fields$/;"	m	struct:ccx_s_options
extract	ccx_common_option.h	/^	int extract; \/\/ Extract 1st, 2nd or both fields$/;"	m	struct:encoder_cfg
extract	ccx_decoders_structs.h	/^	int extract; \/\/ Extract 1st, 2nd or both fields$/;"	m	struct:ccx_decoders_common_settings_t
extract	ccx_decoders_structs.h	/^	int extract; \/\/ Extract 1st, 2nd or both fields$/;"	m	struct:lib_cc_decode
extract	ccx_encoders_common.h	/^	int extract;$/;"	m	struct:encoder_ctx
extraction_end	ccx_common_option.h	/^	struct ccx_boundary_time extraction_start, extraction_end; \/\/ Segment we actually process$/;"	m	struct:ccx_s_options	typeref:struct:ccx_s_options::
extraction_end	ccx_decoders_structs.h	/^	struct ccx_boundary_time extraction_start, extraction_end; \/\/ Segment we actually process$/;"	m	struct:ccx_decoders_common_settings_t	typeref:struct:ccx_decoders_common_settings_t::
extraction_end	ccx_decoders_structs.h	/^	struct ccx_boundary_time extraction_start, extraction_end; \/\/ Segment we actually process$/;"	m	struct:lib_cc_decode	typeref:struct:lib_cc_decode::
extraction_end	lib_ccx.h	/^	struct ccx_boundary_time extraction_start, extraction_end; \/\/ Segment we actually process$/;"	m	struct:ccx_s_teletext_config	typeref:struct:ccx_s_teletext_config::
extraction_end	telxcc.c	/^	struct ccx_boundary_time extraction_start, extraction_end; \/\/ Segment we actually process$/;"	m	struct:TeletextCtx	typeref:struct:TeletextCtx::	file:
extraction_start	ccx_common_option.h	/^	struct ccx_boundary_time extraction_start, extraction_end; \/\/ Segment we actually process$/;"	m	struct:ccx_s_options	typeref:struct:ccx_s_options::ccx_boundary_time
extraction_start	ccx_decoders_structs.h	/^	struct ccx_boundary_time extraction_start, extraction_end; \/\/ Segment we actually process$/;"	m	struct:ccx_decoders_common_settings_t	typeref:struct:ccx_decoders_common_settings_t::ccx_boundary_time
extraction_start	ccx_decoders_structs.h	/^	struct ccx_boundary_time extraction_start, extraction_end; \/\/ Segment we actually process$/;"	m	struct:lib_cc_decode	typeref:struct:lib_cc_decode::ccx_boundary_time
extraction_start	lib_ccx.h	/^	struct ccx_boundary_time extraction_start, extraction_end; \/\/ Segment we actually process$/;"	m	struct:ccx_s_teletext_config	typeref:struct:ccx_s_teletext_config::ccx_boundary_time
extraction_start	telxcc.c	/^	struct ccx_boundary_time extraction_start, extraction_end; \/\/ Segment we actually process$/;"	m	struct:TeletextCtx	typeref:struct:TeletextCtx::ccx_boundary_time	file:
false	ccx_common_constants.h	7;"	d
false_pict_header	lib_ccx.h	/^	int false_pict_header;$/;"	m	struct:lib_ccx_ctx
fatal	utility.c	/^void fatal(int exit_code, const char *fmt, ...)$/;"	f
fatal_ftn	ccx_common_structs.h	/^	void(*fatal_ftn) (int exit_code, const char *fmt, ...); \/\/ Used when an unrecoverable error happens. This should log output\/save the error and then exit the program.$/;"	m	struct:ccx_common_logging_t
fd	ccx_encoders_common.h	/^	int fd;$/;"	m	struct:ccx_dtvcc_writer_ctx
fdprintf	ccx_common_common.c	/^void fdprintf(int fd, const char *fmt, ...)$/;"	f
ff_get_ccframe	ffmpeg_intgr.c	/^int ff_get_ccframe(void *arg, unsigned char*data, int maxlen)$/;"	f
ffmpeg_ctx	ccx_demuxer.h	/^	void *ffmpeg_ctx;$/;"	m	struct:ccx_demuxer
ffmpeg_ctx	ffmpeg_intgr.c	/^struct ffmpeg_ctx$/;"	s	file:
ffmpeg_getmoredata	ffmpeg_intgr.c	/^int ffmpeg_getmoredata(struct ccx_demuxer *ctx, struct demuxer_data **ppdata)$/;"	f
fg_color	ccx_decoders_708.h	/^	int fg_color;$/;"	m	struct:ccx_dtvcc_pen_color
fg_color	ccx_decoders_isdb.c	/^	uint32_t fg_color;$/;"	m	struct:__anon12	file:
fg_opacity	ccx_decoders_708.h	/^	int fg_opacity;$/;"	m	struct:ccx_dtvcc_pen_color
fgcolor	dvb_subtitle_decoder.c	/^	int fgcolor;$/;"	m	struct:DVBSubObjectDisplay	file:
fh	ccx_encoders_structs.h	/^	int fh;$/;"	m	struct:ccx_s_write
fh_out_elementarystream	ccx_demuxer.h	/^	FILE *fh_out_elementarystream;$/;"	m	struct:ccx_demuxer
field_per_frame	ccx_gxf.c	/^	uint32_t field_per_frame;$/;"	m	struct:ccx_gxf_ancillary_data_track	file:
field_per_frame	ccx_gxf.c	/^	uint32_t field_per_frame;$/;"	m	struct:ccx_gxf_video_track	file:
field_size	ccx_gxf.c	/^	int field_size;$/;"	m	struct:ccx_gxf_ancillary_data_track	file:
fileIndex	spupng_encoder.h	/^	int fileIndex;$/;"	m	struct:spupng_t
file_position	ccx_common_timing.h	/^	LLONG *file_position; \/\/ The position of the file$/;"	m	struct:ccx_common_timing_settings_t
file_report	lib_ccx.h	/^struct file_report$/;"	s
filebuffer	ccx_demuxer.h	/^	unsigned char *filebuffer;$/;"	m	struct:ccx_demuxer
filebuffer_pos	ccx_demuxer.h	/^	unsigned int filebuffer_pos; \/\/ Position of pointer relative to buffer start$/;"	m	struct:ccx_demuxer
filebuffer_start	ccx_demuxer.h	/^	LLONG filebuffer_start; \/\/ Position of buffer start relative to file$/;"	m	struct:ccx_demuxer
filename	ccx_encoders_common.h	/^	char *filename;$/;"	m	struct:ccx_dtvcc_writer_ctx
filename	ccx_encoders_structs.h	/^	char *filename;$/;"	m	struct:ccx_s_write
filepos	wtv_constants.h	/^	uint64_t filepos;$/;"	m	struct:wtv_chunked_buffer
fill_color	ccx_decoders_708.h	/^	int fill_color;$/;"	m	struct:ccx_dtvcc_window_attribs
fill_opacity	ccx_decoders_708.h	/^	int fill_opacity;$/;"	m	struct:ccx_dtvcc_window_attribs
find_limit_characters	ccx_encoders_common.c	/^void find_limit_characters(unsigned char *line, int *first_non_blank, int *last_non_blank, int max_len)$/;"	f
find_next_start_code	myth.c	/^static int find_next_start_code(struct ccx_demuxer *ctx, int *size_ptr,$/;"	f	file:
first	list.h	/^	struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node
first_field_nb	ccx_gxf.c	/^	int32_t first_field_nb;$/;"	m	struct:ccx_gxf	file:
first_gop_time	ccx_common_timing.c	/^struct gop_time_code gop_time, first_gop_time, printed_gop;$/;"	v	typeref:struct:
first_input_file	ccx_common_option.h	/^	char *first_input_file;$/;"	m	struct:encoder_cfg
first_input_file	ccx_encoders_common.h	/^	char *first_input_file;$/;"	m	struct:encoder_ctx
firstcall	asf_functions.c	/^int firstcall;$/;"	v
fix_padding	ccx_common_option.h	/^	int fix_padding; \/\/ Replace 0000 with 8080 in HDTV (needed for some cards)$/;"	m	struct:ccx_s_options
fix_padding	ccx_decoders_structs.h	/^	int fix_padding; \/\/ Replace 0000 with 8080 in HDTV (needed for some cards)$/;"	m	struct:ccx_decoders_common_settings_t
fix_padding	ccx_decoders_structs.h	/^	int fix_padding; \/\/ Replace 0000 with 8080 in HDTV (needed for some cards)$/;"	m	struct:lib_cc_decode
flag_ts_forced_cappid	ccx_demuxer.h	/^	int flag_ts_forced_cappid;$/;"	m	struct:ccx_demuxer
flag_ts_forced_pn	ccx_demuxer.h	/^	int flag_ts_forced_pn;$/;"	m	struct:ccx_demuxer
flags	ccx_common_structs.h	/^	int flags;$/;"	m	struct:cc_subtitle
flags	myth.c	/^	int   flags;$/;"	m	struct:AVPacket	file:
flush_608_context	ccx_decoders_608.c	/^void flush_608_context(ccx_decoder_608_context *context, struct cc_subtitle *sub)$/;"	f
flush_cc_decode	ccx_decoders_common.c	/^void flush_cc_decode(struct lib_cc_decode *ctx, struct cc_subtitle *sub)$/;"	f
font	ccx_decoders_608.h	/^	unsigned char font; \/\/ Font we are currently using to write$/;"	m	struct:ccx_decoder_608_context
fontSize	ccx_decoders_isdb.c	/^enum fontSize$/;"	g	file:
font_bits	ccx_decoders_608.h	/^enum font_bits$/;"	g
font_scale	ccx_decoders_isdb.c	/^	} font_scale; \/\/ 1\/2x1\/2, 1\/2*1, 1*1, 1*2, 2*1, 2*2$/;"	m	struct:__anon11	typeref:struct:__anon11::fscale	file:
font_size	ccx_decoders_isdb.c	/^	int font_size; \/\/ valid values: {16, 20, 24, 30, 36} (TR-B14\/B15)$/;"	m	struct:__anon11	file:
font_tag	ccx_decoders_708.h	/^	int font_tag;$/;"	m	struct:ccx_dtvcc_pen_attribs
font_text	ccx_decoders_608.c	/^static const char *font_text[]=$/;"	v	file:
fonts	ccx_decoders_structs.h	/^	unsigned char fonts[15][33]; \/\/ Extra char at the end for a 0$/;"	m	struct:eia608_screen
force_rollup	ccx_decoders_608.h	/^	int force_rollup; \/\/ 0=Disabled, 1, 2 or 3=max lines in roll-up mode$/;"	m	struct:ccx_decoder_608_settings
format	ccx_decoders_isdb.c	/^	enum writing_format format;$/;"	m	struct:__anon11	typeref:enum:__anon11::writing_format	file:
format	ccx_decoders_structs.h	/^	enum ccx_eia608_format format;$/;"	m	struct:eia608_screen	typeref:enum:eia608_screen::ccx_eia608_format
fppng	spupng_encoder.h	/^	FILE* fppng;$/;"	m	struct:spupng_t
fpxml	spupng_encoder.h	/^	FILE* fpxml;$/;"	m	struct:spupng_t
frame	ffmpeg_intgr.c	/^	AVFrame *frame;$/;"	m	struct:ffmpeg_ctx	file:
frame_mbs_only_flag	avc_functions.h	/^	int frame_mbs_only_flag;$/;"	m	struct:avc_ctx
frame_num	avc_functions.h	/^	LLONG frame_num;$/;"	m	struct:avc_ctx
frame_rate	ccx_gxf.c	/^	struct ccx_rational frame_rate;$/;"	m	struct:ccx_gxf_video_track	typeref:struct:ccx_gxf_video_track::ccx_rational	file:
frame_rate	ccx_gxf.c	/^	uint32_t frame_rate;$/;"	m	struct:ccx_gxf_ancillary_data_track	file:
frame_rate	lib_ccx.h	/^	unsigned frame_rate;$/;"	m	struct:file_report
framerates_types	ccx_common_constants.c	/^const char *framerates_types[16]=$/;"	v
framerates_values	ccx_common_constants.c	/^const double framerates_values[16]=$/;"	v
frames_since_last_gop	ccx_decoders_structs.h	/^	int frames_since_last_gop;$/;"	m	struct:lib_cc_decode
frames_since_ref_time	ccx_common_timing.c	/^int frames_since_ref_time = 0;$/;"	v
free_ca_mode	ts_functions.h	/^	uint8_t free_ca_mode;$/;"	m	struct:EPG_event
freep	ccx_common_common.c	/^void freep(void *arg)$/;"	f
freport	ccx_demuxer.h	/^	struct ccx_demux_report freport;$/;"	m	struct:ccx_demuxer	typeref:struct:ccx_demuxer::ccx_demux_report
freport	lib_ccx.h	/^	struct file_report freport;$/;"	m	struct:lib_ccx_ctx	typeref:struct:lib_ccx_ctx::file_report
fs_version	ccx_gxf.c	/^	uint32_t fs_version;$/;"	m	struct:ccx_gxf_ancillary_data_track	file:
fs_version	ccx_gxf.c	/^	uint32_t fs_version;$/;"	m	struct:ccx_gxf_video_track	file:
fscale	ccx_decoders_isdb.c	/^	struct fscale { \/\/ in [percent]$/;"	s	struct:__anon11	file:
fscx	ccx_decoders_isdb.c	/^		int fscx, fscy;$/;"	m	struct:__anon11::fscale	file:
fscy	ccx_decoders_isdb.c	/^		int fscx, fscy;$/;"	m	struct:__anon11::fscale	file:
fsync	ccx_encoders_common.c	/^int fsync(int fd)$/;"	f
fts_at_gop_start	ccx_common_timing.c	/^LLONG fts_at_gop_start = 0;$/;"	v
fts_fc_offset	ccx_common_timing.h	/^	LLONG fts_fc_offset; \/\/ Time before first GOP$/;"	m	struct:ccx_common_timing_ctx
fts_global	ccx_common_timing.h	/^	LLONG fts_global; \/\/ Duration of previous files (-ve mode)$/;"	m	struct:ccx_common_timing_ctx
fts_max	ccx_common_timing.h	/^	LLONG fts_max; \/\/ Remember the maximum fts that we saw in current file$/;"	m	struct:ccx_common_timing_ctx
fts_now	ccx_common_timing.h	/^	LLONG fts_now; \/\/ Time stamp of current file (w\/ fts_offset, w\/o fts_global)$/;"	m	struct:ccx_common_timing_ctx
fts_offset	ccx_common_timing.h	/^	LLONG fts_offset; \/\/ Time before first sync_pts$/;"	m	struct:ccx_common_timing_ctx
fullbin	ccx_common_option.h	/^	int fullbin; \/\/ Disable pruning of padding cc blocks$/;"	m	struct:ccx_s_options
fullbin	ccx_decoders_structs.h	/^	int fullbin; \/\/ Disable pruning of padding cc blocks$/;"	m	struct:ccx_decoders_common_settings_t
fullbin	ccx_decoders_structs.h	/^	int fullbin; \/\/ Disable pruning of padding cc blocks$/;"	m	struct:lib_cc_decode
fuzzy_memcmp	telxcc.c	/^int fuzzy_memcmp (const char *c1, const char *c2, const uint64_t *ucs2_buf1, unsigned ucs2_buf1_len,$/;"	f
g0_charsets_t	telxcc.c	/^} g0_charsets_t;$/;"	t	typeref:enum:__anon6	file:
g0_m29	telxcc.c	/^	uint8_t g0_m29;$/;"	m	struct:s_primary_charset	file:
g0_x28	telxcc.c	/^	uint8_t g0_x28;$/;"	m	struct:s_primary_charset	file:
general_getmoredata	general_loop.c	/^int general_getmoredata(struct lib_ccx_ctx *ctx, struct demuxer_data **data)$/;"	f
general_loop	general_loop.c	/^void general_loop(struct lib_ccx_ctx *ctx)$/;"	f
get_basename	utility.c	/^char *get_basename(char *filename)$/;"	f
get_best_data	ts_functions.c	/^struct demuxer_data *get_best_data(struct demuxer_data *data)$/;"	f
get_best_sib_stream	ts_info.c	/^struct cap_info* get_best_sib_stream(struct cap_info* program)$/;"	f
get_best_stream	ts_info.c	/^int get_best_stream(struct ccx_demuxer *ctx)$/;"	f
get_bits	dvb_subtitle_decoder.c	/^static __inline unsigned int get_bits(GetBitContext *s, int n)$/;"	f	file:
get_bits1	dvb_subtitle_decoder.c	/^static __inline unsigned int get_bits1(GetBitContext *s)$/;"	f	file:
get_bits_count	dvb_subtitle_decoder.c	/^static __inline int get_bits_count(const GetBitContext *s)$/;"	f	file:
get_buffer_type	ts_functions.c	/^enum ccx_stream_type get_buffer_type(struct cap_info *cinfo)$/;"	f
get_buffer_type_str	ts_functions.c	/^char *get_buffer_type_str(struct cap_info *cinfo)$/;"	f
get_char_in_latin_1	ccx_common_char_encoding.c	/^void get_char_in_latin_1 (unsigned char *buffer, unsigned char c)$/;"	f
get_char_in_unicode	ccx_common_char_encoding.c	/^void get_char_in_unicode (unsigned char *buffer, unsigned char c)$/;"	f
get_char_in_utf_8	ccx_common_char_encoding.c	/^int get_char_in_utf_8 (unsigned char *buffer, unsigned char c) \/\/ Returns number of bytes used$/;"	f
get_cinfo	ts_info.c	/^struct cap_info * get_cinfo(struct ccx_demuxer *ctx, int pid)$/;"	f
get_clut	dvb_subtitle_decoder.c	/^static DVBSubCLUT* get_clut(DVBSubContext *ctx, int clut_id)$/;"	f	file:
get_color_encoded	ccx_encoders_g608.c	/^static unsigned int get_color_encoded(struct encoder_ctx *ctx, unsigned char *buffer, int line_num, struct eia608_screen *data)$/;"	f	file:
get_csi_params	ccx_decoders_isdb.c	/^static int get_csi_params(const uint8_t *q, unsigned int *p1, unsigned int *p2)$/;"	f	file:
get_current_visible_buffer	ccx_decoders_608.c	/^struct eia608_screen *get_current_visible_buffer(ccx_decoder_608_context *context)$/;"	f
get_data	wtv_functions.c	/^LLONG get_data(struct lib_ccx_ctx *ctx, struct wtv_chunked_buffer *cb, struct demuxer_data *data)$/;"	f
get_data_stream	ts_info.c	/^struct demuxer_data *get_data_stream(struct demuxer_data *data, int pid)$/;"	f
get_decoder_line_encoded	ccx_encoders_helpers.c	/^unsigned get_decoder_line_encoded(struct encoder_ctx *ctx, unsigned char *buffer, int line_num, struct eia608_screen *data)$/;"	f
get_decoder_line_encoded_for_gui	ccx_encoders_helpers.c	/^unsigned get_decoder_line_encoded_for_gui(unsigned char *buffer, int line_num, struct eia608_screen *data)$/;"	f
get_encoder_by_pn	lib_ccx.c	/^struct encoder_ctx *get_encoder_by_pn(struct lib_ccx_ctx *ctx, int pn)$/;"	f
get_file_extension	utility.c	/^char *get_file_extension(enum ccx_output_format write_format)$/;"	f
get_filesize	ccx_demuxer.h	/^	LLONG (*get_filesize) (struct ccx_demuxer *ctx);$/;"	m	struct:ccx_demuxer
get_font_encoded	ccx_encoders_g608.c	/^static unsigned int get_font_encoded(struct encoder_ctx *ctx, unsigned char *buffer, int line_num, struct eia608_screen *data)$/;"	f	file:
get_fts	ccx_common_timing.c	/^LLONG get_fts(struct ccx_common_timing_ctx *ctx, int current_field)$/;"	f
get_fts_max	ccx_common_timing.c	/^LLONG get_fts_max(struct ccx_common_timing_ctx *ctx)$/;"	f
get_line_encoded	ccx_encoders_g608.c	/^static unsigned int get_line_encoded(struct encoder_ctx *ctx, unsigned char *buffer, int line_num, struct eia608_screen *data)$/;"	f	file:
get_meta_chunk_start	wtv_functions.c	/^uint64_t get_meta_chunk_start(uint64_t offset)$/;"	f
get_object	dvb_subtitle_decoder.c	/^static DVBSubObject* get_object(DVBSubContext *ctx, int object_id)$/;"	f	file:
get_output_ctx	ccx_encoders_common.c	/^struct ccx_s_write *get_output_ctx(struct encoder_ctx *ctx, int lan)$/;"	f
get_printable_stream_type	ts_tables.c	/^unsigned get_printable_stream_type (enum ccx_stream_type stream_type)$/;"	f
get_programme_number	ts_info.c	/^int get_programme_number(struct ccx_demuxer *ctx, int pid)$/;"	f
get_pts	myth.c	/^static LLONG get_pts(struct ccx_demuxer *ctx, int c)$/;"	f	file:
get_region	dvb_subtitle_decoder.c	/^static DVBSubRegion* get_region(DVBSubContext *ctx, int region_id)$/;"	f	file:
get_sib_stream_by_type	ts_info.c	/^struct cap_info *get_sib_stream_by_type(struct cap_info* program, enum ccx_code_type type)$/;"	f
get_sized_buffer	wtv_functions.c	/^void get_sized_buffer(struct ccx_demuxer *ctx, struct wtv_chunked_buffer *cb, uint32_t size)$/;"	f
get_spupng_filename	spupng_encoder.c	/^char* get_spupng_filename(void *ctx)$/;"	f
get_str_basic	ccx_encoders_common.c	/^int get_str_basic(unsigned char *out_buffer, unsigned char *in_buffer, int trim_subs,$/;"	f
get_stream_mode	ccx_demuxer.h	/^	int (*get_stream_mode)(struct ccx_demuxer *ctx);$/;"	m	struct:ccx_demuxer
get_text	ccx_decoders_isdb.c	/^static int get_text(ISDBSubContext *ctx, unsigned char *buffer, int len)$/;"	f	file:
get_visible_end	ccx_decoders_common.c	/^LLONG get_visible_end (struct ccx_common_timing_ctx *ctx, int current_field)$/;"	f
get_visible_start	ccx_decoders_common.c	/^LLONG get_visible_start (struct ccx_common_timing_ctx *ctx, int current_field)$/;"	f
get_writing_buffer	ccx_decoders_608.c	/^struct eia608_screen *get_writing_buffer(ccx_decoder_608_context *context)$/;"	f
getfilesize	file_functions.c	/^LLONG getfilesize (int in)$/;"	f
gettotalfilessize	file_functions.c	/^LLONG gettotalfilessize (struct lib_ccx_ctx *ctx) \/\/ -1 if one or more files failed to open$/;"	f
global_timestamp	ccx_demuxer.h	/^	int64_t global_timestamp;$/;"	m	struct:ccx_demuxer
global_timestamp	telxcc.c	/^	uint32_t global_timestamp;$/;"	m	struct:TeletextCtx	file:
global_timestamp_inited	ccx_demuxer.h	/^	int global_timestamp_inited;$/;"	m	struct:ccx_demuxer
gop_accepted	ccx_common_timing.c	/^int gop_accepted(struct gop_time_code* g )$/;"	f
gop_header	es_functions.c	/^static int gop_header(struct lib_cc_decode *ctx, struct bitstream *esstream, struct cc_subtitle *sub)$/;"	f	file:
gop_rollover	ccx_common_timing.c	/^int gop_rollover = 0;$/;"	v
gop_time	ccx_common_timing.c	/^struct gop_time_code gop_time, first_gop_time, printed_gop;$/;"	v	typeref:struct:gop_time_code
gop_time_code	ccx_common_timing.h	/^struct gop_time_code$/;"	s
got_output	ccx_common_structs.h	/^	int got_output;$/;"	m	struct:cc_subtitle
got_seq_para	avc_functions.h	/^	int got_seq_para;$/;"	m	struct:avc_ctx
gui_ftn	ccx_common_structs.h	/^	void(*gui_ftn)(enum ccx_common_logging_gui message_type, ...); \/\/ Used to display things in a gui (if appropriate). Is called with the message_type and appropriate variables (described in enum)$/;"	m	struct:ccx_common_logging_t
gui_mode_reports	ccx_common_option.h	/^	int gui_mode_reports; \/\/ If 1, output in stderr progress updates so the GUI can grab them$/;"	m	struct:ccx_s_options
gui_mode_reports	ccx_common_option.h	/^	int gui_mode_reports; \/\/ If 1, output in stderr progress updates so the GUI can grab them$/;"	m	struct:encoder_cfg
gui_mode_reports	ccx_encoders_common.h	/^	int gui_mode_reports; \/\/ If 1, output in stderr progress updates so the GUI can grab them$/;"	m	struct:encoder_ctx
gui_mode_reports	lib_ccx.h	/^	int gui_mode_reports; \/\/ If 1, output in stderr progress updates so the GUI can grab them$/;"	m	struct:ccx_s_teletext_config
gui_mode_reports	telxcc.c	/^	int gui_mode_reports; \/\/ If 1, output in stderr progress updates so the GUI can grab them$/;"	m	struct:TeletextCtx	file:
guidstr	asf_functions.c	/^char *guidstr(void *val)$/;"	f
h	ccx_decoders_isdb.c	/^		int w, h;$/;"	m	struct:__anon11::disp_area	file:
h	ccx_decoders_structs.h	/^	int h;$/;"	m	struct:cc_bitmap
halt	ccx_decoders_608.h	/^	int *halt; \/\/ Can be used to halt the feeding of caption data. Set to 1 if screens_to_progress != -1 && screenfuls_counter >= screens_to_process$/;"	m	struct:ccx_decoder_608_context
hamming_h_included	hamming.h	6;"	d
handle_command	ccx_decoders_608.c	/^void handle_command(unsigned char c1, const unsigned char c2, ccx_decoder_608_context *context, struct cc_subtitle *sub)$/;"	f
handle_double	ccx_decoders_608.c	/^void handle_double(const unsigned char c1, const unsigned char c2, ccx_decoder_608_context *context)$/;"	f
handle_extended	ccx_decoders_608.c	/^unsigned char handle_extended(unsigned char hi, unsigned char lo, ccx_decoder_608_context *context)$/;"	f
handle_pac	ccx_decoders_608.c	/^void handle_pac(unsigned char c1, unsigned char c2, ccx_decoder_608_context *context)$/;"	f
handle_single	ccx_decoders_608.c	/^void handle_single(const unsigned char c1, ccx_decoder_608_context *context)$/;"	f
handle_text_attr	ccx_decoders_608.c	/^void handle_text_attr(const unsigned char c1, const unsigned char c2, ccx_decoder_608_context *context)$/;"	f
handle_write_error	networking.c	/^void handle_write_error()$/;"	f
has_ccdata_buffered	ccx_decoders_structs.h	/^	int has_ccdata_buffered;$/;"	m	struct:lib_cc_decode
has_simple	ts_functions.h	/^	uint8_t has_simple;$/;"	m	struct:EPG_event
haup_capbuf	ts_functions.c	/^static unsigned char *haup_capbuf = NULL;$/;"	v	file:
haup_capbuflen	ts_functions.c	/^static long haup_capbuflen = 0; \/\/ Bytes read in haup_capbuf$/;"	v	file:
haup_capbufsize	ts_functions.c	/^static long haup_capbufsize = 0;$/;"	v	file:
hauppauge_mode	ccx_common_option.h	/^	unsigned int hauppauge_mode; \/\/ If 1, use PID=1003, process specially and so on$/;"	m	struct:ccx_s_options
hauppauge_mode	ccx_decoders_structs.h	/^	unsigned int hauppauge_mode; \/\/ If 1, use PID=1003, process specially and so on$/;"	m	struct:ccx_decoders_common_settings_t
hauppauge_mode	ccx_decoders_structs.h	/^	unsigned int hauppauge_mode; \/\/ If 1, use PID=1003, process specially and so on$/;"	m	struct:lib_cc_decode
hauppauge_mode	lib_ccx.h	/^	unsigned int hauppauge_mode; \/\/ If 1, use PID=1003, process specially and so on$/;"	m	struct:lib_ccx_ctx
hauppauge_warning_shown	ccx_demuxer.h	/^	unsigned hauppauge_warning_shown; \/\/ Did we detect a possible Hauppauge capture and told the user already?$/;"	m	struct:ccx_demuxer
have_cursor_position	ccx_decoders_608.h	/^	int have_cursor_position;$/;"	m	struct:ccx_decoder_608_context
hbg_color	ccx_decoders_isdb.c	/^	uint32_t hbg_color;$/;"	m	struct:__anon12	file:
header_state	myth.c	/^static unsigned int header_state;$/;"	v	file:
height	dvb_subtitle_decoder.c	/^	int height;$/;"	m	struct:DVBSubDisplayDefinition	file:
height	dvb_subtitle_decoder.c	/^	int height;$/;"	m	struct:DVBSubRegion	file:
height	lib_ccx.h	/^	unsigned height;$/;"	m	struct:file_report
hex2int	utility.c	/^int hex2int (char high, char low)$/;"	f
hfg_color	ccx_decoders_isdb.c	/^	uint32_t hfg_color;$/;"	m	struct:__anon12	file:
hh	ccx_common_timing.h	/^	int hh,mm,ss;$/;"	m	struct:ccx_boundary_time
hide_timestamp	telxcc.c	/^	uint64_t hide_timestamp; \/\/ hide at timestamp (in ms)$/;"	m	struct:__anon1	file:
hlist_add_after	list.h	/^static inline void hlist_add_after(struct hlist_node *n,$/;"	f
hlist_add_before	list.h	/^static inline void hlist_add_before(struct hlist_node *n,$/;"	f
hlist_add_head	list.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f
hlist_del	list.h	/^static inline void hlist_del(struct hlist_node *n)$/;"	f
hlist_del_init	list.h	/^static inline void hlist_del_init(struct hlist_node *n)$/;"	f
hlist_empty	list.h	/^static inline int hlist_empty(const struct hlist_head *h)$/;"	f
hlist_entry	list.h	449;"	d
hlist_for_each	list.h	451;"	d
hlist_for_each_entry	list.h	466;"	d
hlist_for_each_entry_continue	list.h	478;"	d
hlist_for_each_entry_from	list.h	490;"	d
hlist_for_each_entry_safe	list.h	503;"	d
hlist_for_each_safe	list.h	455;"	d
hlist_head	list.h	/^struct hlist_head {$/;"	s
hlist_node	list.h	/^struct hlist_node {$/;"	s
hlist_unhashed	list.h	/^static inline int hlist_unhashed(const struct hlist_node *h)$/;"	f
hour	ccx_decoders_isdb.c	/^		int hour;$/;"	m	struct:__anon13::__anon14	file:
how_many_used	ccx_decoders_xds.c	/^int how_many_used(struct ccx_decoders_xds_context *ctx)$/;"	f
i	cc_bitstream.c	/^int64_t i(struct bitstream *bstr, unsigned bnum)$/;"	f
iResult	file_functions.c	/^int iResult = 0;$/;"	v
id	ccx_gxf.c	/^	unsigned char id;$/;"	m	struct:ccx_gxf_ancillary_data_track	file:
id	dvb_subtitle_decoder.c	/^	int id;$/;"	m	struct:DVBSubCLUT	file:
id	dvb_subtitle_decoder.c	/^	int id;$/;"	m	struct:DVBSubObject	file:
id	dvb_subtitle_decoder.c	/^	int id;$/;"	m	struct:DVBSubRegion	file:
id	ts_functions.h	/^	uint32_t id;$/;"	m	struct:EPG_event
ifmt	ffmpeg_intgr.c	/^	AVFormatContext *ifmt;$/;"	m	struct:ffmpeg_ctx	file:
ignore	ccx_demuxer.h	/^	int ignore;$/;"	m	struct:cap_info
ignore_alpha_at_edge	ocr.c	/^int ignore_alpha_at_edge(png_byte *alpha, unsigned char* indata, int w, int h, PIX *in, PIX **out)$/;"	f
ignore_other_sib_stream	ts_info.c	/^void ignore_other_sib_stream(struct cap_info* head, int pid)$/;"	f
ignore_other_stream	ts_info.c	/^void ignore_other_stream(struct ccx_demuxer *ctx, int pid)$/;"	f
ignore_xds	ccx_decoders_structs.h	/^	int ignore_xds;$/;"	m	struct:ccx_decoders_common_settings_t
ilut16	dvb_subtitle_decoder.c	/^	uint8_t ilut16[16];$/;"	m	struct:DVBSubCLUT	file:
ilut256	dvb_subtitle_decoder.c	/^	uint8_t ilut256[256];$/;"	m	struct:DVBSubCLUT	file:
ilut4	dvb_subtitle_decoder.c	/^	uint8_t ilut4[4];$/;"	m	struct:DVBSubCLUT	file:
in_addr_t	ccx_common_platform.h	/^		typedef uint32_t in_addr_t;$/;"	t
in_array	utility.c	/^bool_t in_array(uint16_t *array, uint16_t length, uint16_t element)$/;"	f
in_bufferdatatype	ccx_decoders_structs.h	/^	enum ccx_bufferdata_type in_bufferdatatype;$/;"	m	struct:lib_cc_decode	typeref:enum:lib_cc_decode::ccx_bufferdata_type
in_fileformat	ccx_encoders_common.h	/^	unsigned int in_fileformat; \/\/1 =Normal, 2=Teletext$/;"	m	struct:encoder_ctx
in_format	ccx_common_option.h	/^	unsigned char in_format;$/;"	m	struct:encoder_cfg
in_pic_data	ccx_decoders_structs.h	/^	int in_pic_data;$/;"	m	struct:lib_cc_decode
in_use	ccx_decoders_xds.c	/^	unsigned in_use;$/;"	m	struct:xds_buffer	file:
in_xds_mode	ccx_decoders_608.c	/^int in_xds_mode=0;$/;"	v
inc_spupng_fileindex	spupng_encoder.c	/^void inc_spupng_fileindex(void *ctx)$/;"	f
index	dvb_subtitle_decoder.c	/^	int index;$/;"	m	struct:GetBitContext	file:
infd	ccx_demuxer.h	/^	int infd; \/\/ descriptor number to input.$/;"	m	struct:ccx_demuxer
info	ccx_common_structs.h	/^	char info[4];$/;"	m	struct:cc_subtitle
init_avc	avc_functions.c	/^struct avc_ctx *init_avc(void)$/;"	f
init_bitstream	cc_bitstream.c	/^int init_bitstream(struct bitstream *bstr, unsigned char *start, unsigned char *end)$/;"	f
init_boundary_time	utility.c	/^void init_boundary_time (struct ccx_boundary_time *bt)$/;"	f
init_cc_decode	ccx_decoders_common.c	/^struct lib_cc_decode* init_cc_decode (struct ccx_decoders_common_settings_t *setting)$/;"	f
init_chunked_buffer	wtv_functions.c	/^void init_chunked_buffer(struct wtv_chunked_buffer *cb)$/;"	f
init_ctx_outbase	lib_ccx.c	/^static int init_ctx_outbase(struct ccx_s_options *opt, struct lib_ccx_ctx *ctx)$/;"	f	file:
init_decoder_setting	lib_ccx.c	/^static struct ccx_decoders_common_settings_t *init_decoder_setting($/;"	f	file:
init_decoder_vbi	ccx_decoders_vbi.c	/^struct ccx_decoder_vbi_ctx* init_decoder_vbi(struct ccx_decoder_vbi_cfg *cfg)$/;"	f
init_demuxer	ccx_demuxer.c	/^struct ccx_demuxer *init_demuxer(void *parent, struct demuxer_cfg *cfg)$/;"	f
init_encoder	ccx_encoders_common.c	/^struct encoder_ctx *init_encoder(struct encoder_cfg *opt)$/;"	f
init_ffmpeg	ffmpeg_intgr.c	/^void *init_ffmpeg(const char *path)$/;"	f
init_file_buffer	file_functions.c	/^int init_file_buffer(struct ccx_demuxer *ctx)$/;"	f
init_get_bits	dvb_subtitle_decoder.c	/^static __inline int init_get_bits(GetBitContext *s, const uint8_t *buffer,$/;"	f	file:
init_hdcc	sequencing.c	/^void init_hdcc (struct lib_cc_decode *ctx)$/;"	f
init_isdb_decoder	ccx_decoders_isdb.c	/^void *init_isdb_decoder(void)$/;"	f
init_layout	ccx_decoders_isdb.c	/^static void init_layout(ISDBSubLayout *ls)$/;"	f	file:
init_libraries	lib_ccx.c	/^struct lib_ccx_ctx* init_libraries(struct ccx_s_options *opt)$/;"	f
init_ocr	ocr.c	/^void* init_ocr(int lang_index)$/;"	f
init_options	ccx_common_option.c	/^void init_options (struct ccx_s_options *options)$/;"	f
init_output_ctx	ccx_encoders_common.c	/^static int init_output_ctx(struct encoder_ctx *ctx, struct encoder_cfg *cfg)$/;"	f	file:
init_private_data	ts_info.c	/^static void* init_private_data(enum ccx_code_type codec)$/;"	f	file:
init_sockets	networking.c	/^void init_sockets (void)$/;"	f
init_timing_ctx	ccx_common_timing.c	/^struct ccx_common_timing_ctx *init_timing_ctx(struct ccx_common_timing_settings_t *cfg)$/;"	f
init_ts	ts_functions.c	/^void init_ts(struct ccx_demuxer *ctx)$/;"	f
init_write	output.c	/^int init_write (struct ccx_s_write *wb, char *filename)$/;"	f
inited	ccx_common_timing.h	/^	int inited;$/;"	m	struct:gop_time_code
initialized	spupng_encoder.c	/^static int initialized = 0;$/;"	v	file:
inline	ccx_common_platform.h	17;"	d
input_source	ccx_common_option.h	/^	enum ccx_datasource input_source; \/\/ Files, stdin or network$/;"	m	struct:ccx_s_options	typeref:enum:ccx_s_options::ccx_datasource
inputfile	ccx_common_option.h	/^	char **inputfile; \/\/ List of files to process$/;"	m	struct:ccx_s_options
inputfile	lib_ccx.h	/^	char **inputfile; \/\/ List of files to process$/;"	m	struct:lib_ccx_ctx
inputfile_capacity	params.c	/^static int inputfile_capacity=0;$/;"	v	file:
inputsize	lib_ccx.h	/^	LLONG inputsize;$/;"	m	struct:lib_ccx_ctx
int16_t	stdintmsc.h	/^typedef __int16           int16_t;$/;"	t
int32_t	stdintmsc.h	/^typedef __int32           int32_t;$/;"	t
int64_t	stdintmsc.h	/^typedef __int64           int64_t;$/;"	t
int64_t_C	ccx_common_platform.h	105;"	d
int8_t	stdintmsc.h	/^typedef __int8            int8_t;$/;"	t
int_fast16_t	stdintmsc.h	/^typedef int16_t   int_fast16_t;$/;"	t
int_fast32_t	stdintmsc.h	/^typedef int32_t   int_fast32_t;$/;"	t
int_fast64_t	stdintmsc.h	/^typedef int64_t   int_fast64_t;$/;"	t
int_fast8_t	stdintmsc.h	/^typedef int8_t    int_fast8_t;$/;"	t
int_least16_t	stdintmsc.h	/^typedef int16_t   int_least16_t;$/;"	t
int_least32_t	stdintmsc.h	/^typedef int32_t   int_least32_t;$/;"	t
int_least64_t	stdintmsc.h	/^typedef int64_t   int_least64_t;$/;"	t
int_least8_t	stdintmsc.h	/^typedef int8_t    int_least8_t;$/;"	t
intmax_t	stdintmsc.h	/^typedef int64_t   intmax_t;$/;"	t
intptr_t	stdintmsc.h	/^   typedef _W64 int               intptr_t;$/;"	t
intptr_t	stdintmsc.h	/^   typedef __int64           intptr_t;$/;"	t
investigate_packets	ccx_common_option.h	/^	int investigate_packets; \/\/ Look for captions in all packets when everything else fails$/;"	m	struct:ccx_s_options
isFinal	ccx_encoders_structs.h	/^	int isFinal; \/\/ Used to determine if these parameters should be changed afterwards.$/;"	m	struct:ccx_encoders_transcript_format
isValidMP4Box	stream_functions.c	/^int isValidMP4Box(unsigned char *buffer, size_t position, size_t *nextBoxLocation, int *boxScore)$/;"	f
is_active	ccx_decoders_708.h	/^	int is_active;$/;"	m	struct:ccx_dtvcc_ctx
is_byte_aligned	cc_bitstream.c	/^int is_byte_aligned(struct bitstream *bstr)$/;"	f
is_current_row_empty	ccx_decoders_608.c	/^int is_current_row_empty(ccx_decoder_608_context *context)$/;"	f
is_decoder_processed_enough	lib_ccx.c	/^int is_decoder_processed_enough(struct lib_ccx_ctx *ctx)$/;"	f
is_defined	ccx_decoders_708.h	/^	int is_defined;$/;"	m	struct:ccx_dtvcc_window
is_elementary_stream	ccx_common_timing.h	/^	int is_elementary_stream; \/\/ Needs to be set, as it's used in set_fts.$/;"	m	struct:ccx_common_timing_settings_t
is_empty	ccx_decoders_708.h	/^	int is_empty;$/;"	m	struct:ccx_dtvcc_window
is_open	ccx_demuxer.h	/^	int (*is_open)(struct ccx_demuxer *ctx);$/;"	m	struct:ccx_demuxer
isanumber	params.c	/^int isanumber (char *s)$/;"	f
isdb_CC_composition	ccx_decoders_isdb.c	/^enum isdb_CC_composition$/;"	g	file:
isdb_command_log	ccx_decoders_isdb.c	17;"	d	file:
isdb_command_log	ccx_decoders_isdb.c	19;"	d	file:
isdb_log	ccx_decoders_isdb.c	11;"	d	file:
isdb_log	ccx_decoders_isdb.c	13;"	d	file:
isdb_parse_data_group	ccx_decoders_isdb.c	/^int isdb_parse_data_group(void *codec_ctx,const uint8_t *buf, struct cc_subtitle *sub)$/;"	f
isdb_set_global_time	ccx_decoders_isdb.c	/^int isdb_set_global_time(struct lib_cc_decode *dec_ctx, uint64_t timestamp)$/;"	f
isdb_tmd	ccx_decoders_isdb.c	/^enum isdb_tmd$/;"	g	file:
isdbsub_decode	ccx_decoders_isdb.c	/^int isdbsub_decode(struct lib_cc_decode *dec_ctx, const uint8_t *buf, size_t buf_size, struct cc_subtitle *sub)$/;"	f
italic	ccx_decoders_708.h	/^	int italic;$/;"	m	struct:ccx_dtvcc_pen_attribs
justify	ccx_decoders_708.h	/^	int justify;$/;"	m	struct:ccx_dtvcc_window_attribs
keep_output_closed	ccx_common_option.h	/^	int keep_output_closed;$/;"	m	struct:ccx_s_options
keep_output_closed	ccx_common_option.h	/^	int keep_output_closed;$/;"	m	struct:encoder_cfg
keep_output_closed	ccx_encoders_common.h	/^	unsigned int keep_output_closed; $/;"	m	struct:encoder_ctx
lang_index	ccx_common_structs.h	/^	int lang_index;$/;"	m	struct:cc_subtitle
lang_index	dvb_subtitle_decoder.c	/^	int lang_index;$/;"	m	struct:DVBSubContext	file:
lang_index	dvb_subtitle_decoder.h	/^	unsigned int lang_index[MAX_LANGUAGE_PER_DESC];$/;"	m	struct:dvb_config
language	ccx_common_constants.c	/^const char *language[NB_LANGUAGE] =$/;"	v
language	telxcc.c	/^	const char *language;$/;"	m	struct:__anon7	file:
last_c1	ccx_decoders_608.h	/^	unsigned char last_c1, last_c2;$/;"	m	struct:ccx_decoder_608_context
last_c2	ccx_decoders_608.h	/^	unsigned char last_c1, last_c2;$/;"	m	struct:ccx_decoder_608_context
last_displayed_subs_ms	ccx_encoders_common.h	/^	LLONG last_displayed_subs_ms;$/;"	m	struct:encoder_ctx
last_displayed_subs_ms	lib_ccx.h	/^	LLONG last_displayed_subs_ms; \/\/ When did the last subs end?$/;"	m	struct:lib_ccx_ctx
last_field_nb	ccx_gxf.c	/^	int32_t last_field_nb;$/;"	m	struct:ccx_gxf	file:
last_global_timestamp	ccx_demuxer.h	/^	int64_t last_global_timestamp;$/;"	m	struct:ccx_demuxer
last_gop_length	ccx_decoders_structs.h	/^	int last_gop_length; \/\/ Length of the previous group of pictures$/;"	m	struct:lib_cc_decode
last_gop_maxtref	avc_functions.h	/^	int last_gop_maxtref;$/;"	m	struct:avc_ctx
last_pat_length	ccx_demuxer.h	/^	unsigned last_pat_length;$/;"	m	struct:ccx_demuxer
last_pat_payload	ccx_demuxer.h	/^	unsigned char *last_pat_payload;$/;"	m	struct:ccx_demuxer
last_pic_order_cnt_lsb	avc_functions.h	/^	LLONG last_pic_order_cnt_lsb;$/;"	m	struct:avc_ctx
last_pmt_length	ts_functions.h	/^	unsigned last_pmt_length;$/;"	m	struct:PAT_entry
last_pmt_payload	ts_functions.h	/^	unsigned char *last_pmt_payload;$/;"	m	struct:PAT_entry
last_reported_progress	lib_ccx.h	/^	int last_reported_progress;$/;"	m	struct:lib_ccx_ctx
last_sequence	ccx_decoders_708.h	/^	int last_sequence;$/;"	m	struct:ccx_dtvcc_ctx
last_slice_pts	avc_functions.h	/^	LLONG last_slice_pts;$/;"	m	struct:avc_ctx
last_timestamp	telxcc.c	/^	uint64_t last_timestamp;$/;"	m	struct:TeletextCtx	file:
lastframe_num	avc_functions.h	/^	LLONG lastframe_num;$/;"	m	struct:avc_ctx
lastmaxidx	avc_functions.h	/^	int lastmaxidx;$/;"	m	struct:avc_ctx
lastminidx	avc_functions.h	/^	int lastminidx;$/;"	m	struct:avc_ctx
layout_state	ccx_decoders_isdb.c	/^	ISDBSubLayout layout_state;$/;"	m	struct:__anon12	file:
lc1	ccx_common_constants.c	/^const unsigned char lc1[1]={0x8a};$/;"	v
lc2	ccx_common_constants.c	/^const unsigned char lc2[1]={0x8f};$/;"	v
lc3	ccx_common_constants.c	/^const unsigned char lc3[2]={0x16,0xfe};$/;"	v
lc4	ccx_common_constants.c	/^const unsigned char lc4[2]={0x1e,0xfe};$/;"	v
lc5	ccx_common_constants.c	/^const unsigned char lc5[1]={0xff};$/;"	v
lc6	ccx_common_constants.c	/^const unsigned char lc6[1]={0xfe};$/;"	v
len	ccx_decoders_708.h	/^	unsigned char len; \/\/length. could be 1 or 2$/;"	m	struct:ccx_dtvcc_symbol
len	ccx_decoders_isdb.c	/^	size_t len;$/;"	m	struct:ISDBText	file:
len	ccx_demuxer.h	/^	size_t len;$/;"	m	struct:demuxer_data
length	ccx_decoders_708.h	/^	int length;$/;"	m	struct:CCX_DTVCC_S_COMMANDS_C1
length	ts_functions.h	/^	unsigned length;      \/\/ Payload length$/;"	m	struct:ts_payload
levdistmaxpct	ccx_common_option.h	/^	int levdistmincnt, levdistmaxpct; \/\/ Means 2 fails or less is "the same", 10% or less is also "the same"$/;"	m	struct:ccx_s_options
levdistmaxpct	lib_ccx.h	/^	int levdistmincnt, levdistmaxpct; \/\/ Means 2 fails or less is "the same", 10% or less is also "the same"$/;"	m	struct:ccx_s_teletext_config
levdistmaxpct	telxcc.c	/^	int levdistmincnt, levdistmaxpct; \/\/ Means 2 fails or less is "the same", 10% or less is also "the same"$/;"	m	struct:TeletextCtx	file:
levdistmincnt	ccx_common_option.h	/^	int levdistmincnt, levdistmaxpct; \/\/ Means 2 fails or less is "the same", 10% or less is also "the same"$/;"	m	struct:ccx_s_options
levdistmincnt	lib_ccx.h	/^	int levdistmincnt, levdistmaxpct; \/\/ Means 2 fails or less is "the same", 10% or less is also "the same"$/;"	m	struct:ccx_s_teletext_config
levdistmincnt	telxcc.c	/^	int levdistmincnt, levdistmaxpct; \/\/ Means 2 fails or less is "the same", 10% or less is also "the same"$/;"	m	struct:TeletextCtx	file:
levenshtein_dist	utility.c	/^int levenshtein_dist (const uint64_t *s1, const uint64_t *s2, unsigned s1len, unsigned s2len)$/;"	f
lib_cc_decode	ccx_decoders_structs.h	/^struct lib_cc_decode$/;"	s
lib_ccx_ctx	lib_ccx.h	/^struct lib_ccx_ctx$/;"	s
line_per_frame	ccx_gxf.c	/^	uint32_t line_per_frame;$/;"	m	struct:ccx_gxf_ancillary_data_track	file:
line_per_frame	ccx_gxf.c	/^	uint32_t line_per_frame;$/;"	m	struct:ccx_gxf_video_track	file:
line_terminator_lf	ccx_common_option.h	/^	int line_terminator_lf; \/\/ 0 = CRLF, 1=LF$/;"	m	struct:encoder_cfg
linesize	ccx_decoders_structs.h	/^	int linesize[2];$/;"	m	struct:cc_bitmap
list	ccx_decoders_isdb.c	/^	struct list_head list;$/;"	m	struct:ISDBText	typeref:struct:ISDBText::list_head	file:
list	ccx_decoders_structs.h	/^	struct list_head list;$/;"	m	struct:lib_cc_decode	typeref:struct:lib_cc_decode::list_head
list	ccx_encoders_common.h	/^	struct list_head list;$/;"	m	struct:encoder_ctx	typeref:struct:encoder_ctx::list_head
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_entry	list.h	225;"	d
list_for_each	list.h	234;"	d
list_for_each_entry	list.h	277;"	d
list_for_each_entry_continue	list.h	310;"	d
list_for_each_entry_reverse	list.h	288;"	d
list_for_each_entry_safe	list.h	322;"	d
list_for_each_entry_safe_continue	list.h	336;"	d
list_for_each_entry_safe_reverse	list.h	350;"	d
list_for_each_prev	list.h	256;"	d
list_for_each_safe	list.h	266;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_prepare_entry	list.h	300;"	d
list_splice	list.h	/^static inline void list_splice(struct list_head *list, struct list_head *head)$/;"	f
list_splice_init	list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
live_output	ts_functions.h	/^	uint8_t live_output; \/\/boolean flag, true if this event has been output$/;"	m	struct:EPG_event
live_stream	ccx_common_option.h	/^	int live_stream; \/* -1 -> Not a complete file but a live stream, without timeout$/;"	m	struct:ccx_s_options
live_stream	lib_ccx.h	/^	int live_stream; \/* -1 -> Not a complete file but a live stream, without timeout$/;"	m	struct:lib_ccx_ctx
log	ccx_gxf.c	30;"	d	file:
log2_max_frame_num	avc_functions.h	/^	int log2_max_frame_num;$/;"	m	struct:avc_ctx
log2_max_pic_order_cnt_lsb	avc_functions.h	/^	int log2_max_pic_order_cnt_lsb;$/;"	m	struct:avc_ctx
log_cb	ffmpeg_intgr.c	/^static void log_cb(void* ptr, int level, const char* fmt, va_list vl)$/;"	f	file:
log_ftn	ccx_common_structs.h	/^	void(*log_ftn)(const char *fmt, ...); \/\/ Used to print things. Replacement of standard printf, to allow more control.$/;"	m	struct:ccx_common_logging_t
look_for_caption_data	ts_functions.c	/^void look_for_caption_data (struct ccx_demuxer *ctx, struct ts_payload *payload)$/;"	f
m2ts	ccx_common_option.h	/^	int m2ts; \/\/ Regular TS or M2TS$/;"	m	struct:demuxer_cfg
m2ts	ccx_demuxer.h	/^	int m2ts;$/;"	m	struct:ccx_demuxer
m_signal	utility.c	/^void m_signal(int sig, void (*func)(int))$/;"	f
make_byte_aligned	cc_bitstream.c	/^void make_byte_aligned(struct bitstream *bstr)$/;"	f
mapclut_paletee	spupng_encoder.c	/^int mapclut_paletee(png_color *palette, png_byte *alpha, uint32_t *clut,$/;"	f
mark_in	ccx_gxf.c	/^	int32_t mark_in;$/;"	m	struct:ccx_gxf	file:
mark_out	ccx_gxf.c	/^	int32_t mark_out;$/;"	m	struct:ccx_gxf	file:
marker_bit	ccx_common_timing.h	/^	int marker_bit;$/;"	m	struct:gop_time_code
mat_color	ccx_decoders_isdb.c	/^	uint32_t mat_color;$/;"	m	struct:__anon12	file:
max_dif	ccx_common_timing.c	/^int max_dif = 5;$/;"	v
max_gop_length	ccx_decoders_structs.h	/^	int max_gop_length; \/\/ (Maximum) length of a group of pictures$/;"	m	struct:lib_cc_decode
max_pts	ccx_common_timing.h	/^	LLONG max_pts;$/;"	m	struct:ccx_common_timing_ctx
maxidx	avc_functions.h	/^	int maxidx;$/;"	m	struct:avc_ctx
maxtref	avc_functions.h	/^	int maxtref;$/;"	m	struct:avc_ctx
maxtref	ccx_decoders_structs.h	/^	int maxtref; \/\/ Use to remember the temporal reference number$/;"	m	struct:lib_cc_decode
media_name	ccx_gxf.c	/^	char media_name[STR_LEN];$/;"	m	struct:ccx_gxf	file:
memory_reserved	ccx_decoders_708.h	/^	int memory_reserved;$/;"	m	struct:ccx_dtvcc_window
messages_target	ccx_common_option.h	/^	int messages_target; \/\/ 0 = nowhere (quiet), 1=stdout, 2=stderr$/;"	m	struct:ccx_s_options
milli	ccx_decoders_isdb.c	/^		int milli;$/;"	m	struct:__anon13::__anon14	file:
millis_separator	ccx_common_option.h	/^	char millis_separator;$/;"	m	struct:ccx_s_options
millis_separator	ccx_common_option.h	/^	char millis_separator;$/;"	m	struct:encoder_cfg
millis_separator	ccx_encoders_common.h	/^	char millis_separator;$/;"	m	struct:encoder_ctx
millis_separator	lib_ccx.h	/^	char millis_separator;$/;"	m	struct:ccx_s_teletext_config
millis_separator	telxcc.c	/^	char millis_separator;$/;"	m	struct:TeletextCtx	file:
millis_to_date	utility.c	/^void millis_to_date (uint64_t timestamp, char *buffer, enum ccx_output_date_format date_format, char millis_separator)$/;"	f
min	ccx_decoders_isdb.c	/^		int min;$/;"	m	struct:__anon13::__anon14	file:
min_global_timestamp	ccx_demuxer.h	/^	int64_t min_global_timestamp;$/;"	m	struct:ccx_demuxer
min_pts	ccx_common_timing.h	/^	LLONG min_pts;$/;"	m	struct:ccx_common_timing_ctx
minidx	avc_functions.h	/^	int minidx;$/;"	m	struct:avc_ctx
minimum_fts	ccx_common_timing.h	/^	LLONG minimum_fts; \/\/ No screen should start before this FTS$/;"	m	struct:ccx_common_timing_ctx
mkdir	ccx_common_platform.h	35;"	d
mm	ccx_common_timing.h	/^	int hh,mm,ss;$/;"	m	struct:ccx_boundary_time
mode	ccx_common_structs.h	/^	char mode[5];$/;"	m	struct:cc_subtitle
mode	ccx_decoders_608.h	/^	enum cc_modes mode;$/;"	m	struct:ccx_decoder_608_context	typeref:enum:ccx_decoder_608_context::cc_modes
mode	ccx_decoders_structs.h	/^	enum cc_modes mode;$/;"	m	struct:eia608_screen	typeref:enum:eia608_screen::cc_modes
move_penpos	ccx_decoders_isdb.c	/^static void move_penpos(ISDBSubContext *ctx, int col, int row)$/;"	f	file:
mp4_cc_track_cnt	ccx_demuxer.h	/^        unsigned mp4_cc_track_cnt;$/;"	m	struct:ccx_demux_report
mp4_cc_track_cnt	lib_ccx.h	/^	unsigned mp4_cc_track_cnt;$/;"	m	struct:file_report
mp4_cfg	lib_ccx.h	/^	struct ccx_s_mp4Cfg mp4_cfg;$/;"	m	struct:lib_ccx_ctx	typeref:struct:lib_ccx_ctx::ccx_s_mp4Cfg
mp4vidtrack	ccx_common_option.h	/^	unsigned mp4vidtrack; \/\/ Process the video track even if a CC dedicated track exists.$/;"	m	struct:ccx_s_options
mp4vidtrack	lib_ccx.h	/^	unsigned int mp4vidtrack :1;$/;"	m	struct:ccx_s_mp4Cfg
mpeg_picture_coding	ccx_gxf.c	/^enum mpeg_picture_coding$/;"	g	file:
mpeg_picture_struct	ccx_gxf.c	/^enum mpeg_picture_struct$/;"	g	file:
mpegps_psm_parse	myth.c	/^static long mpegps_psm_parse(struct ccx_demuxer *ctx)$/;"	f	file:
mpegps_read_packet	myth.c	/^static int mpegps_read_packet(struct ccx_demuxer *ctx)$/;"	f	file:
mpegps_read_pes_header	myth.c	/^static int mpegps_read_pes_header(struct ccx_demuxer *ctx, int *pstart_code,$/;"	f	file:
mprint	utility.c	/^void mprint (const char *fmt, ...)$/;"	f
ms	ccx_common_timing.h	/^	LLONG ms;$/;"	m	struct:gop_time_code
mstime_sprintf	ccx_common_timing.c	/^size_t mstime_sprintf(LLONG mstime, char *fmt, char *buf)$/;"	f
mstotime	ccx_common_common.c	/^void mstotime(LLONG milli, unsigned *hours, unsigned *minutes,$/;"	f
multi_stream_per_prog	ccx_demuxer.h	/^	int multi_stream_per_prog;$/;"	m	struct:ccx_demuxer
multiple_files	ccx_common_option.h	/^	int multiple_files;$/;"	m	struct:encoder_cfg
multiple_files	ccx_encoders_common.h	/^	int multiple_files;$/;"	m	struct:encoder_ctx
multiprogram	ccx_common_option.h	/^	int multiprogram;$/;"	m	struct:ccx_s_options
multiprogram	lib_ccx.h	/^	int multiprogram;$/;"	m	struct:lib_ccx_ctx
my_channel	ccx_decoders_608.h	/^	int my_channel; \/\/ Used for sanity checks$/;"	m	struct:ccx_decoder_608_context
my_field	ccx_decoders_608.h	/^	int my_field; \/\/ Used for sanity checks$/;"	m	struct:ccx_decoder_608_context
my_field	ccx_decoders_structs.h	/^	int my_field; \/\/ Used for sanity checks$/;"	m	struct:eia608_screen
myth_loop	myth.c	/^void myth_loop(struct lib_ccx_ctx *ctx)$/;"	f
n_language	dvb_subtitle_decoder.h	/^	unsigned char n_language;$/;"	m	struct:dvb_config
nal_ref_idc	avc_functions.h	/^	unsigned nal_ref_idc;$/;"	m	struct:avc_ctx
name	ccx_decoders_708.h	/^	const char *name;$/;"	m	struct:CCX_DTVCC_S_COMMANDS_C1
name	ccx_demuxer.h	/^	char name[MAX_PROGRAM_NAME_LEN];$/;"	m	struct:program_info
name	configuration.c	/^	char *name;$/;"	m	struct:conf_map	file:
nb_char	ccx_decoders_isdb.c	/^	int nb_char;$/;"	m	struct:__anon13	file:
nb_colors	ccx_decoders_structs.h	/^	int nb_colors;$/;"	m	struct:cc_bitmap
nb_data	ccx_common_structs.h	/^	unsigned int nb_data;$/;"	m	struct:cc_subtitle
nb_field	ccx_gxf.c	/^	int nb_field;$/;"	m	struct:ccx_gxf_ancillary_data_track	file:
nb_lang	ccx_decoders_isdb.c	/^	int nb_lang;$/;"	m	struct:__anon13	file:
nb_line	ccx_decoders_isdb.c	/^	int nb_line;$/;"	m	struct:__anon13	file:
nb_out	ccx_encoders_common.h	/^	int nb_out;$/;"	m	struct:encoder_ctx
nb_program	ccx_demuxer.h	/^	int nb_program;$/;"	m	struct:ccx_demuxer
nb_streams	ccx_gxf.c	/^	int nb_streams;$/;"	m	struct:ccx_gxf	file:
nb_ts_cappid	ccx_common_option.h	/^	int nb_ts_cappid;$/;"	m	struct:demuxer_cfg
need_capInfo	ts_info.c	/^int need_capInfo(struct ccx_demuxer *ctx, int program_number)$/;"	f
need_capInfo_for_pid	ts_info.c	/^int need_capInfo_for_pid(struct ccx_demuxer *ctx, int pid)$/;"	f
need_init	ccx_decoders_isdb.c	/^	uint8_t need_init; \/\/ bool$/;"	m	struct:__anon12	file:
need_program	ts_tables.c	/^int need_program(struct ccx_demuxer *ctx)$/;"	f
net_activity_gui	activity.c	/^unsigned long net_activity_gui=0;$/;"	v
net_check_conn	networking.c	/^void net_check_conn()$/;"	f
net_send_cc	networking.c	/^int net_send_cc(const unsigned char *data, int len, void *private_data, struct cc_subtitle *sub)$/;"	f
net_send_epg	networking.c	/^void net_send_epg($/;"	f
net_send_header	networking.c	/^void net_send_header(const unsigned char *data, size_t len)$/;"	f
net_tcp_read	networking.c	/^int net_tcp_read(int socket, void *buffer, size_t length)$/;"	f
new_channel	ccx_decoders_608.h	/^	int new_channel; \/\/ The new channel after a channel change$/;"	m	struct:ccx_decoder_608_context
new_sentence	ccx_encoders_common.h	/^	int new_sentence; \/\/ Capitalize next letter?$/;"	m	struct:encoder_ctx
next	ccx_common_structs.h	/^	struct cc_subtitle *next;$/;"	m	struct:cc_subtitle	typeref:struct:cc_subtitle::cc_subtitle
next	dvb_subtitle_decoder.c	/^	struct DVBSubCLUT *next;$/;"	m	struct:DVBSubCLUT	typeref:struct:DVBSubCLUT::DVBSubCLUT	file:
next	dvb_subtitle_decoder.c	/^	struct DVBSubObject *next;$/;"	m	struct:DVBSubObject	typeref:struct:DVBSubObject::DVBSubObject	file:
next	dvb_subtitle_decoder.c	/^	struct DVBSubRegion *next;$/;"	m	struct:DVBSubRegion	typeref:struct:DVBSubRegion::DVBSubRegion	file:
next	dvb_subtitle_decoder.c	/^	struct DVBSubRegionDisplay *next;$/;"	m	struct:DVBSubRegionDisplay	typeref:struct:DVBSubRegionDisplay::DVBSubRegionDisplay	file:
next	list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
next	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
next_bits	cc_bitstream.c	/^uint64_t next_bits(struct bitstream *bstr, unsigned bnum)$/;"	f
next_bytes	cc_bitstream.c	/^unsigned char *next_bytes(struct bitstream *bstr, unsigned bynum)$/;"	f
next_i16	bitstream.h	46;"	d
next_i32	bitstream.h	47;"	d
next_i64	bitstream.h	48;"	d
next_i8	bitstream.h	45;"	d
next_program	ccx_demuxer.h	/^	struct demuxer_data *next_program;$/;"	m	struct:demuxer_data	typeref:struct:demuxer_data::demuxer_data
next_start_code	es_functions.c	/^static uint8_t next_start_code(struct bitstream *esstream)$/;"	f	file:
next_stream	ccx_demuxer.h	/^	struct demuxer_data *next_stream;$/;"	m	struct:demuxer_data	typeref:struct:demuxer_data::demuxer_data
next_u16	bitstream.h	42;"	d
next_u32	bitstream.h	43;"	d
next_u64	bitstream.h	44;"	d
next_u8	bitstream.h	41;"	d
no_bitstream_error	ccx_decoders_structs.h	/^	int no_bitstream_error;$/;"	m	struct:lib_cc_decode
no_bom	ccx_common_option.h	/^	int no_bom; \/\/ Set to 1 when no BOM (Byte Order Mark) should be used for files. Note, this might make files unreadable in windows!$/;"	m	struct:encoder_cfg
no_bom	ccx_encoders_common.h	/^	int no_bom;$/;"	m	struct:encoder_ctx
no_font_color	ccx_common_option.h	/^	int no_font_color;$/;"	m	struct:encoder_cfg
no_font_color	ccx_encoders_common.h	/^	int no_font_color;$/;"	m	struct:encoder_ctx
no_font_color	ccx_encoders_helpers.h	/^	int no_font_color;$/;"	m	struct:ccx_encoders_helpers_settings_t
no_progress_bar	ccx_common_option.h	/^	int no_progress_bar; \/\/ If 1, suppress the output of the progress to stdout$/;"	m	struct:ccx_s_options
no_rollup	ccx_common_option.h	/^	int no_rollup;$/;"	m	struct:ccx_s_options
no_rollup	ccx_decoders_608.h	/^	int no_rollup; \/\/ If 1, write one line at a time$/;"	m	struct:ccx_decoder_608_settings
no_rollup	ccx_decoders_708.h	/^	int no_rollup;$/;"	m	struct:ccx_decoder_dtvcc_settings
no_rollup	ccx_decoders_708.h	/^	int no_rollup;$/;"	m	struct:ccx_dtvcc_ctx
no_rollup	ccx_decoders_structs.h	/^	int no_rollup; \/\/ If 1, write one line at a time$/;"	m	struct:lib_cc_decode
no_rollup	ccx_decoders_structs.h	/^	int no_rollup;$/;"	m	struct:ccx_decoders_common_settings_t
no_sync	ccx_common_timing.h	/^	int no_sync; \/\/ If 1, there will be no sync at all. Mostly useful for debugging.$/;"	m	struct:ccx_common_timing_settings_t
no_type_setting	ccx_common_option.h	/^	int no_type_setting;$/;"	m	struct:encoder_cfg
no_type_setting	ccx_encoders_common.h	/^	int no_type_setting;$/;"	m	struct:encoder_ctx
no_type_setting	ccx_encoders_helpers.h	/^	int no_type_setting;$/;"	m	struct:ccx_encoders_helpers_settings_t
noautotimeref	ccx_common_option.h	/^	int noautotimeref; \/\/ Do NOT set time automatically?$/;"	m	struct:ccx_s_options
noautotimeref	lib_ccx.h	/^	int noautotimeref; \/\/ Do NOT set time automatically?$/;"	m	struct:ccx_s_teletext_config
noautotimeref	telxcc.c	/^	int noautotimeref; \/\/ Do NOT set time automatically?$/;"	m	struct:TeletextCtx	file:
nocodec	ccx_common_option.h	/^	enum ccx_code_type nocodec;$/;"	m	struct:demuxer_cfg	typeref:enum:demuxer_cfg::ccx_code_type
nocodec	ccx_demuxer.h	/^	enum ccx_code_type nocodec;$/;"	m	struct:ccx_demuxer	typeref:enum:ccx_demuxer::ccx_code_type
nofontcolor	ccx_common_option.h	/^	int nofontcolor;$/;"	m	struct:ccx_s_options
nofontcolor	lib_ccx.h	/^	int nofontcolor;$/;"	m	struct:ccx_s_teletext_config
nohtmlescape	ccx_common_option.h	/^	int nohtmlescape;$/;"	m	struct:ccx_s_options
nohtmlescape	lib_ccx.h	/^	int nohtmlescape;$/;"	m	struct:ccx_s_teletext_config
nonempty	lib_ccx.h	/^	uint8_t nonempty : 1; \/\/ produce at least one (dummy) frame$/;"	m	struct:ccx_s_teletext_config
nonempty	telxcc.c	/^	uint8_t nonempty : 1; \/\/ produce at least one (dummy) frame$/;"	m	struct:TeletextCtx	file:
noscte20	ccx_common_option.h	/^	int noscte20;$/;"	m	struct:ccx_s_options
noscte20	ccx_decoders_structs.h	/^	int noscte20;$/;"	m	struct:ccx_decoders_common_settings_t
noscte20	ccx_decoders_structs.h	/^	int noscte20;$/;"	m	struct:lib_cc_decode
nosync	ccx_common_option.h	/^	int nosync; \/\/ Disable syncing$/;"	m	struct:ccx_s_options
notypesetting	ccx_common_option.h	/^	int notypesetting;$/;"	m	struct:ccx_s_options
num	utility.h	/^	int num;$/;"	m	struct:ccx_rational
num_categories	ts_functions.h	/^	uint32_t num_categories;$/;"	m	struct:EPG_event
num_input_files	ccx_common_option.h	/^	int num_input_files; \/\/ How many?$/;"	m	struct:ccx_s_options
num_input_files	lib_ccx.h	/^	int num_input_files; \/\/ How many?$/;"	m	struct:lib_ccx_ctx
num_jump_in_frames	avc_functions.h	/^	long num_jump_in_frames;$/;"	m	struct:avc_ctx
num_nal_hrd	avc_functions.h	/^	long num_nal_hrd;$/;"	m	struct:avc_ctx
num_nal_unit_type_7	avc_functions.h	/^	long num_nal_unit_type_7;$/;"	m	struct:avc_ctx
num_ratings	ts_functions.h	/^	uint32_t num_ratings;$/;"	m	struct:EPG_event
num_unexpected_sei_length	avc_functions.h	/^	long num_unexpected_sei_length;$/;"	m	struct:avc_ctx
num_vcl_hrd	avc_functions.h	/^	long num_vcl_hrd;$/;"	m	struct:avc_ctx
number	ccx_decoders_708.h	/^	int number;$/;"	m	struct:ccx_dtvcc_window
object_id	dvb_subtitle_decoder.c	/^	int object_id;$/;"	m	struct:DVBSubObjectDisplay	file:
object_list	dvb_subtitle_decoder.c	/^	DVBSubObject *object_list;$/;"	m	struct:DVBSubContext	file:
object_list_next	dvb_subtitle_decoder.c	/^	struct DVBSubObjectDisplay *object_list_next;$/;"	m	struct:DVBSubObjectDisplay	typeref:struct:DVBSubObjectDisplay::DVBSubObjectDisplay	file:
ocrCtx	ocr.c	/^struct ocrCtx$/;"	s	file:
ocr_bitmap	ocr.c	/^char* ocr_bitmap(png_color *palette,png_byte *alpha, unsigned char* indata,unsigned char d,int w, int h)$/;"	f
ocr_bitmap	ocr.c	/^char* ocr_bitmap(void* arg, png_color *palette,png_byte *alpha, unsigned char* indata,int w, int h)$/;"	f
ocr_ctx	dvb_subtitle_decoder.c	/^	void *ocr_ctx;$/;"	m	struct:DVBSubContext	file:
ocr_rect	ocr.c	/^int ocr_rect(void* arg, struct cc_bitmap *rect, char **str)$/;"	f
ocr_text	ccx_decoders_structs.h	/^	char *ocr_text;$/;"	m	struct:cc_bitmap
offset	ccx_decoders_708.h	/^	int offset;$/;"	m	struct:ccx_dtvcc_pen_attribs
offset	configuration.c	/^	int offset;$/;"	m	struct:conf_map	file:
offset	lib_ccx.h	/^	double offset; \/\/ time offset in seconds$/;"	m	struct:ccx_s_teletext_config
offset	telxcc.c	/^	double offset; \/\/ time offset in seconds$/;"	m	struct:TeletextCtx	file:
offset_global_timestamp	ccx_demuxer.h	/^	int64_t offset_global_timestamp;$/;"	m	struct:ccx_demuxer
offset_time	ccx_decoders_isdb.c	/^	}offset_time;$/;"	m	struct:__anon13	typeref:struct:__anon13::__anon14	file:
open	ccx_demuxer.h	/^	int (*open)(struct ccx_demuxer *ctx, const char *file_name);$/;"	m	struct:ccx_demuxer
out	ccx_encoders_common.h	/^	struct ccx_s_write *out;$/;"	m	struct:encoder_ctx	typeref:struct:encoder_ctx::ccx_s_write
out_elementarystream_filename	ccx_common_option.h	/^	char *out_elementarystream_filename;$/;"	m	struct:demuxer_cfg
out_interval	ccx_common_option.h	/^	int out_interval;$/;"	m	struct:ccx_s_options
out_interval	lib_ccx.h	/^	int out_interval;$/;"	m	struct:lib_ccx_ctx
output_filename	ccx_common_option.h	/^	char *output_filename;$/;"	m	struct:ccx_s_options
output_filename	ccx_common_option.h	/^	char *output_filename;$/;"	m	struct:encoder_cfg
output_format	ccx_decoders_608.h	/^	enum ccx_output_format output_format; \/\/ What kind of output format should be used?$/;"	m	struct:ccx_decoder_608_context	typeref:enum:ccx_decoder_608_context::ccx_output_format
output_format	ccx_decoders_structs.h	/^	enum ccx_output_format output_format; \/\/ What kind of output format should be used?$/;"	m	struct:ccx_decoders_common_settings_t	typeref:enum:ccx_decoders_common_settings_t::ccx_output_format
p_code	ccx_gxf.c	/^	enum mpeg_picture_coding p_code;$/;"	m	struct:ccx_gxf_video_track	typeref:enum:ccx_gxf_video_track::mpeg_picture_coding	file:
p_struct	ccx_gxf.c	/^	enum mpeg_picture_struct p_struct;$/;"	m	struct:ccx_gxf_video_track	typeref:enum:ccx_gxf_video_track::mpeg_picture_struct	file:
pac2_attribs	ccx_decoders_608.c	/^const unsigned char pac2_attribs[][3] = \/\/ Color, font, ident$/;"	v
packet_size	ccx_gxf.c	/^	int packet_size;$/;"	m	struct:ccx_gxf_ancillary_data_track	file:
page	lib_ccx.h	/^	uint16_t page; \/\/ teletext page containing cc we want to filter$/;"	m	struct:ccx_s_teletext_config
page	telxcc.c	/^	uint16_t page; \/\/ teletext page containing cc we want to filter$/;"	m	struct:TeletextCtx	file:
page_buffer	telxcc.c	/^	teletext_page_t page_buffer;$/;"	m	struct:TeletextCtx	file:
page_buffer_add_char	telxcc.c	/^void page_buffer_add_char (struct TeletextCtx *ctx, char c)$/;"	f
page_buffer_add_string	telxcc.c	/^void page_buffer_add_string (struct TeletextCtx *ctx, const char *s)$/;"	f
page_buffer_cur	telxcc.c	/^	char *page_buffer_cur;$/;"	m	struct:TeletextCtx	file:
page_buffer_cur_size	telxcc.c	/^	unsigned page_buffer_cur_size;$/;"	m	struct:TeletextCtx	file:
page_buffer_cur_used	telxcc.c	/^	unsigned page_buffer_cur_used;$/;"	m	struct:TeletextCtx	file:
page_buffer_prev	telxcc.c	/^	char *page_buffer_prev;$/;"	m	struct:TeletextCtx	file:
page_buffer_prev_size	telxcc.c	/^	unsigned page_buffer_prev_size;$/;"	m	struct:TeletextCtx	file:
page_buffer_prev_used	telxcc.c	/^	unsigned page_buffer_prev_used;$/;"	m	struct:TeletextCtx	file:
palette	ccx_encoders_spupng.c	/^static png_color palette[10] =$/;"	v	file:
palette	ocr.c	/^	png_color *palette;$/;"	m	struct:transIntensity	file:
params_dump	params_dump.c	/^void params_dump(struct lib_ccx_ctx *ctx)$/;"	f
paraof_ocrtext	ocr.c	/^char *paraof_ocrtext(struct cc_subtitle *sub)$/;"	f
parent	ccx_demuxer.h	/^	void *parent;$/;"	m	struct:ccx_demuxer
parse_708_services	params.c	/^void parse_708_services (struct ccx_s_options *opts, char *s)$/;"	f
parse_EPG_packet	ts_tables_epg.c	/^void parse_EPG_packet(struct lib_ccx_ctx *ctx)$/;"	f
parse_PAT	ts_tables.c	/^int parse_PAT (struct ccx_demuxer *ctx)$/;"	f
parse_PMT	ts_tables.c	/^int parse_PMT (struct ccx_demuxer *ctx, unsigned char *buf, int len,  struct program_info *pinfo)$/;"	f
parse_SDT	ts_tables.c	/^void parse_SDT(struct ccx_demuxer *ctx)$/;"	f
parse_ad_cdp	ccx_gxf.c	/^int parse_ad_cdp (unsigned char*cdp, size_t len, struct demuxer_data *data)$/;"	f
parse_ad_field	ccx_gxf.c	/^static int parse_ad_field(struct ccx_demuxer *demux, int len, struct demuxer_data *data)$/;"	f	file:
parse_ad_packet	ccx_gxf.c	/^static int parse_ad_packet(struct ccx_demuxer *demux, int len, struct demuxer_data *data)$/;"	f	file:
parse_ad_pyld	ccx_gxf.c	/^static int parse_ad_pyld(struct ccx_demuxer *demux, int len, struct demuxer_data *data)$/;"	f	file:
parse_ad_track_desc	ccx_gxf.c	/^static int parse_ad_track_desc(struct ccx_demuxer *demux, int len)$/;"	f	file:
parse_ad_vbi	ccx_gxf.c	/^static int parse_ad_vbi(struct ccx_demuxer *demux, int len, struct demuxer_data *data)$/;"	f	file:
parse_caption_management_data	ccx_decoders_isdb.c	/^static int parse_caption_management_data(ISDBSubContext *ctx, const uint8_t *buf, int size)$/;"	f	file:
parse_caption_statement_data	ccx_decoders_isdb.c	/^static int parse_caption_statement_data(ISDBSubContext *ctx, int lang_id, const uint8_t *buf, int size, struct cc_subtitle *sub)$/;"	f	file:
parse_command	ccx_decoders_isdb.c	/^static int parse_command(ISDBSubContext *ctx, const uint8_t *buf, int len)$/;"	f	file:
parse_configuration	configuration.c	/^void parse_configuration(struct ccx_s_options *opt)$/;"	f
parse_csi	ccx_decoders_isdb.c	/^static int parse_csi(ISDBSubContext *ctx, const uint8_t *buf, int len)$/;"	f	file:
parse_data_unit	ccx_decoders_isdb.c	/^static int parse_data_unit(ISDBSubContext *ctx,const uint8_t *buf, int size)$/;"	f	file:
parse_dvb_description	dvb_subtitle_decoder.c	/^int parse_dvb_description(struct dvb_config* cfg, unsigned char*data,$/;"	f
parse_file	configuration.c	/^static void parse_file(FILE *f,struct ccx_s_options *opt)$/;"	f	file:
parse_flt	ccx_gxf.c	/^static int parse_flt(struct ccx_demuxer *ctx, int len)$/;"	f	file:
parse_map	ccx_gxf.c	/^static int parse_map(struct ccx_demuxer *ctx, int len, struct demuxer_data *data)$/;"	f	file:
parse_material_sec	ccx_gxf.c	/^static int parse_material_sec(struct ccx_demuxer *demux, int len)$/;"	f	file:
parse_media	ccx_gxf.c	/^static int parse_media(struct ccx_demuxer *demux, int len, struct demuxer_data *data)$/;"	f	file:
parse_mpeg525_track_desc	ccx_gxf.c	/^static int parse_mpeg525_track_desc(struct ccx_demuxer *demux, int len)$/;"	f	file:
parse_mpeg_packet	ccx_gxf.c	/^static int parse_mpeg_packet(struct ccx_demuxer *demux, int len, struct demuxer_data *data)$/;"	f	file:
parse_opts	configuration.c	/^static int parse_opts(char *str, struct ccx_s_options *opt)$/;"	f	file:
parse_packet_header	ccx_gxf.c	/^static int parse_packet_header(struct ccx_demuxer *ctx, GXFPktType *type, int *length)$/;"	f	file:
parse_parameters	params.c	/^int parse_parameters (struct ccx_s_options *opt, int argc, char *argv[])$/;"	f
parse_statement	ccx_decoders_isdb.c	/^static int parse_statement(ISDBSubContext *ctx, const uint8_t *buf, int size)$/;"	f	file:
parse_track_sec	ccx_gxf.c	/^static int parse_track_sec(struct ccx_demuxer *demux, int len, struct demuxer_data *data)$/;"	f	file:
parse_umf	ccx_gxf.c	/^static int parse_umf(struct ccx_demuxer *ctx, int len)$/;"	f	file:
parse_val	configuration.c	/^	int (*parse_val)(void *var,char*val);$/;"	m	struct:conf_map	file:
parsebuf	asf_constants.h	/^	unsigned char *parsebuf;$/;"	m	struct:__anon9
parsebufsize	asf_constants.h	/^	long parsebufsize;$/;"	m	struct:__anon9
parsedelay	params.c	/^int parsedelay (struct ccx_s_options *opt, char *par)$/;"	f
past	ccx_demuxer.h	/^	LLONG past; \/* Position in file, if in sync same as ftell()  *\/$/;"	m	struct:ccx_demuxer
payloadcur	asf_constants.h	/^	int payloadcur; \/\/ local$/;"	m	struct:__anon9
pbuf	dvb_subtitle_decoder.c	/^	uint8_t *pbuf;$/;"	m	struct:DVBSubRegion	file:
pcr	ts_functions.h	/^	int64_t pcr;$/;"	m	struct:ts_payload
pcr_pid	ccx_demuxer.h	/^	int16_t pcr_pid;$/;"	m	struct:program_info
peek	spupng_encoder.c	142;"	d	file:
pen_attribs	ccx_decoders_708.h	/^	ccx_dtvcc_pen_attribs pen_attribs[CCX_DTVCC_MAX_ROWS];$/;"	m	struct:ccx_dtvcc_window
pen_attribs	ccx_decoders_708.h	/^	ccx_dtvcc_pen_attribs pen_attribs[CCX_DTVCC_SCREENGRID_ROWS];$/;"	m	struct:dtvcc_tv_screen
pen_colors	ccx_decoders_708.h	/^	ccx_dtvcc_pen_color pen_colors[CCX_DTVCC_MAX_ROWS];$/;"	m	struct:ccx_dtvcc_window
pen_colors	ccx_decoders_708.h	/^	ccx_dtvcc_pen_color pen_colors[CCX_DTVCC_SCREENGRID_ROWS];$/;"	m	struct:dtvcc_tv_screen
pen_column	ccx_decoders_708.h	/^	int pen_column;$/;"	m	struct:ccx_dtvcc_window
pen_row	ccx_decoders_708.h	/^	int pen_row;$/;"	m	struct:ccx_dtvcc_window
pen_size	ccx_decoders_708.h	/^	int pen_size;$/;"	m	struct:ccx_dtvcc_pen_attribs
pen_style	ccx_decoders_708.h	/^	int pen_style;$/;"	m	struct:ccx_dtvcc_window
pesheaderbuf	lib_ccx.h	/^	unsigned char *pesheaderbuf;$/;"	m	struct:lib_ccx_ctx
pesstart	ts_functions.h	/^	unsigned pesstart;    \/\/ PES or PSI start$/;"	m	struct:ts_payload
pg_stream	ccx_demuxer.h	/^	struct list_head pg_stream;$/;"	m	struct:cap_info	typeref:struct:cap_info::list_head
pic_coding_ext	es_functions.c	/^static int pic_coding_ext(struct lib_cc_decode *ctx, struct bitstream *esstream)$/;"	f	file:
pic_header	es_functions.c	/^static int pic_header(struct lib_cc_decode *ctx, struct bitstream *esstream)$/;"	f	file:
pic_order_cnt_type	avc_functions.h	/^	int pic_order_cnt_type;$/;"	m	struct:avc_ctx
pict_types	ccx_common_constants.c	/^const char *pict_types[8]=$/;"	v
picture_coding_type	ccx_decoders_structs.h	/^	enum ccx_frame_type picture_coding_type;$/;"	m	struct:lib_cc_decode	typeref:enum:lib_cc_decode::ccx_frame_type
picture_structure	ccx_decoders_structs.h	/^	unsigned picture_structure;$/;"	m	struct:lib_cc_decode
pid	ccx_demuxer.h	/^	int pid;$/;"	m	struct:cap_info
pid	ccx_demuxer.h	/^	int pid;$/;"	m	struct:program_info
pid	ts_functions.h	/^	unsigned pid;         \/\/ Stream PID$/;"	m	struct:ts_payload
pinfo	ccx_demuxer.h	/^	struct program_info pinfo[MAX_PROGRAM];$/;"	m	struct:ccx_demuxer	typeref:struct:ccx_demuxer::program_info
pmt_warning_shown	ts_tables.c	/^static unsigned pmt_warning_shown=0; \/\/ Only display warning once$/;"	v	file:
pngfile	spupng_encoder.h	/^	char* pngfile;$/;"	m	struct:spupng_t
poke	spupng_encoder.c	155;"	d	file:
pos	bitstream.h	/^	unsigned char *pos;$/;"	m	struct:bitstream
pos	ccx_decoders_isdb.c	/^	struct ISDBPos pos;$/;"	m	struct:ISDBText	typeref:struct:ISDBText::ISDBPos	file:
pos	myth.c	/^	LLONG pos;                            \/\/\/< byte position in stream, -1 if unknown$/;"	m	struct:AVPacket	file:
position_sanity_check	file_functions.c	/^void position_sanity_check (int in)$/;"	f
pprev	list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::
pr_command	networking.c	/^void pr_command(char c)$/;"	f
prepare_for_new_file	file_functions.c	/^void prepare_for_new_file (struct lib_ccx_ctx *ctx)$/;"	f
prev	ccx_common_structs.h	/^	struct cc_subtitle *prev;$/;"	m	struct:cc_subtitle	typeref:struct:cc_subtitle::cc_subtitle
prev	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
prevDecodeStreamPTS	asf_constants.h	/^	int prevDecodeStreamPTS; \/\/ Previous time$/;"	m	struct:__anon8
prevVideoStreamMS	asf_constants.h	/^	int prevVideoStreamMS;$/;"	m	struct:__anon8
prev_ccounter	ts_functions.h	/^	uint32_t prev_ccounter;$/;"	m	struct:PSI_buffer
prev_counter	ccx_demuxer.h	/^	int prev_counter;$/;"	m	struct:cap_info
prev_hide_timestamp	telxcc.c	/^	uint64_t prev_hide_timestamp;$/;"	m	struct:TeletextCtx	file:
prev_show_timestamp	telxcc.c	/^	uint64_t prev_show_timestamp;$/;"	m	struct:TeletextCtx	file:
prev_start	ccx_encoders_common.h	/^	LLONG prev_start;$/;"	m	struct:encoder_ctx
prev_timestamp	ccx_decoders_isdb.c	/^	uint64_t prev_timestamp;$/;"	m	struct:__anon13	file:
primary_charset	telxcc.c	/^} primary_charset = {$/;"	v	typeref:struct:s_primary_charset
print_cc_report	params_dump.c	/^void print_cc_report(struct lib_ccx_ctx *ctx, struct cap_info* info)$/;"	f
print_cfg	ccx_demuxer.h	/^	void (*print_cfg)(struct ccx_demuxer *ctx);$/;"	m	struct:ccx_demuxer
print_debug_timing	ccx_common_timing.c	/^void print_debug_timing(struct ccx_common_timing_ctx *ctx)$/;"	f
print_direction	ccx_decoders_708.h	/^	int print_direction;$/;"	m	struct:ccx_dtvcc_window_attribs
print_error	utility.c	/^void print_error (int mode, const char *fmt, ...)$/;"	f
print_file_report	params_dump.c	/^void print_file_report(struct lib_ccx_ctx *ctx)$/;"	f
print_file_reports	ccx_common_option.h	/^	int print_file_reports;$/;"	m	struct:ccx_s_options
print_file_reports	ccx_decoders_708.h	/^	int print_file_reports;$/;"	m	struct:ccx_decoder_dtvcc_settings
print_mstime	ccx_common_timing.c	/^char *print_mstime( LLONG mstime )$/;"	f
print_mstime2buf	ccx_common_timing.c	/^char *print_mstime2buf( LLONG mstime , char *buf )$/;"	f
printable_stream_type	ts_functions.h	/^	unsigned printable_stream_type;$/;"	m	struct:PMT_entry
printdata	output.c	/^void printdata (struct lib_cc_decode *ctx, const unsigned char *data1, int length1,$/;"	f
printed_gop	ccx_common_timing.c	/^struct gop_time_code gop_time, first_gop_time, printed_gop;$/;"	v	typeref:struct:
priority	ccx_decoders_708.h	/^	int priority;$/;"	m	struct:ccx_dtvcc_window
priv	myth.c	/^	void  *priv;$/;"	m	struct:AVPacket	file:
private_data	ccx_decoders_structs.h	/^	void *private_data;$/;"	m	struct:ccx_decoders_common_settings_t
private_data	ccx_decoders_structs.h	/^	void *private_data;$/;"	m	struct:lib_cc_decode
private_data	ccx_demuxer.h	/^	void *private_data;$/;"	m	struct:ccx_demuxer
process608	ccx_decoders_608.c	/^int process608(const unsigned char *data, int length, void *private_data, struct cc_subtitle *sub)$/;"	f
process_avc	avc_functions.c	/^size_t process_avc ( struct lib_cc_decode *ctx, unsigned char *avcbuf, size_t avcbuflen ,struct cc_subtitle *sub)$/;"	f
process_cap_file	params.c	/^int process_cap_file (char *filename)$/;"	f
process_cc_data	ccx_decoders_common.c	/^int process_cc_data (struct lib_cc_decode *ctx, unsigned char *cc_data, int cc_count, struct cc_subtitle *sub)$/;"	f
process_ccx_mpeg_descriptor	ts_tables.c	/^void process_ccx_mpeg_descriptor (unsigned char *data, unsigned length)$/;"	f
process_data	general_loop.c	/^int process_data(struct encoder_ctx *enc_ctx, struct lib_cc_decode *dec_ctx, struct demuxer_data *data_node)$/;"	f
process_hdcc	sequencing.c	/^void process_hdcc (struct lib_cc_decode *ctx, struct cc_subtitle *sub)$/;"	f
process_m2v	es_functions.c	/^size_t process_m2v (struct lib_cc_decode *ctx, unsigned char *data, size_t length, struct cc_subtitle *sub)$/;"	f
process_page	telxcc.c	/^void process_page(struct TeletextCtx *ctx, teletext_page_t *page, struct cc_subtitle *sub)$/;"	f
process_raw	general_loop.c	/^size_t process_raw(struct lib_cc_decode *ctx, struct cc_subtitle *sub, unsigned char *buffer, size_t len)$/;"	f
process_raw_with_field	general_loop.c	/^size_t process_raw_with_field(struct lib_cc_decode *dec_ctx, struct cc_subtitle *sub, unsigned char* buffer, size_t len)$/;"	f
process_telx_packet	telxcc.c	/^void process_telx_packet(struct TeletextCtx *ctx, data_unit_t data_unit_id, teletext_packet_payload_t *packet, uint64_t timestamp, struct cc_subtitle *sub)$/;"	f
process_xds_bytes	ccx_decoders_xds.c	/^void process_xds_bytes (struct ccx_decoders_xds_context *ctx, const unsigned char hi, int lo)$/;"	f
processed_enough	ccx_decoders_structs.h	/^	int processed_enough; \/\/ If 1, we have enough lines, time, etc.$/;"	m	struct:lib_cc_decode
processhex	general_loop.c	/^void processhex (struct lib_ccx_ctx *ctx, char *filename)$/;"	f
program_cnt	ccx_demuxer.h	/^        unsigned program_cnt;$/;"	m	struct:ccx_demux_report
program_info	ccx_demuxer.h	/^struct program_info$/;"	s
program_number	ccx_common_option.h	/^	int program_number;$/;"	m	struct:encoder_cfg
program_number	ccx_decoders_structs.h	/^	int program_number;$/;"	m	struct:ccx_decoders_common_settings_t
program_number	ccx_decoders_structs.h	/^	int program_number;$/;"	m	struct:lib_cc_decode
program_number	ccx_demuxer.h	/^	int program_number;$/;"	m	struct:cap_info
program_number	ccx_demuxer.h	/^	int program_number;$/;"	m	struct:demuxer_data
program_number	ccx_demuxer.h	/^	int program_number;$/;"	m	struct:program_info
program_number	ccx_encoders_common.h	/^	int program_number;$/;"	m	struct:encoder_ctx
program_number	ts_functions.h	/^	unsigned program_number;$/;"	m	struct:PAT_entry
program_number	ts_functions.h	/^	unsigned program_number;$/;"	m	struct:PMT_entry
programme_info_processed	telxcc.c	/^	uint8_t programme_info_processed;$/;"	m	struct:s_states	file:
progressive_frame	ccx_decoders_structs.h	/^	unsigned progressive_frame;$/;"	m	struct:lib_cc_decode
ps_getmoredata	general_loop.c	/^int ps_getmoredata(struct lib_ccx_ctx *ctx, struct demuxer_data ** ppdata)$/;"	f
psm_es_type	myth.c	/^static unsigned char psm_es_type[256];$/;"	v	file:
pts	ccx_demuxer.h	/^	LLONG pts;$/;"	m	struct:demuxer_data
pts	myth.c	/^	LLONG pts;                            \/\/\/< presentation time stamp in time_base units$/;"	m	struct:AVPacket	file:
pts_big_change	ccx_common_timing.c	/^unsigned pts_big_change;$/;"	v
pts_initialized	telxcc.c	/^	uint8_t pts_initialized;$/;"	m	struct:s_states	file:
pts_set	ccx_common_timing.h	/^	int pts_set; \/\/0 = No, 1 = received, 2 = min_pts set$/;"	m	struct:ccx_common_timing_ctx
pulldownfields	ccx_decoders_structs.h	/^	unsigned pulldownfields;$/;"	m	struct:lib_cc_decode
qsort_cmpint	wtv_functions.c	/^int qsort_cmpint (const void * a, const void * b)$/;"	f
quantize_map	ocr.c	/^static int quantize_map(png_byte *alpha, png_color *palette,$/;"	f	file:
raster_color	ccx_decoders_isdb.c	/^	uint32_t raster_color;$/;"	m	struct:__anon12	file:
ratings	ts_functions.h	/^	struct EPG_rating *ratings;$/;"	m	struct:EPG_event	typeref:struct:EPG_event::EPG_rating
raw_loop	general_loop.c	/^void raw_loop (struct lib_ccx_ctx *ctx)$/;"	f
rawmode	lib_ccx.h	/^	int rawmode; \/\/ Broadcast or DVD$/;"	m	struct:lib_ccx_ctx
rcwt_header	ccx_common_constants.c	/^unsigned char rcwt_header[11]={0xCC, 0xCC, 0xED, 0xCC, 0x00, 0x50, 0, 1, 0, 0, 0};$/;"	v
rcwt_loop	general_loop.c	/^void rcwt_loop(struct lib_ccx_ctx *ctx)$/;"	f
read_bits	cc_bitstream.c	/^uint64_t read_bits(struct bitstream *bstr, unsigned bnum)$/;"	f
read_block	networking.c	/^ssize_t read_block(int fd, char *command, char *buf, size_t *buf_len)$/;"	f
read_byte	networking.c	/^ssize_t read_byte(int fd, char *ch)$/;"	f
read_bytes	cc_bitstream.c	/^unsigned char *read_bytes(struct bitstream *bstr, unsigned bynum)$/;"	f
read_eau_info	es_functions.c	/^static int read_eau_info(struct lib_cc_decode* ctx, struct bitstream *esstream, int udtype, struct cc_subtitle *sub)$/;"	f	file:
read_gop_info	es_functions.c	/^static int read_gop_info(struct lib_cc_decode *ctx, struct bitstream *esstream, struct cc_subtitle *sub)$/;"	f	file:
read_header	wtv_functions.c	/^int read_header(struct ccx_demuxer *ctx, struct wtv_chunked_buffer *cb)$/;"	f
read_i16	bitstream.h	35;"	d
read_i32	bitstream.h	36;"	d
read_i64	bitstream.h	37;"	d
read_i8	bitstream.h	34;"	d
read_packet	ccx_gxf.c	/^static int read_packet(struct ccx_demuxer *ctx, struct demuxer_data *data)$/;"	f	file:
read_pic_data	es_functions.c	/^static int read_pic_data(struct bitstream *esstream)$/;"	f	file:
read_pic_info	es_functions.c	/^static int read_pic_info(struct lib_cc_decode *ctx, struct bitstream *esstream, struct cc_subtitle *sub)$/;"	f	file:
read_seq_info	es_functions.c	/^static int read_seq_info(struct lib_cc_decode *ctx, struct bitstream *esstream)$/;"	f	file:
read_u16	bitstream.h	31;"	d
read_u32	bitstream.h	32;"	d
read_u64	bitstream.h	33;"	d
read_u8	bitstream.h	30;"	d
read_video_pes_header	stream_functions.c	/^int read_video_pes_header (struct ccx_demuxer *ctx, struct demuxer_data *data, unsigned char *nextheader, int *headerlength, int sbuflen)$/;"	f
readn	networking.c	/^ssize_t readn(int fd, void *vptr, size_t n)$/;"	f
receiving_data	telxcc.c	/^	uint8_t receiving_data;$/;"	m	struct:TeletextCtx	file:
refcount	ccx_decoders_isdb.c	/^	int refcount;$/;"	m	struct:ISDBText	file:
region_id	dvb_subtitle_decoder.c	/^	int region_id;$/;"	m	struct:DVBSubObjectDisplay	file:
region_id	dvb_subtitle_decoder.c	/^	int region_id;$/;"	m	struct:DVBSubRegionDisplay	file:
region_list	dvb_subtitle_decoder.c	/^	DVBSubRegion *region_list;$/;"	m	struct:DVBSubContext	file:
region_list_next	dvb_subtitle_decoder.c	/^	struct DVBSubObjectDisplay *region_list_next;$/;"	m	struct:DVBSubObjectDisplay	typeref:struct:DVBSubObjectDisplay::DVBSubObjectDisplay	file:
relativeTimestamp	ccx_encoders_structs.h	/^	int relativeTimestamp; \/\/ Timestamps relative to start of sample or in UTC?$/;"	m	struct:ccx_encoders_transcript_format
relative_pos	ccx_decoders_708.h	/^	int relative_pos;$/;"	m	struct:ccx_dtvcc_window
remap_g0_charset	telxcc.c	/^void remap_g0_charset(uint8_t c)$/;"	f
remove_03emu	avc_functions.c	/^unsigned char *remove_03emu(unsigned char *from, unsigned char *to)$/;"	f
repeat_first_field	ccx_decoders_structs.h	/^	unsigned repeat_first_field;$/;"	m	struct:lib_cc_decode
report	ccx_decoders_608.h	/^	struct ccx_decoder_608_report *report;$/;"	m	struct:ccx_decoder_608_context	typeref:struct:ccx_decoder_608_context::ccx_decoder_608_report
report	ccx_decoders_608.h	/^	struct ccx_decoder_608_report *report;$/;"	m	struct:ccx_decoder_608_settings	typeref:struct:ccx_decoder_608_settings::ccx_decoder_608_report
report	ccx_decoders_708.h	/^	ccx_decoder_dtvcc_report *report;$/;"	m	struct:ccx_decoder_dtvcc_settings
report	ccx_decoders_708.h	/^	ccx_decoder_dtvcc_report *report;$/;"	m	struct:ccx_dtvcc_ctx
report_enabled	ccx_decoders_708.h	/^	int report_enabled;$/;"	m	struct:ccx_dtvcc_ctx
reserve_buf	ccx_decoders_isdb.c	/^static int reserve_buf(struct ISDBText *text, size_t len)$/;"	f	file:
reset	ccx_demuxer.h	/^	void (*reset)(struct ccx_demuxer *ctx);$/;"	m	struct:ccx_demuxer
reset_count	ccx_decoders_708.h	/^	int reset_count;$/;"	m	struct:ccx_decoder_dtvcc_report
return_to_buffer	file_functions.c	/^void return_to_buffer (struct ccx_demuxer *ctx, unsigned char *buffer, unsigned int bytes)$/;"	f
reverse8	cc_bitstream.c	/^uint8_t reverse8(uint8_t data)$/;"	f
rgba	ccx_decoders_isdb.c	/^typedef uint32_t rgba;$/;"	t	file:
roll_up	ccx_decoders_608.c	/^int roll_up(ccx_decoder_608_context *context)$/;"	f
rollover_bits	general_loop.c	/^unsigned int rollover_bits = 0; \/\/ The PTS rolls over every 26 hours and that can happen in the middle of a stream.$/;"	v
rollup_base_row	ccx_decoders_608.h	/^	int rollup_base_row;$/;"	m	struct:ccx_decoder_608_context
rollup_mode	ccx_decoders_isdb.c	/^	int rollup_mode;  \/\/ bool$/;"	m	struct:__anon12	file:
roundportable	avc_functions.c	/^double roundportable(double x) { return floor(x + 0.5); }$/;"	f
row	ccx_decoders_isdb.c	/^		int col, row;$/;"	m	struct:__anon11::spacing	file:
row_count	ccx_decoders_708.h	/^	int row_count;$/;"	m	struct:ccx_dtvcc_window
row_lock	ccx_decoders_708.h	/^	int row_lock;$/;"	m	struct:ccx_dtvcc_window
row_used	ccx_decoders_structs.h	/^	int row_used[15]; \/\/ Any data in row?$/;"	m	struct:eia608_screen
rowdata	ccx_decoders_608.c	/^static const int rowdata[] = {11,-1,1,2,3,4,12,13,14,15,5,6,7,8,9,10};$/;"	v	file:
rows	ccx_decoders_708.h	/^	ccx_dtvcc_symbol *rows[CCX_DTVCC_MAX_ROWS];$/;"	m	struct:ccx_dtvcc_window
running_status	ts_functions.h	/^	uint8_t running_status;$/;"	m	struct:EPG_event
s_primary_charset	telxcc.c	/^struct s_primary_charset {$/;"	s	file:
s_states	telxcc.c	/^struct s_states {$/;"	s	file:
sami_header	ccx_encoders_common.c	/^static const char *sami_header= \/\/ TODO: Revise the <!-- comments$/;"	v	file:
save_spupng	spupng_encoder.c	/^int save_spupng(const char *filename, uint8_t *bitmap, int w, int h,$/;"	f
saved_section	ccx_demuxer.h	/^	uint8_t saved_section[1021];$/;"	m	struct:program_info
saw_caption_block	ccx_decoders_structs.h	/^	int saw_caption_block;$/;"	m	struct:lib_cc_decode
saw_gop_header	ccx_decoders_structs.h	/^	int saw_gop_header;$/;"	m	struct:lib_cc_decode
saw_pesstart	ccx_demuxer.h	/^	int saw_pesstart;$/;"	m	struct:cap_info
saw_seqgoppic	ccx_decoders_structs.h	/^	int saw_seqgoppic;$/;"	m	struct:lib_cc_decode
score	stream_functions.c	/^	int score; \/\/ The weight of how heavy a box structure should be counted in order to "recognize" an MP4 file.$/;"	m	struct:ccx_stream_mp4_box	file:
screenfuls_counter	ccx_decoders_608.h	/^	int screenfuls_counter; \/\/ Number of meaningful screenfuls written$/;"	m	struct:ccx_decoder_608_context
screens_to_process	ccx_decoders_608.h	/^	int screens_to_process; \/\/ How many screenfuls we want? Use -1 for unlimited$/;"	m	struct:ccx_decoder_608_settings
screens_to_process	lib_ccx.h	/^	LLONG screens_to_process; \/\/ How many screenfuls we want?$/;"	m	struct:lib_ccx_ctx
scroll_direction	ccx_decoders_708.h	/^	int scroll_direction;$/;"	m	struct:ccx_dtvcc_window_attribs
se	cc_bitstream.c	/^int64_t se(struct bitstream *bstr)$/;"	f
search_language_pack	ocr.c	/^static int search_language_pack(const char *dirname,const char *lang)$/;"	f	file:
search_or_alloc_demuxer_data_node_by_pid	ts_functions.c	/^struct demuxer_data *search_or_alloc_demuxer_data_node_by_pid(struct demuxer_data **data, int pid)$/;"	f
search_start_code	es_functions.c	/^static uint8_t search_start_code(struct bitstream *esstream)$/;"	f	file:
sec	ccx_decoders_isdb.c	/^		int sec;$/;"	m	struct:__anon13::__anon14	file:
section_buf	ts_functions.h	/^	unsigned char section_buf[4098];$/;"	m	struct:ts_payload
section_index	ts_functions.h	/^	int section_index;$/;"	m	struct:ts_payload
section_size	ts_functions.h	/^	int section_size;$/;"	m	struct:ts_payload
seen_sub_page	telxcc.c	/^	short int seen_sub_page[MAX_TLT_PAGES];$/;"	m	struct:TeletextCtx	file:
segment_counter	lib_ccx.h	/^	int segment_counter;$/;"	m	struct:lib_ccx_ctx
segment_output_file	general_loop.c	/^void segment_output_file(struct lib_ccx_ctx *ctx, struct lib_cc_decode *dec_ctx)$/;"	f
sei_message	avc_functions.c	/^unsigned char *sei_message (struct avc_ctx *ctx, unsigned char *seibuf, unsigned char *seiend)$/;"	f
sei_rbsp	avc_functions.c	/^void sei_rbsp (struct avc_ctx *ctx, unsigned char *seibuf, unsigned char *seiend)$/;"	f
send_to_srv	ccx_common_option.h	/^	unsigned int send_to_srv;$/;"	m	struct:encoder_cfg
send_to_srv	ccx_common_option.h	/^	unsigned send_to_srv;$/;"	m	struct:ccx_s_options
send_to_srv	ccx_decoders_structs.h	/^	unsigned send_to_srv;$/;"	m	struct:ccx_decoders_common_settings_t
send_to_srv	ccx_encoders_common.h	/^	unsigned int send_to_srv;$/;"	m	struct:encoder_ctx
send_to_srv	lib_ccx.h	/^	unsigned send_to_srv;$/;"	m	struct:ccx_s_teletext_config
send_to_srv	telxcc.c	/^	unsigned send_to_srv;$/;"	m	struct:TeletextCtx	file:
sentence_cap	ccx_common_option.h	/^	int sentence_cap ; \/\/ FIX CASE? = Fix case?$/;"	m	struct:encoder_cfg
sentence_cap	ccx_encoders_common.h	/^	int sentence_cap ; \/\/ FIX CASE? = Fix case?$/;"	m	struct:encoder_ctx
sentence_cap_file	ccx_common_option.h	/^	char *sentence_cap_file; \/\/ Extra words file?$/;"	m	struct:ccx_s_options
seq_parameter_set_id	avc_functions.h	/^	LLONG seq_parameter_set_id;$/;"	m	struct:avc_ctx
seq_parameter_set_rbsp	avc_functions.c	/^void seq_parameter_set_rbsp (struct avc_ctx *ctx, unsigned char *seqbuf, unsigned char *seqend)$/;"	f
sequence_ext	es_functions.c	/^static int sequence_ext(struct lib_cc_decode *ctx, struct bitstream *esstream)$/;"	f	file:
sequence_header	es_functions.c	/^static int sequence_header(struct lib_cc_decode *ctx, struct bitstream *esstream)$/;"	f	file:
service_id	ts_functions.h	/^	uint16_t service_id;$/;"	m	struct:EPG_event
service_number	ccx_decoders_708.h	/^	int service_number;$/;"	m	struct:dtvcc_tv_screen
services	ccx_decoders_708.h	/^	unsigned services[CCX_DTVCC_MAX_SERVICES];$/;"	m	struct:ccx_decoder_dtvcc_report
services_active	ccx_decoders_708.h	/^	int services_active[CCX_DTVCC_MAX_SERVICES]; \/\/0 - inactive, 1 - active$/;"	m	struct:ccx_dtvcc_ctx
services_charsets	ccx_common_option.h	/^	char** services_charsets;$/;"	m	struct:encoder_cfg
services_enabled	ccx_common_option.h	/^	int services_enabled[CCX_DTVCC_MAX_SERVICES];$/;"	m	struct:encoder_cfg
services_enabled	ccx_decoders_708.h	/^	int services_enabled[CCX_DTVCC_MAX_SERVICES];$/;"	m	struct:ccx_decoder_dtvcc_settings
set	ccx_common_timing.h	/^	int set;$/;"	m	struct:ccx_boundary_time
set_current_pts	ccx_common_timing.c	/^void set_current_pts(struct ccx_common_timing_ctx *ctx, LLONG pts)$/;"	f
set_data_timebase	ccx_gxf.c	/^static void set_data_timebase(int32_t vid_format, struct demuxer_data *data)$/;"	f	file:
set_encoder_rcwt_fileformat	ccx_encoders_common.c	/^void set_encoder_rcwt_fileformat(struct encoder_ctx *ctx, short int format)$/;"	f
set_fts	ccx_common_timing.c	/^int set_fts(struct ccx_common_timing_ctx *ctx)$/;"	f
set_input_format	params.c	/^void set_input_format (struct ccx_s_options *opt, const char *format)$/;"	f
set_int	configuration.c	/^static int set_int(void *var, char*val)$/;"	f	file:
set_mpeg_frame_desc	ccx_gxf.c	/^static void set_mpeg_frame_desc(struct ccx_gxf_video_track *vid_track, unsigned char mpeg_frame_desc_flag)$/;"	f	file:
set_nonblocking	networking.c	/^int set_nonblocking(int fd)$/;"	f
set_output_format	params.c	/^void set_output_format (struct ccx_s_options *opt, const char *format)$/;"	f
set_position	ccx_decoders_isdb.c	/^static void set_position(ISDBSubContext *ctx, unsigned int p1, unsigned int p2)$/;"	f	file:
set_spupng_offset	spupng_encoder.c	/^void set_spupng_offset(void *ctx,int x,int y)$/;"	f
set_string	configuration.c	/^static int set_string(void *var,char*val)$/;"	f	file:
set_time	configuration.c	/^static int set_time(void *var, char*val)$/;"	f	file:
set_track_frame_rate	ccx_gxf.c	/^static void set_track_frame_rate(struct ccx_gxf_video_track *vid_track, int8_t val)$/;"	f	file:
set_writing_format	ccx_decoders_isdb.c	/^static void set_writing_format(ISDBSubContext *ctx, uint8_t *arg)$/;"	f	file:
settings	ccx_decoders_608.h	/^	ccx_decoder_608_settings *settings;$/;"	m	struct:ccx_decoder_608_context
settings_608	ccx_common_option.h	/^	ccx_decoder_608_settings settings_608; \/\/  Contains the settings for the 608 decoder.$/;"	m	struct:ccx_s_options
settings_608	ccx_decoders_structs.h	/^	struct ccx_decoder_608_settings *settings_608; \/\/  Contains the settings for the 608 decoder.$/;"	m	struct:ccx_decoders_common_settings_t	typeref:struct:ccx_decoders_common_settings_t::ccx_decoder_608_settings
settings_dtvcc	ccx_common_option.h	/^	ccx_decoder_dtvcc_settings settings_dtvcc; \/\/Same for 708 decoder$/;"	m	struct:ccx_s_options
settings_dtvcc	ccx_decoders_structs.h	/^	ccx_decoder_dtvcc_settings *settings_dtvcc; \/\/Same for cea 708 captions decoder (dtvcc)$/;"	m	struct:ccx_decoders_common_settings_t
shell_sort	ccx_encoders_helpers.c	/^void shell_sort(void *base, int nb, size_t size, int(*compar)(const void*p1, const void *p2, void*arg), void *arg)$/;"	f
showCC	ccx_encoders_structs.h	/^	int showCC; \/\/ Show which CC channel has been captured.$/;"	m	struct:ccx_encoders_transcript_format
showEndTime	ccx_encoders_structs.h	/^	int showStartTime, showEndTime; \/\/ Show start and\/or end time.$/;"	m	struct:ccx_encoders_transcript_format
showMode	ccx_encoders_structs.h	/^	int showMode; \/\/ Show which mode if available (E.G.: POP, RU1, ...)$/;"	m	struct:ccx_encoders_transcript_format
showStartTime	ccx_encoders_structs.h	/^	int showStartTime, showEndTime; \/\/ Show start and\/or end time.$/;"	m	struct:ccx_encoders_transcript_format
show_timestamp	telxcc.c	/^	uint64_t show_timestamp; \/\/ show at timestamp (in ms)$/;"	m	struct:__anon1	file:
sib_head	ccx_demuxer.h	/^	struct list_head sib_head;$/;"	m	struct:cap_info	typeref:struct:cap_info::list_head
sib_stream	ccx_demuxer.h	/^	struct list_head sib_stream;$/;"	m	struct:cap_info	typeref:struct:cap_info::list_head
simple_xml_header	ccx_encoders_common.c	/^static const char *simple_xml_header = "<?xml version=\\"1.0\\" encoding=\\"utf-8\\"?>\\r\\n<captions>\\r\\n";$/;"	v	file:
size	myth.c	/^	int   size;$/;"	m	struct:AVPacket	file:
size_in_bits	dvb_subtitle_decoder.c	/^	int size_in_bits;$/;"	m	struct:GetBitContext	file:
size_in_bits_plus8	dvb_subtitle_decoder.c	/^	int size_in_bits_plus8;$/;"	m	struct:GetBitContext	file:
skip_bits	cc_bitstream.c	/^int skip_bits(struct bitstream *bstr, unsigned bnum)$/;"	f
skip_chunks	wtv_constants.h	/^	uint64_t skip_chunks[256];$/;"	m	struct:wtv_chunked_buffer
skip_sized_buffer	wtv_functions.c	/^void skip_sized_buffer(struct ccx_demuxer *ctx, struct wtv_chunked_buffer *cb, uint32_t size)$/;"	f
skip_u32	bitstream.h	39;"	d
sleep	ccx_common_platform.h	40;"	d
sleep_secs	utility.c	/^void sleep_secs (int secs)$/;"	f
sleepandchecktimeout	file_functions.c	/^void sleepandchecktimeout (time_t start)$/;"	f
slice_header	avc_functions.c	/^void slice_header (struct lib_cc_decode *ctx, unsigned char *heabuf, unsigned char *heaend, int nal_unit_type, struct cc_subtitle *sub)$/;"	f
slice_types	ccx_common_constants.c	/^const char *slice_types[10]=$/;"	v
smptett_header	ccx_encoders_common.c	/^static const char *smptett_header = "<?xml version=\\"1.0\\" encoding=\\"UTF-8\\" ?>\\n"$/;"	v	file:
snprintf	ccx_common_platform.h	38;"	d
socklen_t	ccx_common_platform.h	/^		typedef int socklen_t;$/;"	t
spacing	ccx_decoders_isdb.c	/^	struct spacing {$/;"	s	struct:__anon11	file:
spell_builtin	ccx_encoders_helpers.c	/^static const char *spell_builtin[] =$/;"	v	file:
spell_builtin_added	ccx_encoders_helpers.c	/^static int spell_builtin_added = 0; \/\/ so we don't do it twice$/;"	v	file:
spell_capacity	ccx_encoders_helpers.c	/^int spell_capacity = 0;$/;"	v
spell_correct	ccx_encoders_helpers.c	/^char **spell_correct = NULL;$/;"	v
spell_lower	ccx_encoders_helpers.c	/^char **spell_lower = NULL;$/;"	v
spell_words	ccx_encoders_helpers.c	/^int spell_words = 0;$/;"	v
spunpg_free	spupng_encoder.c	/^void spunpg_free(struct spupng_t *sp)$/;"	f
spunpg_init	spupng_encoder.c	/^struct spupng_t *spunpg_init(struct ccx_s_write *out)$/;"	f
spupng_data	ccx_encoders_structs.h	/^	void* spupng_data;$/;"	m	struct:ccx_s_write
spupng_export_png	ccx_encoders_spupng.c	/^int spupng_export_png(struct spupng_t *sp, struct eia608_screen* data)$/;"	f
spupng_export_string2png	ccx_encoders_spupng.c	/^int spupng_export_string2png(struct spupng_t *sp, char *str)$/;"	f
spupng_init_font	spupng_encoder.c	/^void spupng_init_font()$/;"	f
spupng_t	spupng_encoder.h	/^struct spupng_t$/;"	s
spupng_write_ccbuffer	ccx_encoders_spupng.c	/^int spupng_write_ccbuffer(struct spupng_t *sp, struct eia608_screen* data,$/;"	f
spupng_write_footer	spupng_encoder.c	/^void spupng_write_footer(struct spupng_t *sp)$/;"	f
spupng_write_header	spupng_encoder.c	/^void spupng_write_header(struct spupng_t *sp,int multiple_files,char *first_input_file)$/;"	f
spupng_write_png	ccx_encoders_spupng.c	/^int spupng_write_png(struct spupng_t *sp, struct eia608_screen* data,$/;"	f
spupng_write_string	ccx_encoders_spupng.c	/^int spupng_write_string(struct spupng_t *sp, char *string, LLONG start_time, LLONG end_time,$/;"	f
srt_counter	ccx_encoders_common.h	/^	unsigned int srt_counter;$/;"	m	struct:encoder_ctx
srv_addr	ccx_common_option.h	/^	char *srv_addr;$/;"	m	struct:ccx_s_options
srv_addr	networking.c	/^const char *srv_addr;$/;"	v
srv_cc_desc	networking.c	/^const char *srv_cc_desc;$/;"	v
srv_header	networking.c	/^unsigned char *srv_header;$/;"	v
srv_header_len	networking.c	/^size_t srv_header_len;$/;"	v
srv_port	ccx_common_option.h	/^	char *srv_port;$/;"	m	struct:ccx_s_options
srv_port	networking.c	/^const char *srv_port;$/;"	v
srv_pwd	networking.c	/^const char *srv_pwd;$/;"	v
srv_sd	networking.c	/^int srv_sd = -1; \/* Server socket descriptor *\/$/;"	v
ss	ccx_common_timing.h	/^	int hh,mm,ss;$/;"	m	struct:ccx_boundary_time
ssize_t	ccx_common_platform.h	/^		typedef int ssize_t;$/;"	t
start	ts_functions.h	/^	unsigned char *start; \/\/ Payload start$/;"	m	struct:ts_payload
start_credits_text	ccx_common_option.h	/^	char *start_credits_text;$/;"	m	struct:encoder_cfg
start_credits_text	ccx_encoders_common.h	/^	char *start_credits_text;$/;"	m	struct:encoder_ctx
start_tcp_srv	networking.c	/^int start_tcp_srv(const char *port, const char *pwd)$/;"	f
start_time	ccx_common_structs.h	/^	LLONG start_time;$/;"	m	struct:cc_subtitle
start_time	ccx_decoders_structs.h	/^	LLONG start_time;$/;"	m	struct:eia608_screen
start_time_string	ts_functions.h	/^	char start_time_string[21]; \/\/"YYYYMMDDHHMMSS +0000" = 20 chars$/;"	m	struct:EPG_event
start_upd_srv	networking.c	/^int start_upd_srv(const char *addr_str, unsigned port)$/;"	f
startbytes	ccx_demuxer.h	/^	unsigned char startbytes[STARTBYTESLENGTH];$/;"	m	struct:ccx_demuxer
startbytes_avail	ccx_demuxer.h	/^	int startbytes_avail;$/;"	m	struct:ccx_demuxer
startbytes_pos	ccx_demuxer.h	/^	unsigned int startbytes_pos;$/;"	m	struct:ccx_demuxer
startcredits_displayed	ccx_encoders_common.h	/^	int startcredits_displayed;$/;"	m	struct:encoder_ctx
startcredits_displayed	lib_ccx.h	/^	int startcredits_displayed;$/;"	m	struct:lib_ccx_ctx
startcreditsforatleast	ccx_common_option.h	/^	struct ccx_boundary_time startcreditsforatleast, startcreditsforatmost; \/\/ How long to display them?$/;"	m	struct:encoder_cfg	typeref:struct:encoder_cfg::ccx_boundary_time
startcreditsforatleast	ccx_encoders_common.h	/^	struct ccx_boundary_time startcreditsforatleast, startcreditsforatmost; \/\/ How long to display them?$/;"	m	struct:encoder_ctx	typeref:struct:encoder_ctx::ccx_boundary_time
startcreditsforatmost	ccx_common_option.h	/^	struct ccx_boundary_time startcreditsforatleast, startcreditsforatmost; \/\/ How long to display them?$/;"	m	struct:encoder_cfg	typeref:struct:encoder_cfg::
startcreditsforatmost	ccx_encoders_common.h	/^	struct ccx_boundary_time startcreditsforatleast, startcreditsforatmost; \/\/ How long to display them?$/;"	m	struct:encoder_ctx	typeref:struct:encoder_ctx::
startcreditsnotafter	ccx_common_option.h	/^	struct ccx_boundary_time startcreditsnotbefore, startcreditsnotafter; \/\/ Where to insert start credits, if possible$/;"	m	struct:encoder_cfg	typeref:struct:encoder_cfg::
startcreditsnotafter	ccx_encoders_common.h	/^	struct ccx_boundary_time startcreditsnotbefore, startcreditsnotafter; \/\/ Where to insert start credits, if possible$/;"	m	struct:encoder_ctx	typeref:struct:encoder_ctx::
startcreditsnotbefore	ccx_common_option.h	/^	struct ccx_boundary_time startcreditsnotbefore, startcreditsnotafter; \/\/ Where to insert start credits, if possible$/;"	m	struct:encoder_cfg	typeref:struct:encoder_cfg::ccx_boundary_time
startcreditsnotbefore	ccx_encoders_common.h	/^	struct ccx_boundary_time startcreditsnotbefore, startcreditsnotafter; \/\/ Where to insert start credits, if possible$/;"	m	struct:encoder_ctx	typeref:struct:encoder_ctx::ccx_boundary_time
stat_dishheaders	lib_ccx.h	/^	int stat_dishheaders;$/;"	m	struct:lib_ccx_ctx
stat_divicom	lib_ccx.h	/^	int stat_divicom;$/;"	m	struct:lib_ccx_ctx
stat_dvdccheaders	lib_ccx.h	/^	int stat_dvdccheaders;$/;"	m	struct:lib_ccx_ctx
stat_hdtv	lib_ccx.h	/^	int stat_hdtv;$/;"	m	struct:lib_ccx_ctx
stat_numuserheaders	lib_ccx.h	/^	int stat_numuserheaders;$/;"	m	struct:lib_ccx_ctx
stat_replay4000headers	lib_ccx.h	/^	int stat_replay4000headers;$/;"	m	struct:lib_ccx_ctx
stat_replay5000headers	lib_ccx.h	/^	int stat_replay5000headers;$/;"	m	struct:lib_ccx_ctx
stat_scte20ccheaders	lib_ccx.h	/^	int stat_scte20ccheaders;$/;"	m	struct:lib_ccx_ctx
states	telxcc.c	/^	struct s_states states;$/;"	m	struct:TeletextCtx	typeref:struct:TeletextCtx::s_states	file:
store_hdcc	sequencing.c	/^void store_hdcc(struct lib_cc_decode *ctx, unsigned char *cc_data, int cc_count, int sequence_number, LLONG current_fts_now, struct cc_subtitle *sub)$/;"	f
strangeheader	ccx_demuxer.h	/^	int strangeheader;$/;"	m	struct:ccx_demuxer
strcasecmp	ccx_encoders_helpers.c	9;"	d	file:
stream	ccx_demuxer.h	/^	enum ccx_stream_type stream; $/;"	m	struct:cap_info	typeref:enum:cap_info::ccx_stream_type
stream_index	ffmpeg_intgr.c	/^	int stream_index;$/;"	m	struct:ffmpeg_ctx	file:
stream_index	myth.c	/^	int   stream_index;$/;"	m	struct:AVPacket	file:
stream_mode	ccx_demuxer.h	/^	enum ccx_stream_mode_enum stream_mode;$/;"	m	struct:ccx_demuxer	typeref:enum:ccx_demuxer::ccx_stream_mode_enum
stream_pid	ccx_demuxer.h	/^	int stream_pid;$/;"	m	struct:demuxer_data
stream_size	ccx_gxf.c	/^	int32_t stream_size;$/;"	m	struct:ccx_gxf	file:
stream_type	ts_functions.h	/^	enum ccx_stream_type stream_type;$/;"	m	struct:PMT_entry	typeref:enum:PMT_entry::ccx_stream_type
string_cmp	ccx_encoders_helpers.c	/^int string_cmp(const void *p1, const void *p2)$/;"	f
string_cmp2	ccx_encoders_helpers.c	/^int string_cmp2(const void *p1, const void *p2, void *arg)$/;"	f
stringztoms	utility.c	/^int stringztoms (const char *s, struct ccx_boundary_time *bt)$/;"	f
strndup	utility.c	/^char *strndup(const char *s, size_t n)$/;"	f
strtok_r	utility.c	/^char *strtok_r(char *str, const char *delim, char **saveptr)$/;"	f
sub_type	dvb_subtitle_decoder.h	/^	unsigned char sub_type[MAX_LANGUAGE_PER_DESC];$/;"	m	struct:dvb_config
subline	ccx_encoders_common.h	/^	unsigned char *subline; \/\/ Temp storage for storing each line$/;"	m	struct:encoder_ctx
subs_delay	ccx_common_option.h	/^	LLONG subs_delay; \/\/ ms to delay (or advance) subs$/;"	m	struct:ccx_s_options
subs_delay	ccx_common_option.h	/^	LLONG subs_delay; \/\/ ms to delay (or advance) subs$/;"	m	struct:encoder_cfg
subs_delay	ccx_decoders_608.h	/^	LLONG subs_delay; \/\/ ms to delay (or advance) subs$/;"	m	struct:ccx_decoder_608_context
subs_delay	ccx_decoders_structs.h	/^	LLONG subs_delay; \/\/ ms to delay (or advance) subs$/;"	m	struct:ccx_decoders_common_settings_t
subs_delay	ccx_decoders_structs.h	/^	LLONG subs_delay; \/\/ ms to delay (or advance) subs$/;"	m	struct:lib_cc_decode
subs_delay	ccx_encoders_common.h	/^	LLONG subs_delay;$/;"	m	struct:encoder_ctx
subs_delay	lib_ccx.h	/^	LLONG subs_delay; \/\/ ms to delay (or advance) subs$/;"	m	struct:lib_ccx_ctx
subtype	ccx_common_structs.h	/^enum subtype$/;"	g
switch_to_next_file	file_functions.c	/^int switch_to_next_file (struct lib_ccx_ctx *ctx, LLONG bytesinbuffer)$/;"	f
sym	ccx_decoders_708.h	/^	unsigned short sym; \/\/symbol itself, at least 16 bit$/;"	m	struct:ccx_dtvcc_symbol
sync_pts	ccx_common_timing.h	/^	LLONG sync_pts;$/;"	m	struct:ccx_common_timing_ctx
system_start_time	lib_ccx.h	/^	LLONG system_start_time;$/;"	m	struct:lib_ccx_ctx
t	ocr.c	/^	uint8_t *t;$/;"	m	struct:transIntensity	file:
t0	telxcc.c	/^	uint32_t t0;$/;"	m	struct:TeletextCtx	file:
tainted	telxcc.c	/^	uint8_t tainted; \/\/ 1 = text variable contains any data$/;"	m	struct:__anon1	file:
tb	ccx_demuxer.h	/^	struct ccx_rational tb;$/;"	m	struct:demuxer_data	typeref:struct:demuxer_data::ccx_rational
tcp_bind	networking.c	/^int tcp_bind(const char *port, int *family)$/;"	f
tcp_connect	networking.c	/^int tcp_connect(const char *host, const char *port)$/;"	f
tcp_desc	ccx_common_option.h	/^	char *tcp_desc;$/;"	m	struct:ccx_s_options
tcp_password	ccx_common_option.h	/^	char *tcp_password;$/;"	m	struct:ccx_s_options
tcpport	ccx_common_option.h	/^	char *tcpport;$/;"	m	struct:ccx_s_options
teletext_h_included	teletext.h	6;"	d
teletext_packet_payload_t	telxcc.c	/^} teletext_packet_payload_t;$/;"	t	typeref:struct:__anon4	file:
teletext_page_t	telxcc.c	/^} teletext_page_t;$/;"	t	typeref:struct:__anon1	file:
teletext_warning_shown	lib_ccx.h	/^	unsigned teletext_warning_shown; \/\/ Did we detect a possible PAL (with teletext subs) and told the user already?$/;"	m	struct:lib_ccx_ctx
telx_to_ucs2	telxcc.c	/^uint16_t telx_to_ucs2(uint8_t c)$/;"	f
telxcc_close	telxcc.c	/^void telxcc_close(void **ctx, struct cc_subtitle *sub)$/;"	f
telxcc_dump_prev_page	telxcc.c	/^void telxcc_dump_prev_page (struct TeletextCtx *ctx, struct cc_subtitle *sub)$/;"	f
telxcc_init	telxcc.c	/^void* telxcc_init(void)$/;"	f
telxcc_update_gt	telxcc.c	/^void telxcc_update_gt(void *codec, uint32_t global_timestamp)$/;"	f
temp_debug	utility.c	/^int temp_debug = 0; \/\/ This is a convenience variable used to enable\/disable debug on variable conditions. Find references to understand.$/;"	v
temporal_reference	ccx_decoders_structs.h	/^	int temporal_reference;$/;"	m	struct:lib_cc_decode
temporarily_close_output	output.c	/^int temporarily_close_output(struct ccx_s_write *wb)$/;"	f
temporarily_closed	ccx_encoders_structs.h	/^	int temporarily_closed; \/\/ 1 means the file was created OK before but we released the handle$/;"	m	struct:ccx_s_write
temporarily_open_output	output.c	/^int temporarily_open_output(struct ccx_s_write *wb)$/;"	f
text	telxcc.c	/^	uint16_t text[25][40]; \/\/ 25 lines x 40 cols (1 screen\/page) of wide chars$/;"	m	struct:__anon1	file:
text	ts_functions.h	/^	char *text;$/;"	m	struct:EPG_event
text_list_head	ccx_decoders_isdb.c	/^	struct list_head text_list_head;$/;"	m	struct:__anon13	typeref:struct:__anon13::list_head	file:
text_tag	ccx_decoders_708.h	/^	int text_tag;$/;"	m	struct:ccx_dtvcc_pen_attribs
textprinted	ccx_decoders_608.h	/^	int textprinted;$/;"	m	struct:ccx_decoder_608_context
tid	lib_ccx.h	/^	uint16_t tid; \/\/ 13-bit packet ID for teletext stream$/;"	m	struct:ccx_s_teletext_config
tid	telxcc.c	/^	uint16_t tid; \/\/ 13-bit packet ID for teletext stream$/;"	m	struct:TeletextCtx	file:
time_code_hours	ccx_common_timing.h	/^	int time_code_hours;$/;"	m	struct:gop_time_code
time_code_minutes	ccx_common_timing.h	/^	int time_code_minutes;$/;"	m	struct:gop_time_code
time_code_pictures	ccx_common_timing.h	/^	int time_code_pictures;$/;"	m	struct:gop_time_code
time_code_seconds	ccx_common_timing.h	/^	int time_code_seconds;$/;"	m	struct:gop_time_code
time_in_ms	ccx_common_timing.h	/^	LLONG time_in_ms;$/;"	m	struct:ccx_boundary_time
time_ms_hide	ccx_decoders_708.h	/^	LLONG time_ms_hide;$/;"	m	struct:ccx_dtvcc_window
time_ms_hide	ccx_decoders_708.h	/^	LLONG time_ms_hide;$/;"	m	struct:dtvcc_tv_screen
time_ms_show	ccx_decoders_708.h	/^	LLONG time_ms_show;$/;"	m	struct:ccx_dtvcc_window
time_ms_show	ccx_decoders_708.h	/^	LLONG time_ms_show;$/;"	m	struct:dtvcc_tv_screen
time_out	dvb_subtitle_decoder.c	/^	int time_out;$/;"	m	struct:DVBSubContext	file:
time_to_pes_time	wtv_functions.c	/^uint64_t time_to_pes_time(uint64_t time)$/;"	f
times256	dvb_subtitle_decoder.c	60;"	d	file:
times4	dvb_subtitle_decoder.c	59;"	d	file:
timestamp	ccx_decoders_isdb.c	/^	uint64_t timestamp;$/;"	m	struct:ISDBText	file:
timestamp	ccx_decoders_isdb.c	/^	uint64_t timestamp;$/;"	m	struct:__anon13	file:
timestamp_to_smptetttime	utility.c	/^void timestamp_to_smptetttime(uint64_t timestamp, char *buffer)$/;"	f
timestamp_to_srttime	utility.c	/^void timestamp_to_srttime(uint64_t timestamp, char *buffer)$/;"	f
timing	ccx_decoders_608.h	/^	struct ccx_common_timing_ctx *timing;$/;"	m	struct:ccx_decoder_608_context	typeref:struct:ccx_decoder_608_context::ccx_common_timing_ctx
timing	ccx_decoders_708.h	/^	struct ccx_common_timing_ctx *timing;$/;"	m	struct:ccx_decoder_dtvcc_settings	typeref:struct:ccx_decoder_dtvcc_settings::ccx_common_timing_ctx
timing	ccx_decoders_708.h	/^	struct ccx_common_timing_ctx *timing;$/;"	m	struct:ccx_dtvcc_ctx	typeref:struct:ccx_dtvcc_ctx::ccx_common_timing_ctx
timing	ccx_decoders_structs.h	/^	struct ccx_common_timing_ctx *timing;$/;"	m	struct:lib_cc_decode	typeref:struct:lib_cc_decode::ccx_common_timing_ctx
timing	ccx_decoders_xds.c	/^	struct ccx_common_timing_ctx *timing;$/;"	m	struct:ccx_decoders_xds_context	typeref:struct:ccx_decoders_xds_context::ccx_common_timing_ctx	file:
tlt_config	telxcc.c	/^struct ccx_s_teletext_config tlt_config = { 0};$/;"	v	typeref:struct:ccx_s_teletext_config
tlt_packet_counter	telxcc.c	/^	uint32_t tlt_packet_counter;$/;"	m	struct:TeletextCtx	file:
tlt_print_seen_pages	telxcc.c	/^int tlt_print_seen_pages(struct lib_cc_decode *dec_ctx)$/;"	f
tlt_process_pes_packet	telxcc.c	/^int tlt_process_pes_packet(struct lib_cc_decode *dec_ctx, uint8_t *buffer, uint16_t size, struct cc_subtitle *sub)$/;"	f
tlt_read_rcwt	telxcc.c	/^void tlt_read_rcwt(void *codec, unsigned char *buf, struct cc_subtitle *sub)$/;"	f
tlt_sub_pid	ccx_demuxer.h	/^        unsigned tlt_sub_pid[SUB_STREAMS_CNT];$/;"	m	struct:ccx_demux_report
tlt_write_rcwt	telxcc.c	/^void tlt_write_rcwt(struct lib_cc_decode *ctx, uint8_t data_unit_id, uint8_t *packet, uint64_t timestamp,  struct cc_subtitle *sub)$/;"	f
tmd	ccx_decoders_isdb.c	/^	enum isdb_tmd tmd;$/;"	m	struct:__anon13	typeref:enum:__anon13::isdb_tmd	file:
top_field_first	ccx_decoders_structs.h	/^	unsigned top_field_first; \/\/ Needs to be global$/;"	m	struct:lib_cc_decode
total_frames_count	ccx_common_timing.c	/^unsigned total_frames_count;$/;"	v
total_inputsize	lib_ccx.h	/^	LLONG total_inputsize;$/;"	m	struct:lib_ccx_ctx
total_past	lib_ccx.h	/^	LLONG total_past; \/\/ Only in binary concat mode$/;"	m	struct:lib_ccx_ctx
total_pulldownfields	ccx_decoders_structs.h	/^	unsigned total_pulldownfields;$/;"	m	struct:lib_cc_decode
total_pulldownframes	ccx_decoders_structs.h	/^	unsigned total_pulldownframes;$/;"	m	struct:lib_cc_decode
track_name	ccx_gxf.c	/^	char track_name[STR_LEN];$/;"	m	struct:ccx_gxf_ancillary_data_track	file:
track_name	ccx_gxf.c	/^	char track_name[STR_LEN];$/;"	m	struct:ccx_gxf_video_track	file:
transIntensity	ocr.c	/^struct transIntensity$/;"	s	file:
transcript_settings	ccx_common_option.h	/^	ccx_encoders_transcript_format transcript_settings; \/\/ Keeps the settings for generating transcript output files.$/;"	m	struct:ccx_s_options
transcript_settings	ccx_common_option.h	/^	ccx_encoders_transcript_format transcript_settings; \/\/ Keeps the settings for generating transcript output files.$/;"	m	struct:encoder_cfg
transcript_settings	ccx_encoders_common.h	/^	struct ccx_encoders_transcript_format *transcript_settings; \/\/ Keeps the settings for generating transcript output files.$/;"	m	struct:encoder_ctx	typeref:struct:encoder_ctx::ccx_encoders_transcript_format
transmission_mode	telxcc.c	/^	transmission_mode_t transmission_mode;$/;"	m	struct:TeletextCtx	file:
transmission_mode_t	telxcc.c	/^} transmission_mode_t;$/;"	t	typeref:enum:__anon2	file:
transport_error	ts_functions.h	/^	int transport_error;  \/\/ 0 = packet OK, non-zero damaged$/;"	m	struct:ts_payload
trim_subs	ccx_common_option.h	/^	int trim_subs; \/\/ "    Remove spaces at sides?    "$/;"	m	struct:encoder_cfg
trim_subs	ccx_encoders_common.h	/^	int trim_subs; \/\/ "    Remove spaces at sides?    "$/;"	m	struct:encoder_ctx
trim_subs	ccx_encoders_helpers.h	/^	int trim_subs;$/;"	m	struct:ccx_encoders_helpers_settings_t
true	ccx_common_constants.h	8;"	d
try_to_add_end_credits	ccx_encoders_common.c	/^static void try_to_add_end_credits(struct encoder_ctx *context, struct ccx_s_write *out, LLONG current_fts)$/;"	f	file:
try_to_add_start_credits	ccx_encoders_common.c	/^void try_to_add_start_credits(struct encoder_ctx *context,LLONG start_ms)$/;"	f
ts_allprogram	ccx_common_option.h	/^	unsigned ts_allprogram;$/;"	m	struct:demuxer_cfg
ts_allprogram	ccx_demuxer.h	/^	int ts_allprogram;$/;"	m	struct:ccx_demuxer
ts_autoprogram	ccx_common_option.h	/^	unsigned ts_autoprogram; \/\/ Try to find a stream with captions automatically (no -pn needed)$/;"	m	struct:demuxer_cfg
ts_autoprogram	ccx_demuxer.h	/^	int ts_autoprogram;$/;"	m	struct:ccx_demuxer
ts_buffer_psi_packet	ts_tables.c	/^void ts_buffer_psi_packet(struct ccx_demuxer *ctx)$/;"	f
ts_cappids	ccx_common_option.h	/^	unsigned ts_cappids[128]; \/\/ PID for stream that holds caption information$/;"	m	struct:demuxer_cfg
ts_datastreamtype	ccx_common_option.h	/^	int ts_datastreamtype ; \/\/ User WANTED stream type (i.e. use the stream that has this type)$/;"	m	struct:demuxer_cfg
ts_datastreamtype	ccx_demuxer.h	/^	int ts_datastreamtype;$/;"	m	struct:ccx_demuxer
ts_forced_cappid	ccx_common_option.h	/^	unsigned ts_forced_cappid ; \/\/ If 1, never mess with the selected PID$/;"	m	struct:demuxer_cfg
ts_forced_program	ccx_common_option.h	/^	int ts_forced_program; \/\/ Specific program to process in TS files, if ts_forced_program_selected==1$/;"	m	struct:demuxer_cfg
ts_forced_program_selected	ccx_common_option.h	/^	unsigned ts_forced_program_selected;$/;"	m	struct:demuxer_cfg
ts_forced_streamtype	ccx_common_option.h	/^	unsigned ts_forced_streamtype; \/\/ User selected (forced) stream type$/;"	m	struct:demuxer_cfg
ts_getmoredata	ts_functions.c	/^int ts_getmoredata(struct ccx_demuxer *ctx, struct demuxer_data **data)$/;"	f
ts_last_char_received	ccx_decoders_608.h	/^	LLONG ts_last_char_received; \/* Time at which the last written character was received, =-1 no character received yet *\/$/;"	m	struct:ccx_decoder_608_context
ts_payload	ts_functions.h	/^struct ts_payload$/;"	s
ts_readpacket	ts_functions.c	/^int ts_readpacket(struct ccx_demuxer* ctx, struct ts_payload *payload)$/;"	f
ts_readstream	ts_functions.c	/^long ts_readstream(struct ccx_demuxer *ctx, struct demuxer_data **data)$/;"	f
ts_start_of_current_line	ccx_decoders_608.h	/^	LLONG ts_start_of_current_line; \/* Time at which the first character for current line was received, =-1 no character received yet *\/$/;"	m	struct:ccx_decoder_608_context
ts_start_of_xds	ccx_decoders_xds.c	/^LLONG ts_start_of_xds = -1; \/\/ Time at which we switched to XDS mode, =-1 hasn't happened yet$/;"	v
tspacket	ts_functions.c	/^unsigned char tspacket[188]; \/\/ Current packet$/;"	v
tv	ccx_decoders_708.h	/^	dtvcc_tv_screen *tv;$/;"	m	struct:ccx_dtvcc_service_decoder
txt_tail	ccx_decoders_isdb.c	/^	size_t txt_tail; \/\/ tail of the text, excluding trailing control sequences.$/;"	m	struct:ISDBText	file:
type	ccx_common_structs.h	/^	enum subtype type;$/;"	m	struct:cc_subtitle	typeref:enum:cc_subtitle::subtype
type	dvb_subtitle_decoder.c	/^	int type;$/;"	m	struct:DVBSubObject	file:
type	myth.c	/^	int    type;$/;"	m	struct:AVPacket	file:
typeof	ccx_common_platform.h	18;"	d
u	cc_bitstream.c	/^uint64_t u(struct bitstream *bstr, unsigned bnum)$/;"	f
u32	avc_functions.c	/^typedef unsigned int u32;$/;"	t	file:
ucs2_buffer_add_char	telxcc.c	/^void ucs2_buffer_add_char (struct TeletextCtx *ctx, uint64_t c)$/;"	f
ucs2_buffer_cur	telxcc.c	/^	uint64_t *ucs2_buffer_cur;$/;"	m	struct:TeletextCtx	file:
ucs2_buffer_cur_size	telxcc.c	/^	unsigned ucs2_buffer_cur_size;$/;"	m	struct:TeletextCtx	file:
ucs2_buffer_cur_used	telxcc.c	/^	unsigned ucs2_buffer_cur_used;$/;"	m	struct:TeletextCtx	file:
ucs2_buffer_prev	telxcc.c	/^	uint64_t *ucs2_buffer_prev;$/;"	m	struct:TeletextCtx	file:
ucs2_buffer_prev_size	telxcc.c	/^	unsigned ucs2_buffer_prev_size;$/;"	m	struct:TeletextCtx	file:
ucs2_buffer_prev_used	telxcc.c	/^	unsigned ucs2_buffer_prev_used;$/;"	m	struct:TeletextCtx	file:
ucs2_to_utf8	telxcc.c	/^void ucs2_to_utf8(char *r, uint16_t ch)$/;"	f
udpaddr	ccx_common_option.h	/^	char *udpaddr;$/;"	m	struct:ccx_s_options
udpport	ccx_common_option.h	/^	unsigned udpport; \/\/ Non-zero => Listen for UDP packets on this port, no files.$/;"	m	struct:ccx_s_options
ue	cc_bitstream.c	/^uint64_t ue(struct bitstream *bstr)$/;"	f
uint16_t	stdintmsc.h	/^typedef unsigned __int16  uint16_t;$/;"	t
uint32_t	stdintmsc.h	/^typedef unsigned __int32  uint32_t;$/;"	t
uint64_t	stdintmsc.h	/^typedef unsigned __int64  uint64_t;$/;"	t
uint64_t_C	ccx_common_platform.h	106;"	d
uint8_t	stdintmsc.h	/^typedef unsigned __int8   uint8_t;$/;"	t
uint_fast16_t	stdintmsc.h	/^typedef uint16_t  uint_fast16_t;$/;"	t
uint_fast32_t	stdintmsc.h	/^typedef uint32_t  uint_fast32_t;$/;"	t
uint_fast64_t	stdintmsc.h	/^typedef uint64_t  uint_fast64_t;$/;"	t
uint_fast8_t	stdintmsc.h	/^typedef uint8_t   uint_fast8_t;$/;"	t
uint_least16_t	stdintmsc.h	/^typedef uint16_t  uint_least16_t;$/;"	t
uint_least32_t	stdintmsc.h	/^typedef uint32_t  uint_least32_t;$/;"	t
uint_least64_t	stdintmsc.h	/^typedef uint64_t  uint_least64_t;$/;"	t
uint_least8_t	stdintmsc.h	/^typedef uint8_t   uint_least8_t;$/;"	t
uintmax_t	stdintmsc.h	/^typedef uint64_t  uintmax_t;$/;"	t
uintptr_t	stdintmsc.h	/^   typedef _W64 unsigned int      uintptr_t;$/;"	t
uintptr_t	stdintmsc.h	/^   typedef unsigned __int64  uintptr_t;$/;"	t
underline	ccx_decoders_708.h	/^	int underline;$/;"	m	struct:ccx_dtvcc_pen_attribs
unham_24_18	telxcc.c	/^uint32_t unham_24_18(uint32_t a)$/;"	f
unham_8_4	telxcc.c	/^uint8_t unham_8_4(uint8_t a)$/;"	f
unicode_ccfont2	spupng_encoder.c	/^static unsigned int unicode_ccfont2(unsigned int c, int italic)$/;"	f	file:
update_capinfo	ts_info.c	/^int update_capinfo(struct ccx_demuxer *ctx, int pid, enum ccx_stream_type stream, enum ccx_code_type codec, int pn, void *private_data)$/;"	f
update_decoder_list	lib_ccx.c	/^struct lib_cc_decode *update_decoder_list(struct lib_ccx_ctx *ctx)$/;"	f
update_decoder_list_cinfo	lib_ccx.c	/^struct lib_cc_decode *update_decoder_list_cinfo(struct lib_ccx_ctx *ctx, struct cap_info* cinfo)$/;"	f
update_encoder_list	lib_ccx.c	/^struct encoder_ctx *update_encoder_list(struct lib_ccx_ctx *ctx)$/;"	f
update_encoder_list_cinfo	lib_ccx.c	/^struct encoder_ctx *update_encoder_list_cinfo(struct lib_ccx_ctx *ctx, struct cap_info* cinfo)$/;"	f
update_pinfo	ts_tables.c	/^int update_pinfo(struct ccx_demuxer *ctx, int pid, int program_number)$/;"	f
url_fskip	myth.c	/^void url_fskip (struct ccx_demuxer *ctx, int length)$/;"	f
usage	params.c	/^void usage (void)$/;"	f
useColors	ccx_encoders_structs.h	/^	int useColors; \/\/ Add colors or no colors$/;"	m	struct:ccx_encoders_transcript_format
use_gop_as_pts	ccx_common_option.h	/^	int use_gop_as_pts; \/\/ Use GOP instead of PTS timing (0=do as needed, 1=always, -1=never)$/;"	m	struct:ccx_s_options
used	ccx_decoders_isdb.c	/^	size_t used;$/;"	m	struct:ISDBText	file:
used_bytes	ccx_decoders_xds.c	/^	unsigned char used_bytes;$/;"	m	struct:xds_buffer	file:
usepicorder	ccx_common_option.h	/^	int usepicorder; \/\/ Force the use of pic_order_cnt_lsb in AVC\/H.264 data streams$/;"	m	struct:ccx_s_options
user_data	es_userdata.c	/^int user_data(struct lib_cc_decode *ctx, struct bitstream *ustream, int udtype, struct cc_subtitle *sub)$/;"	f
user_data_registered_itu_t_t35	avc_functions.c	/^void user_data_registered_itu_t_t35 (struct avc_ctx *ctx, unsigned char *userbuf, unsigned char *userend)$/;"	f
user_page	lib_ccx.h	/^	uint16_t user_page; \/\/ Page selected by user, which MIGHT be different to 'page' depending on autodetection stuff$/;"	m	struct:ccx_s_teletext_config
user_page	telxcc.c	/^	uint16_t user_page; \/\/ Page selected by user, which MIGHT be different to 'page' depending on autodetection stuff$/;"	m	struct:TeletextCtx	file:
usercolor_rgb	ccx_encoders_helpers.c	/^unsigned char usercolor_rgb[8] = "";$/;"	v
using_pts	telxcc.c	/^	uint8_t using_pts;$/;"	m	struct:TeletextCtx	file:
utc_refvalue	ccx_decoders_common.c	/^uint64_t utc_refvalue = UINT64_MAX;  \/* _UI64_MAX means don't use UNIX, 0 = use current system time as reference, +1 use a specific reference *\/$/;"	v
utf16_to_utf8	utility.c	/^size_t utf16_to_utf8(unsigned short utf16_char, unsigned char *out)$/;"	f
utf8_to_latin1_map	ccx_encoders_common.c	/^unsigned int utf8_to_latin1_map(const unsigned int code)$/;"	f
valid_crc	ccx_demuxer.h	/^	uint8_t valid_crc:1;$/;"	m	struct:program_info
validate_cc_data_pair	ccx_decoders_common.c	/^int validate_cc_data_pair (unsigned char *cc_data_pair)$/;"	f
vbi_debug_dump	ccx_decoders_vbi.h	/^	FILE *vbi_debug_dump;$/;"	m	struct:ccx_decoder_vbi_ctx
vbi_decoder	ccx_decoders_structs.h	/^	struct ccx_decoder_vbi_ctx *vbi_decoder;$/;"	m	struct:lib_cc_decode	typeref:struct:lib_cc_decode::ccx_decoder_vbi_ctx
vbi_decoder_inited	ccx_decoders_vbi.h	/^	int vbi_decoder_inited;$/;"	m	struct:ccx_decoder_vbi_ctx
verbose	lib_ccx.h	/^	uint8_t verbose : 1; \/\/ should telxcc be verbose?$/;"	m	struct:ccx_s_teletext_config
verbose	telxcc.c	/^	uint8_t verbose : 1; \/\/ should telxcc be verbose?$/;"	m	struct:TeletextCtx	file:
verify_crc32	utility.c	/^int verify_crc32(uint8_t *buf, int len)$/;"	f
version	ccx_demuxer.h	/^	uint8_t version;$/;"	m	struct:program_info
version	dvb_subtitle_decoder.c	/^	int version;$/;"	m	struct:DVBSubCLUT	file:
version	dvb_subtitle_decoder.c	/^	int version;$/;"	m	struct:DVBSubContext	file:
version	dvb_subtitle_decoder.c	/^	int version;$/;"	m	struct:DVBSubDisplayDefinition	file:
version	dvb_subtitle_decoder.c	/^	int version;$/;"	m	struct:DVBSubObject	file:
version	dvb_subtitle_decoder.c	/^	int version;$/;"	m	struct:DVBSubRegion	file:
vid_track	ccx_gxf.c	/^	struct ccx_gxf_video_track *vid_track;$/;"	m	struct:ccx_gxf	typeref:struct:ccx_gxf::ccx_gxf_video_track	file:
visible	ccx_decoders_708.h	/^	int visible;$/;"	m	struct:ccx_dtvcc_window
visible_buffer	ccx_decoders_608.h	/^	int visible_buffer;$/;"	m	struct:ccx_decoder_608_context
w	ccx_decoders_isdb.c	/^		int w, h;$/;"	m	struct:__anon11::disp_area	file:
w	ccx_decoders_structs.h	/^	int w;$/;"	m	struct:cc_bitmap
warning_program_not_found_shown	ccx_demuxer.h	/^	int warning_program_not_found_shown;$/;"	m	struct:ccx_demuxer
webvtt_header	ccx_encoders_common.c	/^static const char *webvtt_header = "WEBVTT\\r\\n\\r\\n";$/;"	v	file:
width	dvb_subtitle_decoder.c	/^	int width;$/;"	m	struct:DVBSubDisplayDefinition	file:
width	dvb_subtitle_decoder.c	/^	int width;$/;"	m	struct:DVBSubRegion	file:
width	lib_ccx.h	/^	unsigned width;$/;"	m	struct:file_report
win_style	ccx_decoders_708.h	/^	int win_style;$/;"	m	struct:ccx_dtvcc_window
windows	ccx_decoders_708.h	/^	ccx_dtvcc_window windows[CCX_DTVCC_MAX_WINDOWS];$/;"	m	struct:ccx_dtvcc_service_decoder
word_wrap	ccx_decoders_708.h	/^	int word_wrap;$/;"	m	struct:ccx_dtvcc_window_attribs
writeDVDraw	output.c	/^void writeDVDraw (const unsigned char *data1, int length1,$/;"	f
write_block	networking.c	/^ssize_t write_block(int fd, char command, const char *buf, size_t buf_len)$/;"	f
write_bom	ccx_encoders_common.c	/^static int write_bom(struct encoder_ctx *ctx, struct ccx_s_write *out)$/;"	f	file:
write_byte	networking.c	/^ssize_t write_byte(int fd, char ch)$/;"	f
write_cc_bitmap_as_sami	ccx_encoders_sami.c	/^int write_cc_bitmap_as_sami(struct cc_subtitle *sub, struct encoder_ctx *context)$/;"	f
write_cc_bitmap_as_simplexml	ccx_encoders_common.c	/^int write_cc_bitmap_as_simplexml(struct cc_subtitle *sub, struct encoder_ctx *context)$/;"	f
write_cc_bitmap_as_smptett	ccx_encoders_smptett.c	/^int write_cc_bitmap_as_smptett(struct cc_subtitle *sub, struct encoder_ctx *context)$/;"	f
write_cc_bitmap_as_spupng	spupng_encoder.c	/^int write_cc_bitmap_as_spupng(struct cc_subtitle *sub, struct encoder_ctx *context)$/;"	f
write_cc_bitmap_as_srt	ccx_encoders_srt.c	/^int write_cc_bitmap_as_srt(struct cc_subtitle *sub, struct encoder_ctx *context)$/;"	f
write_cc_bitmap_as_transcript	ccx_encoders_common.c	/^int write_cc_bitmap_as_transcript(struct cc_subtitle *sub, struct encoder_ctx *context)$/;"	f
write_cc_bitmap_as_webvtt	ccx_encoders_webvtt.c	/^int write_cc_bitmap_as_webvtt(struct cc_subtitle *sub, struct encoder_ctx *context)$/;"	f
write_cc_buffer	ccx_decoders_608.c	/^int write_cc_buffer(ccx_decoder_608_context *context, struct cc_subtitle *sub)$/;"	f
write_cc_buffer_as_g608	ccx_encoders_g608.c	/^int write_cc_buffer_as_g608(struct eia608_screen *data, struct encoder_ctx *context)$/;"	f
write_cc_buffer_as_sami	ccx_encoders_sami.c	/^int write_cc_buffer_as_sami(struct eia608_screen *data, struct encoder_ctx *context)$/;"	f
write_cc_buffer_as_simplexml	ccx_encoders_common.c	/^int write_cc_buffer_as_simplexml(struct eia608_screen *data, struct encoder_ctx *context)$/;"	f
write_cc_buffer_as_smptett	ccx_encoders_smptett.c	/^int write_cc_buffer_as_smptett(struct eia608_screen *data, struct encoder_ctx *context)$/;"	f
write_cc_buffer_as_spupng	ccx_encoders_spupng.c	/^int write_cc_buffer_as_spupng(struct eia608_screen *data,struct encoder_ctx *context)$/;"	f
write_cc_buffer_as_srt	ccx_encoders_srt.c	/^int write_cc_buffer_as_srt(struct eia608_screen *data, struct encoder_ctx *context)$/;"	f
write_cc_buffer_as_transcript2	ccx_encoders_common.c	/^int write_cc_buffer_as_transcript2(struct eia608_screen *data, struct encoder_ctx *context)$/;"	f
write_cc_buffer_as_webvtt	ccx_encoders_webvtt.c	/^int write_cc_buffer_as_webvtt(struct eia608_screen *data, struct encoder_ctx *context)$/;"	f
write_cc_buffer_to_gui	ccx_encoders_common.c	/^void write_cc_buffer_to_gui(struct eia608_screen *data, struct encoder_ctx *context)$/;"	f
write_cc_line	ccx_decoders_608.c	/^int write_cc_line(ccx_decoder_608_context *context, struct cc_subtitle *sub)$/;"	f
write_cc_line_as_simplexml	ccx_encoders_common.c	/^void write_cc_line_as_simplexml(struct eia608_screen *data, struct encoder_ctx *context, int line_number)$/;"	f
write_cc_line_as_transcript2	ccx_encoders_common.c	/^void write_cc_line_as_transcript2(struct eia608_screen *data, struct encoder_ctx *context, int line_number)$/;"	f
write_cc_subtitle_as_sami	ccx_encoders_sami.c	/^int write_cc_subtitle_as_sami(struct cc_subtitle *sub, struct encoder_ctx *context)$/;"	f
write_cc_subtitle_as_simplexml	ccx_encoders_common.c	/^int write_cc_subtitle_as_simplexml(struct cc_subtitle *sub, struct encoder_ctx *context)$/;"	f
write_cc_subtitle_as_smptett	ccx_encoders_smptett.c	/^int write_cc_subtitle_as_smptett(struct cc_subtitle *sub, struct encoder_ctx *context)$/;"	f
write_cc_subtitle_as_spupng	ccx_encoders_spupng.c	/^int write_cc_subtitle_as_spupng(struct cc_subtitle *sub, struct encoder_ctx *context)$/;"	f
write_cc_subtitle_as_srt	ccx_encoders_srt.c	/^int write_cc_subtitle_as_srt(struct cc_subtitle *sub,struct encoder_ctx *context)$/;"	f
write_cc_subtitle_as_transcript	ccx_encoders_common.c	/^int write_cc_subtitle_as_transcript(struct cc_subtitle *sub, struct encoder_ctx *context)$/;"	f
write_cc_subtitle_as_webvtt	ccx_encoders_webvtt.c	/^int write_cc_subtitle_as_webvtt(struct cc_subtitle *sub, struct encoder_ctx *context)$/;"	f
write_char	ccx_decoders_608.c	/^void write_char(const unsigned char c, ccx_decoder_608_context *context)$/;"	f
write_dvb_sub	dvb_subtitle_decoder.c	/^static int write_dvb_sub(struct lib_cc_decode *dec_ctx, struct cc_subtitle *sub)$/;"	f	file:
write_es	ccx_demuxer.h	/^	int (*write_es)(struct ccx_demuxer *ctx, unsigned char* buf, size_t len);$/;"	m	struct:ccx_demuxer
write_format	ccx_common_option.h	/^	enum ccx_output_format write_format; \/\/ 0=Raw, 1=srt, 2=SMI$/;"	m	struct:ccx_s_options	typeref:enum:ccx_s_options::ccx_output_format
write_format	ccx_common_option.h	/^	enum ccx_output_format write_format; \/\/ 0=Raw, 1=srt, 2=SMI$/;"	m	struct:encoder_cfg	typeref:enum:encoder_cfg::ccx_output_format
write_format	ccx_decoders_structs.h	/^	enum ccx_output_format write_format; \/\/ 0=Raw, 1=srt, 2=SMI$/;"	m	struct:lib_cc_decode	typeref:enum:lib_cc_decode::ccx_output_format
write_format	ccx_encoders_common.h	/^	enum ccx_output_format write_format; \/\/ 0=Raw, 1=srt, 2=SMI$/;"	m	struct:encoder_ctx	typeref:enum:encoder_ctx::ccx_output_format
write_format	lib_ccx.h	/^	enum ccx_output_format write_format; \/\/ 0=Raw, 1=srt, 2=SMI$/;"	m	struct:ccx_s_teletext_config	typeref:enum:ccx_s_teletext_config::ccx_output_format
write_format	lib_ccx.h	/^	enum ccx_output_format write_format; \/\/ 0=Raw, 1=srt, 2=SMI$/;"	m	struct:lib_ccx_ctx	typeref:enum:lib_ccx_ctx::ccx_output_format
write_format	telxcc.c	/^	enum ccx_output_format write_format; \/\/ 0=Raw, 1=srt, 2=SMI$/;"	m	struct:TeletextCtx	typeref:enum:TeletextCtx::ccx_output_format	file:
write_newline	ccx_encoders_common.c	/^static int write_newline(struct encoder_ctx *ctx, int lang)$/;"	f	file:
write_spucomment	spupng_encoder.c	/^void write_spucomment(struct spupng_t *sp,const char *str)$/;"	f
write_spumux_footer	spupng_encoder.c	/^void write_spumux_footer(struct ccx_s_write *out)$/;"	f
write_spumux_header	spupng_encoder.c	/^void write_spumux_header(struct encoder_ctx *ctx, struct ccx_s_write *out)$/;"	f
write_sputag	spupng_encoder.c	/^void write_sputag(struct spupng_t *sp,LLONG ms_start,LLONG ms_end)$/;"	f
write_stringz_as_sami	ccx_encoders_sami.c	/^int write_stringz_as_sami(char *string, struct encoder_ctx *context, LLONG ms_start, LLONG ms_end)$/;"	f
write_stringz_as_smptett	ccx_encoders_smptett.c	/^void write_stringz_as_smptett(char *string, struct encoder_ctx *context, LLONG ms_start, LLONG ms_end)$/;"	f
write_stringz_as_srt	ccx_encoders_srt.c	/^int write_stringz_as_srt(char *string, struct encoder_ctx *context, LLONG ms_start, LLONG ms_end)$/;"	f
write_stringz_as_webvtt	ccx_encoders_webvtt.c	/^int write_stringz_as_webvtt(char *string, struct encoder_ctx *context, LLONG ms_start, LLONG ms_end)$/;"	f
write_subtitle_file_footer	ccx_encoders_common.c	/^int write_subtitle_file_footer(struct encoder_ctx *ctx,struct ccx_s_write *out)$/;"	f
write_subtitle_file_header	ccx_encoders_common.c	/^static int write_subtitle_file_header(struct encoder_ctx *ctx, struct ccx_s_write *out)$/;"	f	file:
write_xds_string	ccx_decoders_xds.c	/^int write_xds_string(struct cc_subtitle *sub, struct ccx_decoders_xds_context *ctx, char *p, size_t len)$/;"	f
writedata	ccx_decoders_structs.h	/^	int (*writedata)(const unsigned char *data, int length, void *private_data, struct cc_subtitle *sub);$/;"	m	struct:lib_cc_decode
writen	networking.c	/^ssize_t writen(int fd, const void *vptr, size_t n)$/;"	f
writeraw	output.c	/^int writeraw (const unsigned char *data, int length, void *private_data, struct cc_subtitle *sub)$/;"	f
writercwtdata	output.c	/^void writercwtdata (struct lib_cc_decode *ctx, const unsigned char *data, struct cc_subtitle *sub)$/;"	f
writing_format	ccx_decoders_isdb.c	/^enum writing_format$/;"	g	file:
wsaData	file_functions.c	/^WSADATA wsaData = {0};$/;"	v
wtv_chunked_buffer	wtv_constants.h	/^struct wtv_chunked_buffer$/;"	s
wtv_getmoredata	wtv_functions.c	/^int wtv_getmoredata(struct lib_ccx_ctx *ctx, struct demuxer_data ** ppdata)$/;"	f
wtvconvertfix	ccx_common_option.h	/^	int wtvconvertfix; \/\/ Fix broken Windows 7 conversion$/;"	m	struct:ccx_s_options
wtvmpeg2	ccx_common_option.h	/^	int wtvmpeg2;$/;"	m	struct:ccx_s_options
x	ccx_decoders_isdb.c	/^		int x, y;$/;"	m	struct:__anon11::disp_area	file:
x	ccx_decoders_isdb.c	/^	int x,y;$/;"	m	struct:ISDBPos	file:
x	ccx_decoders_structs.h	/^	int x;$/;"	m	struct:cc_bitmap
x	dvb_subtitle_decoder.c	/^	int x;$/;"	m	struct:DVBSubDisplayDefinition	file:
xOffset	spupng_encoder.h	/^	int xOffset;$/;"	m	struct:spupng_t
x_pos	dvb_subtitle_decoder.c	/^	int x_pos;$/;"	m	struct:DVBSubObjectDisplay	file:
x_pos	dvb_subtitle_decoder.c	/^	int x_pos;$/;"	m	struct:DVBSubRegionDisplay	file:
xds	ccx_decoders_608.h	/^	uint8_t xds : 1;$/;"	m	struct:ccx_decoder_608_report
xds	ccx_encoders_structs.h	/^	int xds; \/\/ Show XDS or not$/;"	m	struct:ccx_encoders_transcript_format
xds_buffer	ccx_decoders_xds.c	/^struct xds_buffer$/;"	s	file:
xds_buffers	ccx_decoders_xds.c	/^	struct xds_buffer xds_buffers[NUM_XDS_BUFFERS];$/;"	m	struct:ccx_decoders_xds_context	typeref:struct:ccx_decoders_xds_context::xds_buffer	file:
xds_cea608_test	ccx_decoders_xds.c	/^void xds_cea608_test(struct ccx_decoders_xds_context *ctx, struct cc_subtitle *sub)$/;"	f
xds_class	ccx_decoders_xds.c	/^	int xds_class;$/;"	m	struct:xds_buffer	file:
xds_ctx	ccx_decoders_structs.h	/^	struct ccx_decoders_xds_context *xds_ctx;$/;"	m	struct:lib_cc_decode	typeref:struct:lib_cc_decode::ccx_decoders_xds_context
xds_debug_test	ccx_decoders_xds.c	/^void xds_debug_test(struct ccx_decoders_xds_context *ctx, struct cc_subtitle *sub)$/;"	f
xds_do_channel	ccx_decoders_xds.c	/^int xds_do_channel (struct cc_subtitle *sub, struct ccx_decoders_xds_context *ctx)$/;"	f
xds_do_content_advisory	ccx_decoders_xds.c	/^void xds_do_content_advisory (struct cc_subtitle *sub, struct ccx_decoders_xds_context *ctx, unsigned c1, unsigned c2)$/;"	f
xds_do_copy_generation_management_system	ccx_decoders_xds.c	/^void xds_do_copy_generation_management_system (struct cc_subtitle *sub, struct ccx_decoders_xds_context *ctx, unsigned c1, unsigned c2)$/;"	f
xds_do_current_and_future	ccx_decoders_xds.c	/^int xds_do_current_and_future (struct cc_subtitle *sub, struct ccx_decoders_xds_context *ctx)$/;"	f
xds_do_misc	ccx_decoders_xds.c	/^int xds_do_misc (struct ccx_decoders_xds_context *ctx)$/;"	f
xds_do_private_data	ccx_decoders_xds.c	/^int xds_do_private_data (struct cc_subtitle *sub, struct ccx_decoders_xds_context *ctx)$/;"	f
xds_len	ccx_decoders_structs.h	/^	size_t xds_len;$/;"	m	struct:eia608_screen
xds_program_description	ccx_decoders_xds.c	/^	char xds_program_description[8][33];$/;"	m	struct:ccx_decoders_xds_context	file:
xds_program_length_shown	ccx_decoders_xds.c	/^	int xds_program_length_shown;$/;"	m	struct:ccx_decoders_xds_context	file:
xds_start_time_shown	ccx_decoders_xds.c	/^	int xds_start_time_shown;$/;"	m	struct:ccx_decoders_xds_context	file:
xds_str	ccx_decoders_structs.h	/^	char *xds_str;$/;"	m	struct:eia608_screen
xds_type	ccx_decoders_xds.c	/^	int xds_type;$/;"	m	struct:xds_buffer	file:
xds_write_transcript_line_prefix	ccx_encoders_xds.c	/^void xds_write_transcript_line_prefix (struct encoder_ctx *context, struct ccx_s_write *wb, LLONG start_time, LLONG end_time, int cur_xds_packet_class)$/;"	f
xdsprint	ccx_decoders_xds.c	/^void xdsprint (struct cc_subtitle *sub, struct ccx_decoders_xds_context *ctx, const char *fmt,...)$/;"	f
xmltv	ccx_common_option.h	/^	int xmltv; \/\/ 1 = full output. 2 = live output. 3 = both$/;"	m	struct:ccx_s_options
xmltvliveinterval	ccx_common_option.h	/^	int xmltvliveinterval; \/\/ interval in seconds between writting xmltv output files in live mode$/;"	m	struct:ccx_s_options
xmltvonlycurrent	ccx_common_option.h	/^	int xmltvonlycurrent; \/\/ 0 off 1 on$/;"	m	struct:ccx_s_options
xmltvoutputinterval	ccx_common_option.h	/^	int xmltvoutputinterval; \/\/ interval in seconds between writting xmltv full file output$/;"	m	struct:ccx_s_options
y	ccx_decoders_isdb.c	/^		int x, y;$/;"	m	struct:__anon11::disp_area	file:
y	ccx_decoders_isdb.c	/^	int x,y;$/;"	m	struct:ISDBPos	file:
y	ccx_decoders_structs.h	/^	int y;$/;"	m	struct:cc_bitmap
y	dvb_subtitle_decoder.c	/^	int y;$/;"	m	struct:DVBSubDisplayDefinition	file:
yOffset	spupng_encoder.h	/^	int yOffset;$/;"	m	struct:spupng_t
y_pos	dvb_subtitle_decoder.c	/^	int y_pos;$/;"	m	struct:DVBSubObjectDisplay	file:
y_pos	dvb_subtitle_decoder.c	/^	int y_pos;$/;"	m	struct:DVBSubRegionDisplay	file:
zvbi_decoder	ccx_decoders_vbi.h	/^	vbi_raw_decoder zvbi_decoder;$/;"	m	struct:ccx_decoder_vbi_ctx
